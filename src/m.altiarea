#!/bin/bash
############################################################################
#
# MODULE:       m.altiarea
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Altitude calcul on polygon vector
# REQUIREMENTS: m.testtype
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: Altitude calcul on polygon vector
#%END
#%flag
#% key: a
#% description: calculate altitude with one pixel on centroid; default (no flags) is mean feature altitude on centroid
#%END
#%flag
#% key: n
#% description: calculate altitude with D-8 neighbours on centroid; default (no flags) is mean feature altitude on centroid
#%END
#%flag
#% key: z
#% description: join z attribute from INPUT to OUTPUT and OUTPOINT (use colz column); default (no flags) is mean feature altitude on centroid
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input polygon vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output polygon vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: outpoint
#% type: string
#% gisprompt: new,vector,vector
#% description: Output point vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: dem
#% type: string
#% gisprompt: old,cell,raster
#% description: Input DEM name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: colz
#% type: string
#% description: id z attribute column name (for flag z)
#% required : no
#%END

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
OUTPOINT="$GIS_OPT_OUTPOINT"
MNT="$GIS_OPT_DEM"
COLZ="$GIS_OPT_COLZ"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 


#awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=15;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_altiareatmp* 2>/dev/null
  g.mremove -f rast="$INPUT"_altiareatmp* 2>/dev/null
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
	fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



#dependancies test
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi


#test if output vector map already exists 
eval `g.findfile element=vector file="$OUTPUT"`
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi


#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.13
	
if [ -s "$TMP.${PROG}.13" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi

#test if outpoint vector map already exists
eval `g.findfile element=vector file="$OUTPOINT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPOINT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPOINT>  already exists and will be overwritten"
  fi
fi

#test if OUTPOINT vector name is allowed
v.in.region output=$OUTPOINT --q  |grep -v "SQL" 2>$TMP.${PROG}.15
	
if [ -s "$TMP.${PROG}.15" ];then
	g.message -w message="Illegal vector map name <$OUTPOINT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPOINT --q  
fi





#test if input temporary vector maps already exist
g.mlist type=vect pattern="$INPUT"_altiareatmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_altiareatmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2
fi

#test if input temporary raster maps already exist

g.mlist type=rast pattern="$INPUT"_altiareatmp*   > $TMP.${PROG}.2
if [ -s "$TMP.${PROG}.2" ];then
  g.message -w message="<$INPUT>_altiareatmp name for temporay raster files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2
fi

#test if input vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT}  > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.3
#if input vector map is not a polygon vector, exit program

if [ "`cat $TMP.${PROG}.3`" != "polygone" ] ; then
  g.message -e message="<$INPUT> doesn't exist or isn't a vector polygon !!"
  cleanup
  exit 2
fi

#test if input dem map exists
g.findfile element=cell mapset=${MAPSET?} file=${MNT} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -e message="<$MNT> raster not found !!"
  cleanup
  exit 2
fi
#test for flags
if [ $GIS_FLAG_A -eq 1 ] && [ $GIS_FLAG_N -eq 1 ] ;then
  g.message -e message="Two flags choosen !!"
  cleanup
  exit 2
fi

#test for flags
if [ $GIS_FLAG_A -eq 1 ] && [ $GIS_FLAG_Z -eq 1 ] ;then
  g.message -e message="Two flags choosen !!"
  cleanup
  exit 2
fi

#test for flags
if [ $GIS_FLAG_Z -eq 1 ] && [ $GIS_FLAG_N -eq 1 ] ;then
  g.message -e message="Two flags choosen !!"
  cleanup
  exit 2
fi

#test for flag z
if [ $GIS_FLAG_Z -eq 1 ] ;then
	 #test for COLZ
	  if [ -z "$COLZ" ];then
		g.message -e message=" <colz> value is empty !!"
		cleanup
		exit 2
	  fi
	  
	  
	  v.info -c map=$INPUT --q |cut -d"|" -f2 |grep "^$COLZ$" > $TMP.${PROG}.12
	  if [ ! -s "$TMP.${PROG}.12" ];then
		g.message -e message="The column <$COLZ> doesn't exist !!"
		cleanup
		exit 2
	  fi
	  
	  if [ "$COLZ" = "cat" ];then
			g.message -e message="<colz> can't be <cat> !!"
			cleanup
			exit 2	
	  fi
fi

g.region rast=$MNT --q 2>>~/$LOGFILE
g.copy vect=$INPUT,$OUTPUT --q 2>>~/$LOGFILE
#in the OUTPUT, creation of columns x,y,z
#if already exists, overwrite (no LOGFILE here)

v.db.dropcol map=$OUTPUT column=x --q 2>/dev/null
v.db.dropcol map=$OUTPUT column=y --q 2>/dev/null
v.db.dropcol map=$OUTPUT column=z --q 2>/dev/null
v.db.addcol map=$OUTPUT columns="x DOUBLE PRECISION,y DOUBLE PRECISION,z DOUBLE PRECISION" layer=1 --q 2>>~/$LOGFILE

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

#collect INPUT centroids

v.extract input=$OUTPUT output="$INPUT"_altiareatmp1 type=centroid --q 2>>~/$LOGFILE
v.type input="$INPUT"_altiareatmp1 output=$OUTPOINT type=centroid,point --q 2>>~/$LOGFILE
g.remove vect="$INPUT"_altiareatmp1 --q 2>>~/$LOGFILE
#x, y coordinate calculation

v.to.db map=$OUTPOINT option=coor column=x,y  --q 2>>~/$LOGFILE
v.db.addcol map=$OUTPOINT columns="catl INTEGER" --q 2>>~/$LOGFILE
v.distance from=$OUTPOINT to=$INPUT from_type=point to_type=area from_layer=1 to_layer=1 upload=cat column=catl dmax=0.05 --q 2>>~/$LOGFILE

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi



if [ $GIS_FLAG_A -eq 1 ] ;then
	#if flag A choosen, altitude calculation with ONE pixel
	# z altitude collect
    v.what.rast vector=$OUTPOINT raster=$MNT layer=1 column=z --q 2>>~/$LOGFILE
  
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi

else
	if [ $GIS_FLAG_Z -eq 1 ] ;then
		#if flag Z choosen, altitude collect by colz column
		
		v.distance from=$OUTPOINT to=$INPUT from_type=point to_type=area from_layer=1 to_layer=1 upload=to_attr column=z to_col=$COLZ dmax=0.05 --q 2>>~/$LOGFILE
		
		
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
	else

	  if [ $GIS_FLAG_N -eq 1 ] ;then
	  #if flag N choosen, altitude calculation with the height neighbours (g.region resolution *3)
	  	v.db.select -c map=$INPUT column=cat --q > $TMP.${PROG}.4 2>>~/$LOGFILE
		g.region -g |grep "nsres" |cut -d"=" -f2 > $TMP.${PROG}.5 2>>~/$LOGFILE
		echo "`cat $TMP.${PROG}.5` 3"|awk '{print $1*$2}' > $TMP.${PROG}.6 2>>~/$LOGFILE
		
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
		
		for j in `cat $TMP.${PROG}.4`;do
		  v.extract input=$INPUT output="$INPUT"_altiareatmp2 where="cat = $j" type=centroid --q 2>>~/$LOGFILE
		  v.type input="$INPUT"_altiareatmp2 output="$INPUT"_altiareatmp3 type=centroid,point --q 2>>~/$LOGFILE
		  g.region rast=$MNT --q 2>>~/$LOGFILE
		  g.region res=`cat $TMP.${PROG}.6` --q 2>>~/$LOGFILE
		  v.to.rast input="$INPUT"_altiareatmp3 output="$INPUT"_altiareatmp1 use=cat --q 2>>~/$LOGFILE
		  r.to.vect input="$INPUT"_altiareatmp1 output="$INPUT"_altiareatmp4 feature=point --q 2>/dev/null
		  v.db.addcol map="$INPUT"_altiareatmp4 columns="z DOUBLE PRECISION" --q 2>/dev/null
		  v.what.rast vector="$INPUT"_altiareatmp4 raster=$MNT column=z --q 2>/dev/null
		  v.db.select -c map="$INPUT"_altiareatmp4 column=z --q > $TMP.${PROG}.7 2>>~/$LOGFILE
		  v.db.update map=$OUTPOINT column=z value=`cat $TMP.${PROG}.7` where="catl =$j" --q 2>>~/$LOGFILE
	  
		  rm -f $TMP.${PROG}.7 $TMP.${PROG}.8
		  g.remove vect="$INPUT"_altiareatmp2,"$INPUT"_altiareatmp3,"$INPUT"_altiareatmp4 --q 2>>~/$LOGFILE
		  g.remove rast="$INPUT"_altiareatmp1 --q 2>>~/$LOGFILE
		  
		  if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		  fi
		 done
		rm -f $TMP.${PROG}.4
		rm -f $TMP.${PROG}.6
		g.region res=`cat $TMP.${PROG}.5` --q 2>>~/$LOGFILE
	  else
	  
		#if no flag A and no flag N, centroid altitudes calculation by the mean of all the altitudes on the polygon (calling v.rast.stats
		g.copy vect=$INPUT,"$INPUT"_altiareatmp2 --q 2>>~/$LOGFILE
		v.db.droptable -f map="$INPUT"_altiareatmp2 --q 2>>~/$LOGFILE
		v.db.addtable map="$INPUT"_altiareatmp2 --q 2>>~/$LOGFILE
		g.region vect="$INPUT"_altiareatmp2 --q 2>>~/$LOGFILE
		v.rast.stats vector="$INPUT"_altiareatmp2 raster=$MNT colprefix=dem  --q 2>>~/$LOGFILE
		v.distance from=$OUTPOINT from_layer=1 from_type=point to="$INPUT"_altiareatmp2 to_type=area to_layer=1 dmax=0.1 upload=to_attr column=z to_column=dem_mean --q 2>>~/$LOGFILE
		g.region -d --q 2>>~/$LOGFILE
		
				
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi

	  fi
	fi  
fi

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi


#in OUTPUT, update of the information of the x,y,z of the polygon centroids
v.distance from=$OUTPUT from_layer=1 from_type=centroid to=$OUTPOINT to_layer=1 to_type=point dmax=0.2 upload=to_attr column=x to_column=x --q 2>>~/LOGFILE
v.distance from=$OUTPUT from_layer=1 from_type=centroid to=$OUTPOINT to_layer=1 to_type=point dmax=0.2 upload=to_attr column=y to_column=y --q 2>>~/LOGFILE
v.distance from=$OUTPUT from_layer=1 from_type=centroid to=$OUTPOINT to_layer=1 to_type=point dmax=0.2 upload=to_attr column=z to_column=z --q 2>>~/LOGFILE


  if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
 fi
# done

#cleanup procedure
cleanup
exit 0
