#!/bin/bash
############################################################################
#
# MODULE:       m.altiline
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Altitude calcul on line vector
# REQUIREMENTS: m.testtype, v.line.center
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: Altitude calcul on line vector
#%END
#%flag
#% key: c
#% description: calculate altitude with one pixel on centroid; default (no flag c) is mean feature altitude on centroid
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input line vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output line vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: outpoint
#% type: string
#% gisprompt: new,vector,vector
#% description: Output point vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: dem
#% type: string
#% gisprompt: old,cell,raster
#% description: Input DEM name
#% key_desc : name
#% required : yes
#%END

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
OUTPOINT="$GIS_OPT_OUTPOINT"
MNT="$GIS_OPT_DEM"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi


#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 


#awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=14;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_altilinetmp* --q 2>/dev/null
  g.mremove -f rast="$INPUT"_altilinetmp* --q 2>/dev/null
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



#dependancies test
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.line.center`" ];then
  g.message -e message="v.line.center subscript required, please install it first"
  exit 2
fi


#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi


#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.12
	
if [ -s "$TMP.${PROG}.12" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi


#test if outpoint vector map already exists
eval `g.findfile element=vector file="$OUTPOINT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPOINT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPOINT>  already exists and will be overwritten"
  fi
fi

#test if OUTPOINT vector name is allowed
v.in.region output=$OUTPOINT --q  |grep -v "SQL" 2>$TMP.${PROG}.14
	
if [ -s "$TMP.${PROG}.14" ];then
	g.message -w message="Illegal vector map name <$OUTPOINT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPOINT --q  
fi



#test if input temporary vector maps already exist

g.mlist type=vect pattern="$INPUT"_altilinetmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_altilinetmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2
fi

#test if input temporary raster maps already exist

g.mlist type=rast pattern="$INPUT"_altilinetmp*  > $TMP.${PROG}.2
if [ -s "$TMP.${PROG}.2" ];then
  g.message -w message="<$INPUT>_altilinetmp name for temporay raster files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2
fi

#test if input vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT}  > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.3
#if input vector map is not a line vector, exit program

if [ "`cat $TMP.${PROG}.3`" != "line" ] ; then
  g.message -e message="<$INPUT> doesn't exist or isn't a vector line !!"
  cleanup
  exit 2
fi

#test if input dem map exists
g.findfile element=cell mapset=${MAPSET?} file=${MNT} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -e message="<$MNT> raster not found !!"
  cleanup
  exit 2
fi



g.region rast=$MNT --q 2>>~/$LOGFILE
g.copy vect=$INPUT,$OUTPUT --q 2>>~/$LOGFILE
#in the OUTPUT, creation of columns x,y,z
#if already exists, overwrite (no LOGFILE here)
v.db.dropcol map=$OUTPUT column=x --q 2>/dev/null
v.db.dropcol map=$OUTPUT column=y --q 2>/dev/null
v.db.dropcol map=$OUTPUT column=z --q 2>/dev/null

v.db.addcol map=$OUTPUT columns="x DOUBLE PRECISION,y DOUBLE PRECISION,z DOUBLE PRECISION" layer=1 --q 2>>~/$LOGFILE
#collect INPUT centroids
v.line.center input=$OUTPUT layer=1 output=$OUTPOINT 2>/dev/null
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#altitude calculation of the $INPUT centroids and x,y coordinate calculation
v.db.addtable map=$OUTPOINT columns="catl integer,z double precision,x double precision,y double precision" --q 2>>~/$LOGFILE
v.to.db map=$OUTPOINT option=coor column=x,y  --q 2>>~/$LOGFILE
v.distance from=$OUTPOINT to=$INPUT from_type=point to_type=line from_layer=1 to_layer=1 upload=cat column=catl dmax=0.05 --q 2>>~/$LOGFILE

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

if [ $GIS_FLAG_C -eq 1 ] ;then
	#if flag C choosen, altitude calculation with ONE pixel
	# z altitude collect
   v.what.rast vector=$OUTPOINT raster=$MNT layer=1 column=z --q 2>>~/$LOGFILE
  if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
  fi

else
	#if no flag C, centroid altitudes calculation by the mean of all the altitudes on the line
  
  
		g.copy vect=$INPUT,"$INPUT"_altilinetmp1 --q 2>>~/$LOGFILE
		v.db.droptable -f map="$INPUT"_altilinetmp1 --q 2>>~/$LOGFILE
		v.db.addtable map="$INPUT"_altilinetmp1 --q 2>>~/$LOGFILE
		g.region vect="$INPUT"_altilinetmp1 --q 2>>~/$LOGFILE
		v.rast.stats vector="$INPUT"_altilinetmp1 raster=$MNT colprefix=dem  --q 2>>~/$LOGFILE
		v.distance from=$OUTPOINT from_layer=1 from_type=point to="$INPUT"_altilinetmp1 to_type=line to_layer=1 dmax=0.2 upload=to_attr column=z to_column=dem_mean --q 2>>~/$LOGFILE
		g.region -d --q 2>>~/$LOGFILE
		
				
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
  
    
fi
#in OUTPUT, update of the information of the x,y,z of the line centroids

v.db.select -c map=$OUTPOINT column=catl,x,y,z fs="|" nv=0 --q > $TMP.${PROG}.8 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

for i in `cat $TMP.${PROG}.8`;do
  #update of the x column in $OUTPUT
  v.db.update map=$OUTPUT layer=1 column=x value=`echo "$i" |cut -d"|" -f2 ` where="cat=`echo "$i" |cut -d"|" -f1`" --q 2>>~/$LOGFILE
  #update of the y column in $OUTPUT
  v.db.update map=$OUTPUT layer=1 column=y value=`echo "$i" |cut -d"|" -f3` where="cat=`echo "$i" |cut -d"|" -f1`" --q 2>>~/$LOGFILE
  #update of the z column in $OUTPUT
  v.db.update map=$OUTPUT layer=1 column=z value=`echo "$i" |cut -d"|" -f4` where="cat=`echo "$i" |cut -d"|" -f1`" --q 2>>~/$LOGFILE
  if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
  fi
done





#cleanup procedure
cleanup
exit 0
