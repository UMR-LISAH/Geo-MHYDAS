#!/bin/bash
############################################################################
#
# MODULE:       m.asciipoint
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      coordinate points ascii file import and specific creation of a vector point map
# REQUIREMENTS: m.asciipointpl
#  
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.#
#############################################################################

#%Module
#%  description: coordinate points ascii file import and specific creation of a vector point map
#%END
#%option
#% key: file
#% type: string
#% description: Name of input coordinate points ascii file
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output point vector map
#% key_desc : name
#% required : yes
#%END
#%option
#% key: col 
#% type: string
#% description: Presence of column title in coordinate points file (y/n); default is no
#% required : no
#%END
#%option
#% key: fs
#% type: string
#% description: Field separator coordinate points file; default is space 
#% required : no
#%END
#%option
#% key: x
#% type: string
#% description: Number of column used as x coordinate (first column is 1) in coordinate points file;default is 1  
#% required : no
#%END
#%option
#% key: y
#% type: string
#% description: Number of column used as y coordinate (first column is 1) in coordinate points file;default is 2  
#% required : no
#%END


eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

FILE="$GIS_OPT_FILE"
OUTPUT="$GIS_OPT_OUTPUT"
COL="$GIS_OPT_COL"
FS="$GIS_OPT_FS"
X="$GIS_OPT_X"
Y="$GIS_OPT_Y"



if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

#awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"


#cleanup procedure
cleanup()
{
  \rm -f $TMP
   rm -f $TMP.${PROG}.0
   for ((u=1;u<=14;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done
  g.mremove -f vect="$OUTPUT"_asciitmp* --q
	if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
	fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



#dependancies test
if [ ! -x "`which m.asciipointpl`" ];then
  g.message -e message="m.asciipointpl subscript required, please install it first"
  exit 2
fi

# securities begin :

if [ ! -e "/$FILE" ]; then
	g.message -e message="<$FILE> not found !!"
	cleanup 
	exit 2
fi


#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi

#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.14
	
if [ -s "$TMP.${PROG}.14" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi



#test on COL value
if [ ! -z "$COL" ];then
	if [ "$COL" != "y" ] && [ "$COL" != "n" ];then
		g.message -e message="Enter y or no for COL value !!"
		cleanup
		exit 2
	fi
fi

#test on X value
if [ ! -z "$X" ] ;then
 if [ "`echo $X |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
	g.message -e message="<X> isn't numeric !!"
	cleanup
	exit 2
 fi

 if [ "`echo $X |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="<X> isn't numeric !!"
	cleanup
	exit 2
 fi
fi

#test on Y value
if [ ! -z "$Y" ] ;then
 if [ "`echo $Y |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
	g.message -e message="<Y> isn't numeric !!"
	cleanup
	exit 2
 fi

 if [ "`echo $Y |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="<Y> isn't numeric !!"
	cleanup
	exit 2
 fi
fi


# securities end

#suppress of the empty lines

sed '/^$/d' /$FILE > $TMP.${PROG}.0 2>>~/$LOGFILE

if [ ! -z "$COL" ];then
	wc -l $TMP.${PROG}.0 |cut -d" " -f1> $TMP.${PROG}.1 2>>~/$LOGFILE
	typeset -i lnum
	lnum=`cat $TMP.${PROG}.1`-1
	tail -n $lnum $TMP.${PROG}.0 > $TMP.${PROG}.2 2>>~/$LOGFILE
else
	cp $TMP.${PROG}.0 $TMP.${PROG}.2 2>>~/$LOGFILE
fi




###########
#for creating the linked dbf files, it needs an additional column
# adding the column label in $TMP.${PROG}.3 with an incremential value
if [ ! -z "$COL" ];then
	echo "`cat $TMP.${PROG}.2`" | awk -F"$COL" '{ OFS = " " ; ORS = "\n"; $1 = $1; print $0 }'> $TMP.${PROG}.3 2>>~/$LOGFILE
else
	cp $TMP.${PROG}.2 $TMP.${PROG}.3 2>>~/$LOGFILE
fi
if [ ! -z "$X" ]  ;then
	if 	[ ! -z "$Y" ] ;then
		cut -d" " -f"$X","$Y" $TMP.${PROG}.3 > $TMP.${PROG}.4 2>>~/$LOGFILE
	else
		cut -d" " -f"$X",2 $TMP.${PROG}.3 > $TMP.${PROG}.4 2>>~/$LOGFILE
	fi
else
	if 	[ ! -z "$Y" ] ;then
		cut -d" " -f1,"$Y" $TMP.${PROG}.3 > $TMP.${PROG}.4 2>>~/$LOGFILE
	else
		cut -d" " -f1,2 $TMP.${PROG}.3 > $TMP.${PROG}.4 2>>~/$LOGFILE
		X=1
		Y=2
	fi
fi	
	


# in $TMP.${PROG}.4 verification that all characters are numerical values
grep -E [a-zA-Z] $TMP.${PROG}.4 > $TMP.${PROG}.7 2>>~/$LOGFILE
if [ -s "$TMP.${PROG}.7" ];then
	g.message -e message="There are non numerical values in the file !!"
	cleanup
	exit 2
fi


# verification that the coordinate values are in the spatial extent of the mapset
g.region -p --q> $TMP.${PROG}.8 2>>~/$LOGFILE
grep "^north:" $TMP.${PROG}.8|cut -c 13-26 > $TMP.${PROG}.9 2>>~/$LOGFILE
grep "^south:" $TMP.${PROG}.8|cut -c 13-26 >> $TMP.${PROG}.9 2>>~/$LOGFILE
grep "^west:" $TMP.${PROG}.8|cut -c 13-26 >> $TMP.${PROG}.9 2>>~/$LOGFILE
grep "^east:" $TMP.${PROG}.8|cut -c 13-26 >> $TMP.${PROG}.9 2>>~/$LOGFILE

sort -k"$Y"g $TMP.${PROG}.3|tail -n 1|cut -d" " -f"$Y" >> $TMP.${PROG}.9 2>>~/$LOGFILE
sort -k"$Y"g $TMP.${PROG}.3|head -n 1|cut -d" " -f"$Y" >> $TMP.${PROG}.9  2>>~/$LOGFILE
sort -k"$X"g $TMP.${PROG}.3|head -n 1|cut -d" " -f"$X" >> $TMP.${PROG}.9 2>>~/$LOGFILE
sort -k"$X"g $TMP.${PROG}.3|tail -n 1|cut -d" " -f"$X" >> $TMP.${PROG}.9 2>>~/$LOGFILE




#call m.asciipointpl script
m.asciipointpl --input=$TMP.${PROG}.9 --output=$TMP.${PROG}.10 2>>~/$LOGFILE



if [ -s "$TMP.${PROG}.10" ] ; then
	v.in.ascii input=$TMP.${PROG}.4 output="$OUTPUT"_asciitmp format=point fs=' ' x=1 y=2 --q 2>>~/$LOGFILE
	v.clean input="$OUTPUT"_asciitmp output=$OUTPUT type=point tool=rmdupl --q 
	v.db.addtable map=$OUTPUT columns="x double precision,y double precision" --q 2>>~/$LOGFILE
	v.to.db map=$OUTPUT option=coor column=x,y --q 2>>~/$LOGFILE
	
else
	g.message -e message="The coordinate values are outside the spatial extent of the mapset !!"
	
	cleanup
	exit 2
fi


#cleanup procedure
cleanup

exit 0

