#!/bin/bash
############################################################################
#
# MODULE:       m.burn
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      create flowdir by burning stream method (DEM raster digged by network)
# REQUIREMENTS: m.testtype
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################



#%Module
#%  description: create flowdir by burning stream method (DEM raster digged by network)
#%END
#%option
#% key: dem
#% type: string
#% gisprompt: old,cell,raster
#% description: Input DEM raster
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,cell,raster
#% description: Output burned DEM raster
#% key_desc : name
#% required : yes
#%END
#%option
#% key: dir
#% type: string
#% gisprompt: new,cell,raster
#% description: Output flowdir raster
#% key_desc : name
#% required : yes
#%END
#%option
#% key: network
#% type: string
#% gisprompt: old,vector,vector
#% description: Input Network vector
#% key_desc : name
#% required : yes
#%END
#%option
#% key: burn
#% type: double
#% description: Value of digging for the burning stream method 
#% required : yes
#%END
#%option
#% key: res
#% type: double
#% description: raster resolution output
#% required : no
#%END


eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

MNT="$GIS_OPT_DEM"
OUTPUT="$GIS_OPT_OUTPUT"
NETWORK="$GIS_OPT_NETWORK"
BURN="$GIS_OPT_BURN"
DIR="$GIS_OPT_DIR"
RES="$GIS_OPT_RES"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi
#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

#awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   rm -f $TMP.${PROG}
   for ((u=1;u<=8;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done
  g.mremove -f vect="$NETWORK"_burntmp* --q
  g.mremove -f rast="$MNT"_burntmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

#test des dependancies
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

#test if output raster map already exists
eval `g.findfile element=cell file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi

#test if OUTPUT raster name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.6
	
if [ -s "$TMP.${PROG}.6" ];then
	g.message -w message="Illegal raster map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi



#test if DIR raster map already exists
eval `g.findfile element=cell file="$DIR" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$DIR> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$DIR>  already exists and will be overwritten"
  fi
fi

#test if DIR raster name is allowed
v.in.region output=$DIR --q   2>$TMP.${PROG}.7
grep -v "overwritten"	$TMP.${PROG}.7 > $TMP.${PROG}.8
if [ -s "$TMP.${PROG}.8" ];then
	g.message -w message="Illegal raster map name <$DIR>" 1>&2
    exit 2
else
	g.remove vect=$DIR --q  
fi

#test if input temporary vector maps exist

g.mlist type=vect pattern="$NETWORK"_burntmp*  > $TMP.${PROG}.2
if [ -s "$TMP.${PROG}.2" ];then
  g.message -w message="<$NETWORK>_burntmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi



#test if input temporary raster maps exist

g.mlist type=rast pattern="$MNT"_burntmp*  > $TMP.${PROG}
if [ -s "$TMP.${PROG}" ];then
  g.message -w message="<$MNT>_burntmp name for temporay raster files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi


#test if NETWORK vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${NETWORK} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$NETWORK> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$NETWORK > $TMP.${PROG}.1
#if NETWORK vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "line" ] ; then
	g.message -e message="<$NETWORK> doesn't exist or isn't a vector line !!"
	cleanup
	exit 2
fi

#test if input dem map exists
g.findfile element=cell mapset=${MAPSET?} file=${MNT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$MNT> doesn't exist !"
 cleanup
 exit 2
fi

#test on BURN value
if [ -z "$BURN" ];then
		g.message -e message="Value of digging for burning methode is Null !!"
		cleanup
		exit 2
	else
		if [ "`echo $BURN |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
			g.message -e message="Value of digging for burning methode isn't numeric !!"
			cleanup
			exit 2
		fi
		
		if [ "`echo $VBURN |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
			g.message -e message="Value of digging for burning methode isn't numeric !!"
			cleanup
			exit 2
		fi
	fi

#test on RES value
if [ ! -z "$RES" ];then
	if [ "`echo $RES |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
		g.message -e message="Resolution pixel value isn't numeric !!"
		cleanup
		exit 2
	fi
	if [ "`echo $RES |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
			g.message -e message="Resolution pixel value isn't numeric !!"
			cleanup
			exit 2
	fi
fi


g.region rast=$MNT --q 2>>~/$LOGFILE
if [ ! -z "$RES" ];then
	g.region res=$RES --q 2>>~/$LOGFILE
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

# loop for filling all the  sinks
r.fill.dir input=$MNT elevation="$MNT"_burntmp2 direction="$MNT"_burntmp3 areas="$MNT"_burntmp4  --q 2>/dev/null
r.stats --q  input="$MNT"_burntmp4 |tail -n 1 --q > $TMP.${PROG}.4 2>>~/$LOGFILE
g.remove rast="$MNT"_burntmp3,"$MNT"_burntmp4  --q 2>>~/$LOGFILE

sink=`cat $TMP.${PROG}.4`
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#no more 5 steps for the while command
typeset -i nbfill
nbfill=1

while [ "$sink" != "0" ];do
	r.fill.dir input="$MNT"_burntmp2 elevation="$MNT"_burntmp2b direction="$MNT"_burntmp3 areas="$MNT"_burntmp4  --q 2>/dev/null
	r.stats input="$MNT"_burntmp4 --q  |tail -n 1 --q > $TMP.${PROG}.4 2>>~/$LOGFILE
	g.remove rast="$MNT"_burntmp2,"$MNT"_burntmp3,"$MNT"_burntmp4 --q 2>>~/$LOGFILE
	g.rename rast="$MNT"_burntmp2b,"$MNT"_burntmp2 --q 2>>~/$LOGFILE
	sink=`cat $TMP.${PROG}.4`
        nbfill=$nbfill+1
        if [ "$nbfill" = "5" ];then
          break
        fi
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
done


g.copy vect=$NETWORK,"$NETWORK"_burntmp --q 2>>~/$LOGFILE
v.db.droptable -f map="$NETWORK"_burntmp --q 2>>~/$LOGFILE
v.db.addtable map="$NETWORK"_burntmp columns="burn DOUBLE PRECISION" --q 2>>~/$LOGFILE
#adding the burning value vor the line vector map
echo "UPDATE "$NETWORK"_burntmp SET burn=$BURN"|db.execute 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#rasterisation of the line vector

v.to.rast input="$NETWORK"_burntmp output="$MNT"_burntmp5 column=burn --q 2>>~/$LOGFILE
r.null map="$MNT"_burntmp5 null=0 --q 2>>~/$LOGFILE

#burning the DEM
r.mapcalc "$OUTPUT="$MNT"_burntmp2-"$MNT"_burntmp5"  2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

#flowdirection creation without network influence
r.watershed elevation=$OUTPUT drainage=$DIR   --q 2>>~/$LOGFILE
g.region rast=$MNT --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
cleanup
exit 0
