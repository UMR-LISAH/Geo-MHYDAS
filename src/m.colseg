#!/bin/bash
############################################################################
#
# MODULE:       m.colseg
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      patch desired columns from input vector to the segmented output vector (for polygon or line)
# REQUIREMENTS: m.testtype,m.splicepl, v.line.center
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#%  description: patch desired columns from input vector to the segmented output vector (for polygon or line)
#% keywords : vector, segmentation, attribute table, patch
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input vector map to patch
#% required : yes
#% key_desc : name
#%END
#%option
#% key: segmented
#% type: string
#% gisprompt: old,vector,vector
#% description: Input segmented vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output segmented vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: columns
#% type: string
#% description: Name of desired columns to patch from INPUT to OUTPUT (name separated by comma ',')
#% required : yes
#% multiple : yes
#%END
#%option
#% key: val
#% type: double
#% description: distance of maximum search (in map units)
#% required : yes
#%END


eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
SEGMENTED="$GIS_OPT_SEGMENTED"
COLUMNS="$GIS_OPT_COLUMNS"
VAL="$GIS_OPT_VAL"



if  [ -z "$GISBASE" ]
then
  echo ""
  echo "You must start GRASS to launch this program"
  echo ""
  exit 2
fi


#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
  for ((u=1;u<=13;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done
  
  g.mremove -f vect="$INPUT"_colsegtmp* --q 
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
  
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



#dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.splicepl`" ];then
  g.message -e message="m.splicepl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.line.center`" ];then
  g.message -e message="v.line.center subscript required, please install it first"
  exit 2
fi


#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi


#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.13
	
if [ -s "$TMP.${PROG}.13" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi

#test if input temporary vector map already exist
g.mlist type=vect pattern="$INPUT"_colsegtmp*  > $TMP.${PROG}.11
if [ -s "$TMP.${PROG}.11" ];then
  g.message -w message="<$INPUT>_colsegtmp name for temporay file is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi



# test if INPUT vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.1

#if input vector map is not a polygon or a line vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "polygone" ] && [ "`cat $TMP.${PROG}.1`" != "line" ]  ; then
  g.message -e message="<$INPUT> doesn't exist or isn't a vector polygon or line !!"
  cleanup
  exit 2
fi

#test if SEGMENTED vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${SEGMENTED} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$SEGMENTED> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$SEGMENTED > $TMP.${PROG}.2
#if SEGMENTED vector map is not a polygon or line vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "polygone" ] && [ "`cat $TMP.${PROG}.2`" != "line" ] ; then
  g.message -e message="<$SEGMENTED> doesn't exist or isn't a vector polygon or line !!"
  cleanup
  exit 2
fi

#verification of the presence of the two layers for SEGMENTED (if SEGMENTED is a polygon vector) 
if [ "`cat $TMP.${PROG}.2`" = "polygone" ]; then
	#layer 1 for the centroids and layer 2 for the boundaries
	v.db.connect -g map=$SEGMENTED |wc -l |cut -d" " -f1 > $TMP.${PROG}.3
	if [ "`cat $TMP.${PROG}.3`" != "2" ];then
	  g.message -e message="<$SEGMENTED> vector map has not two layers !"
	  g.messsage -e message="You must use the m.seg script before using this script!"
	  cleanup
	  exit 2
	fi
fi
#test for COLUMNS value

#if INPUT is a polygon layer, SEGMENTED must be a polygon layer
#if INPUT is a line layer, SEGMENTED must be a line layer
if [ "`cat $TMP.${PROG}.2`" != "`cat $TMP.${PROG}.2`" ];then
	g.message -e message="<$SEGMENTED> and <$INPUT> can't be different feature types  !!"
	g.message -e message="<$SEGMENTED> is `cat $TMP.${PROG}.2` and <$INPUT> is `cat $TMP.${PROG}.1` !!"
  cleanup
  exit 2
fi

echo "$COLUMNS" |awk -F"," '{OFS="\n"; ORS="\n"; $1 = $1; print $0}' > $TMP.${PROG}.4
v.info --q -c map=$INPUT |cut -d"|" -f2  >$TMP.${PROG}.5

for u in `cat $TMP.${PROG}.4`;do
  grep "^$u$" $TMP.${PROG}.5 > $TMP.${PROG}.6

  if [ ! -s "$TMP.${PROG}.6" ]; then
    g.message -e message=" The column <$u> in the vector layer <$INPUT> doesn't exist !!"
    cleanup
    exit 2
  fi
  rm -f $TMP.${PROG}.6 

done

# test VAL value
if [ "`echo $VAL |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
  g.message -e message="<VAL> value isn't numeric"
  cleanup
  exit 2
fi
if [ "`echo $VAL |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="<VAL> value isn't numeric"
	cleanup
	exit 2
fi

#### securities ending

g.copy vect=$SEGMENTED,$OUTPUT --q 2>/dev/null
rm -f $TMP.${PROG}.5
v.info --q -c map=$INPUT >$TMP.${PROG}.5 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi


if [ "`cat $TMP.${PROG}.2`" = "polygone" ];then
	#if SEGMENTED is a polygon layer
	for i in `cat $TMP.${PROG}.4`;do
		grep "$i$" $TMP.${PROG}.5 |cut -d"|" -f1> $TMP.${PROG}.7 2>>~/$LOGFILE
		if [ "`cat $TMP.${PROG}.7`" = "CHARACTER" ];then
			db.describe table=$INPUT --q > $TMP.${PROG}.8
			grep -n "$i$" $TMP.${PROG}.8 |cut -d":" -f1 > $TMP.${PROG}.9 2>>~/$LOGFILE
			typeset -i nbline
			nbline=`cat $TMP.${PROG}.9`+3
			m.splicepl $nbline $TMP.${PROG}.8 |cut -d":" -f2 > $TMP.${PROG}.10 2>>~/$LOGFILE
			v.db.addcol map=$OUTPUT layer=1 columns="$i VARCHAR(`cat $TMP.${PROG}.10`)" --q  2>>~/$LOGFILE
		else
			v.db.addcol map=$OUTPUT layer=1 columns="$i `cat $TMP.${PROG}.7`"  --q 2>>~/$LOGFILE
		fi
		#v.distance calculation between OUTPUT centroids and INPUT area
		v.distance from=$OUTPUT to=$INPUT from_type=centroid to_type=area from_layer=1 to_layer=1 dmax=$VAL upload=to_attr column=$i to_column=$i  --q 2>>~/$LOGFILE
		rm -f $TMP.${PROG}.7 $TMP.${PROG}.8 $TMP.${PROG}.9 $TMP.${PROG}.10
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
	done
else
	#if SEGMENTED is a line layer
	v.line.center input=$OUTPUT output="$INPUT"_colsegtmp1 layer=1 2>/dev/null
	v.db.addtable map="$INPUT"_colsegtmp1 columns="rscat INTEGER" --q  2>>~/$LOGFILE
	v.distance from="$INPUT"_colsegtmp1 from_type=point to=$INPUT to_type=line to_layer=1 upload=cat column=rscat dmax=$VAL --q  2>/dev/null
	v.db.select -c map="$INPUT"_colsegtmp1 column=cat,rscat fs="|" nv=0 where="rscat <>0" > $TMP.${PROG}.12 --q  2>>~/$LOGFILE
		
	for i in `cat $TMP.${PROG}.4`;do
		grep "$i$" $TMP.${PROG}.5 |cut -d"|" -f1> $TMP.${PROG}.7 2>>~/$LOGFILE
		if [ "`cat $TMP.${PROG}.7`" = "CHARACTER" ];then
			db.describe table=$INPUT --q > $TMP.${PROG}.8
			grep -n "$i$" $TMP.${PROG}.8 |cut -d":" -f1 > $TMP.${PROG}.9 2>>~/$LOGFILE
			typeset -i nbline
			nbline=`cat $TMP.${PROG}.9`+3
			m.splicepl $nbline $TMP.${PROG}.8 |cut -d":" -f2 > $TMP.${PROG}.10 2>>~/$LOGFILE
			v.db.addcol map=$OUTPUT layer=1 columns="$i VARCHAR(`cat $TMP.${PROG}.10`)" --q  2>>~/$LOGFILE
		else
			v.db.addcol map=$OUTPUT layer=1 columns="$i `cat $TMP.${PROG}.7`"  --q 2>>~/$LOGFILE
		fi
		for j in `cat $TMP.${PROG}.12`;do
		echo "$j"|cut -d"|" -f2 > $TMP.${PROG}.13 2>>~/$LOGFILE
		v.db.select -c map=$INPUT column=$i where="cat=`cat $TMP.${PROG}.13`" nv=0 --q > $TMP.${PROG}.14 2>>~/$LOGFILE
		echo "$j"|cut -d"|" -f1 > $TMP.${PROG}.15 2>>~/$LOGFILE
		v.db.update map=$OUTPUT colum=$i value=`cat $TMP.${PROG}.14` where="cat=`cat $TMP.${PROG}.15`" --q 2>>~/$LOGFILE
		rm -f $TMP.${PROG}.15 $TMP.${PROG}.14 $TMP.${PROG}.13
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
		done
		
		rm -f $TMP.${PROG}.7 $TMP.${PROG}.8 $TMP.${PROG}.9 $TMP.${PROG}.10 
		
	done
	rm -f $TMP.${PROG}.12
fi
	
#cleanup procedure
cleanup
exit 0
