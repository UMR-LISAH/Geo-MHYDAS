#!/bin/bash
############################################################################
#
# MODULE:       m.dispolyg
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      dissolving small areal entities for vector polygon
# REQUIREMENTS: m.testtype, m.pourcenpl, m.tripl, m.testtype2
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#
#############################################################################



#%Module
#%  description: dissolving small areal entities
#%  keywords : vector, dissolve, areal
#%END
#%flag
#% key: i
#% description: print only statistics (no calcul) and exit
#%end
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: area
#% type: double
#% description: minimum area value
#% required : yes
#%END
#%option
#% key: unit 
#% type: string
#% description: units (meters (me), kilometers (k), acres(a), hectares(h))
#% options : me,k,a,h
#% answer : me
#% required : no
#%END
#%option
#% key: columnp
#% type: string
#% description: Name of column used to treat particular entities (column must exist)
#% required : no
#%END
#%option
#% key: valuep
#% type: string
#% description: value used in 'columnp' to identify the particular entities
#% required : no
#%END

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
AREA="$GIS_OPT_AREA"
UNIT="$GIS_OPT_UNIT"
COLUMNP="$GIS_OPT_COLUMNP"
VALUEP="$GIS_OPT_VALUEP"

## begin step1 : dependancies tests ##

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
if  [ -z "$GISBASE" ]
then
  echo ""
  echo "You must start GRASS to launch this program"
  echo ""
  exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

#awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
    rm -f $TMP.${PROG}
    rm -f $TMP.${PROG}.0
   for ((u=1;u<=53;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_distmp* --q
  
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



#dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.testtype2`" ];then
  g.message -e message="m.testtype2 subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.pourcenpl`" ];then
  g.message -e message="m.pourcenpl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.tripl`" ];then
  g.message -e message="m.tripl subscript required, please install it first"
  exit 2
fi

## end step1 : dependancies tests ##

## begin step2 : parameters tests ##


#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi


#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.53
	
if [ -s "$TMP.${PROG}.53" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi

#test if input temporary vector maps already exist
g.mlist type=vect pattern="$INPUT"_distmp*  > $TMP.${PROG}
if [ -s "$TMP.${PROG}" ];then
  g.message -w message="<$INPUT>_distmp name for temporay file is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

#test if input vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -w  message="<$INPUT> not found"
  cleanup
   exit 2
fi


m.testtype input=$INPUT > $TMP.${PROG}.1

#if input vector map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "polygone" ] ; then
  g.message -e message="<$INPUT> isn't a vector polygon"
  cleanup
  exit 2
fi

#test on AREA value
if [ "`echo $AREA |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
  g.message -e message="<AREA> value isn't numeric"
  cleanup
  exit 2
fi

if [ "`echo $AREA |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="<AREA> value isn't numeric !!"
	cleanup
	exit 2
fi



#test on UNIT value
if [ -z "$UNIT" ];then
  UNIT=me
fi


#test on COLUMNP and VALUEP values
if [ -n "$COLUMNP" ];then
  
  db.columns table="$INPUT" |grep "^$COLUMNP$" > $TMP.${PROG}.2
  
  if [ ! -s "$TMP.${PROG}.2" ]; then
    g.message -w message="Column <$COLUMNP> not found"
    cleanup
    exit 2
  fi

  if [ ! -n "$VALUEP" ];then
    g.message -w message="<$VALUEP> not found"
    cleanup
    exit 2
  fi
  #test if VALUEP value is valid
  if [ "`echo $VALUEP |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
    v.db.select -c map=$INPUT column=$COLUMNP where="$COLUMNP = '$VALUEP'" > $TMP.${PROG}.0
  else
    v.db.select -c map=$INPUT column=$COLUMNP where="$COLUMNP = $VALUEP" > $TMP.${PROG}.0
  fi
  if [ ! -s "$TMP.${PROG}.0" ];then
    g.message -w message="<$VALUEP> not found"
    cleanup
    exit 2
  fi
fi

## end step2 : parameters tests ##


g.copy vect=$INPUT,"$INPUT"_distmp --q 2>>~/$LOGFILE
#adding a column for the features to protect
#example : area with area inferior to the threshold but we want to protect it

## begin step3 : column ELIMNO creation ##

################## creation of the column ELIMNO ***************
#adding the column $ELIMNO


db.columns table="$INPUT"_distmp> $TMP.${PROG}.3 2>>~/$LOGFILE
grep "^elimno$" $TMP.${PROG}.3 > $TMP.${PROG}.4 2>>~/$LOGFILE

typeset -i NBELIMNO
NBELIMNO=1
while [ -s "$TMP.${PROG}.4" ] ; do
  grep "^elimno"$NBELIMNO"$" $TMP.${PROG}.3 > $TMP.${PROG}.4 2>>~/$LOGFILE
  NBELIMNO=$NBELIMNO+1
  
done
ELIMNO=elimno"$NBELIMNO"
v.db.addcol map="$INPUT"_distmp columns="$ELIMNO INTEGER" --q 2>>~/$LOGFILE

#updating the column ELIMNO at 0 for all the polygons
#if ELIMNO = 1 , polygon need to be protected
v.db.update map="$INPUT"_distmp layer=1 column=$ELIMNO value=0 --q 2>>~/$LOGFILE


if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

## end step3 : column ELIMNO creation ##

## begin step4 : area calculation ##


# adding the column COLUMN : suppress and re-create
COLERASE=`v.info -c map="$INPUT"_distmp |cut -d"|" -f2|grep "^[Aa][Rr][Ee][Aa]$"`
COLUMN=AREA

v.db.dropcol map="$INPUT"_distmp column=$COLERASE --q 2>/dev/null
v.db.addcol map="$INPUT"_distmp columns="$COLUMN DOUBLE PRECISION" --q 2>>~/$LOGFILE

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

#area calculation
v.to.db map="$INPUT"_distmp option=area units=$UNIT column=$COLUMN --q 2>>~/$LOGFILE

## end step4 : area calculation ##



#reseach of null area
v.db.select -c map="$INPUT"_distmp layer=1 column=cat where="$COLUMN =0 "   > $TMP.${PROG}.5 2>>~/$LOGFILE
if [ -s "$TMP.${PROG}.5" ];then
  g.message -w message="Some areas have null value" 
  g.message message="Please check the following cat polygons:" 
  g.message message="`cat $TMP.${PROG}.5`"
  cleanup
  exit 2
fi



if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi




#research of polygons with area inferior at the threshold
v.db.select -c map="$INPUT"_distmp layer=1 column=$COLUMN where="$COLUMN < $AREA AND $ELIMNO = 0" --q > $TMP.${PROG}.6 2>>~/$LOGFILE
if [ ! -s "$TMP.${PROG}.6" ];then
  g.message -e message="There are no polygons which area is inferior to $AREA "$UNIT"2 in the vector $INPUT"
  cleanup
  exit 2
fi

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi




## begin step5 : flag I ##

#if flag I, informations for the user
if [ $GIS_FLAG_I -eq 1 ];then
  centroids2=`wc -l $TMP.${PROG}.6|cut -d" " -f1`
  centroids10=`m.testtype2 input="$INPUT"_distmp`
  
 # indications for the user about his choice
    # feature numbers and percentage value
  
  v.db.select -c map="$INPUT"_distmp layer=1 column=$COLUMN  --q > $TMP.${PROG}.7 2>>~/$LOGFILE
  echo ""
  echo "You choose a minimum area of $AREA "$UNIT"2"
  echo " For the vector $INPUT, "
  echo " the dissolving small area entities operation will work"
  echo " on $centroids2 polygons for $centroids10 total polygons"
  
  # call Pourcen.pl script for percentage calculation 
  m.pourcenpl --input1=$TMP.${PROG}.7 --input2=$TMP.${PROG}.6 2>>~/$LOGFILE
  echo " of the total surface"
  cleanup
  exit 0
fi

## end step5 : flag I ##


if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

## begin step6 : list of polygons with area < threshold ##

#creation of the list of polygons with area < threshold
v.category input="$INPUT"_distmp output="$INPUT"_distmp2 type=boundary option=add layer=2 --q 2>>~/$LOGFILE
#area calculation
v.to.db map="$INPUT"_distmp2 type=centroid option=cat	--q 2>/dev/null
v.to.db map="$INPUT"_distmp2 option=area units=$UNIT column=$COLUMN --q 2>>~/$LOGFILE
#selection in INPUT_tmp of polygons with area < threshold and $ELIMNO = 0

## end step6 : list of polygons with area < threshold ##


v.db.select -c map="$INPUT"_distmp2 column=cat,$COLUMN nv=0 fs=" " where="$COLUMN < $AREA AND $ELIMNO = 0" --q  > $TMP.${PROG}.8 2>>~/$LOGFILE

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
############ begin of the iterative process
##### while command if "$INPUT"_distmp2 still contains features to merge

typeset -i wnb
wnb=1
  
while [ -s "$TMP.${PROG}.8" ] ; do
  echo " " 
  echo " *** Step $wnb *** "
  echo " " 
	
	## begin step7 : topology and lenght boundaries calculation ##	
	
	# neighbouring relation and length boundaries calculations 
  
  # $TMP.${PROG}.9 contains  neighbouring relations between polygons
  
  v.to.db -p map="$INPUT"_distmp2 option=sides column=left,right layer=2 --q > $TMP.${PROG}.9 2>>~/$LOGFILE
  # $TMP.${PROG}.10 contains  length of the boundaries
  
  
  v.to.db -p map="$INPUT"_distmp2 option=length column=boundL  layer=2 --q > $TMP.${PROG}.10 2>>~/$LOGFILE
  
  ## end step7 : topology and lenght boundaries calculation ##	

  ## begin step8 : sort polygons by area values; calling m.tripl ##	
  #sort polygons by area values
  
  m.tripl --input=$TMP.${PROG}.8 --output=$TMP.${PROG}.11 --col=1 2>>~/$LOGFILE
    
   ## end step8 : sort polygons by area values; calling m.tripl ##	
   
   ## begin step9 : choice of the polygon with the smallest area ##	
    
  #choice of the polygon with the smallest area, category in FirstCat 
  FirstCat=`head -n1 $TMP.${PROG}.11 |cut -d" " -f1 `
  
  ## end step9 : choice of the polygon with the smallest area ##	

  ## begin step10 : choice of the polygon neighbours ##	
  #research of the neighbours of FirstCat
  
  grep "|$FirstCat|" $TMP.${PROG}.9 > $TMP.${PROG}.12 2>>~/$LOGFILE
  grep "|$FirstCat$" $TMP.${PROG}.9 >> $TMP.${PROG}.12 2>>~/$LOGFILE
  
  grep -v "\-1" $TMP.${PROG}.12 > $TMP.${PROG}.13 2>>~/$LOGFILE
  
  ## end step10 : choice of the polygon neighbours ##	
    
  # $TMP.${PROG}.13 contains cat boundary|cat polygon|cat polygon
  if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
  fi
  
  if [ ! -s "$TMP.${PROG}.13" ];then
  ## begin step11 : updating elimno ##
	#if $TMP.${PROG}.13 is empty , FirstCat has no neighbour, we put ELIMNO = 1
    v.category input="$INPUT"_distmp2 output="$INPUT"_distmp3 type=boundary option=del layer=2 --q 2>>~/$LOGFILE
    v.db.update map="$INPUT"_distmp3 column=$ELIMNO value=1 where="cat=$FirstCat" --q 2>>~/$LOGFILE
    g.remove vect="$INPUT"_distmp2 --q 2>>~/$LOGFILE
  ## end step11 : updating elimno ##  
  else
    # if $TMP.${PROG}.13 is not empty, two possibilities :
    # one line in $TMP.${PROG}.13: one neighbour with one boundary, simple case
    #several lines in $TMP.${PROG}.13 ; several neighbours with several boundaries, complex case
    if [ "`wc -l $TMP.${PROG}.13 |cut -d" " -f1`" = "1" ];then
      
      cut -d"|" -f2,3 $TMP.${PROG}.13 |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}'|grep -v "^$FirstCat$" > $TMP.${PROG}.14 2>>~/$LOGFILE
      #$TMP.${PROG}.14 will contain the list of the potential neighbours (and perhaps non uniq) of FirstCat
      
	  #simple case : one neighbour with one boundary	
      
      if [ -n "$COLUMNP" ];then
		#if columnp and valuep are not empty, sort of the neighbours
		# a polygon with valuep = 0 can only merge to an other polygon with valuep = 0
		# a polygon with valuep != 0 can only merge to an other polygon with valuep != 0
		# we look if the neighbour has the same valuep
		
		## begin step12 : choosen neighbour with same value ##       
        v.db.select -c map="$INPUT"_distmp2 column=$COLUMNP nv="" where="cat = $FirstCat " --q > $TMP.${PROG}.15 2>>~/$LOGFILE
        
        for f in `cat $TMP.${PROG}.14`;do
          v.db.select -c map="$INPUT"_distmp2 column=cat,$COLUMNP nv="" fs="|" where="cat = $f" --q >> $TMP.${PROG}.16 2>>~/$LOGFILE
        done
        
        echo "\"$VALUEP\""> $TMP.${PROG}.17 2>>~/$LOGFILE
        
        if [ "`cat $TMP.${PROG}.15`" != "$VALUEP" ];then
			#if $TMP.${PROG}.15 is != of valuep, we only keep neighbour with valuep != 0
          
           awk -F"|" < $TMP.${PROG}.16 '$2!='`cat $TMP.${PROG}.17`''  |cut -d"|" -f1 > $TMP.${PROG}.18 2>>~/$LOGFILE
       
        else
          #if $TMP.${PROG}.15 is = of valuep, we only keep neighbour with valuep = 0
          awk -F"|" < $TMP.${PROG}.16 '$2=='`cat $TMP.${PROG}.17`''  |cut -d"|" -f1 > $TMP.${PROG}.18 2>>~/$LOGFILE

        fi
        ## end step12 : choosen neighbour with same value ##
       
		# $TMP.${PROG}.18 contains the categories of the neighbour polygons we must keep
		# we modify $TMP.${PROG}.13 in this case
       
        if [ -s "$TMP.${PROG}.18" ] ;then
			# research of the neighbour and the boundary we must to suppress
          # the category of the neighbour is in $TMP.${PROG}.19
          
          ## begin step13 : store the id of the boundary to suppress ##
          mv $TMP.${PROG}.18 $TMP.${PROG}.19 
          # and the boundary to remove is in $TMP.${PROG}.20
          
          cut -d"|" -f1 $TMP.${PROG}.13 > $TMP.${PROG}.20 2>>~/$LOGFILE
          ## end step13 : store the id of the boundary to suppress ##
          
        else
			#if $TMP.${PROG}.18 is empty no possible neighbour
          ## begin step11 : updating elimno ##
          v.category input="$INPUT"_distmp2 output="$INPUT"_distmp3 type=boundary option=del layer=2 --q 2>>~/$LOGFILE
          v.db.update map="$INPUT"_distmp3 column=$ELIMNO value=1 where="cat=$FirstCat" --q 2>>~/$LOGFILE
          g.remove vect="$INPUT"_distmp2 --q 2>>~/$LOGFILE
          ## end step11 : updating elimno ##
        fi
        
      else
       # research of the neighbour and the boundary we must to suppress
          # the category of the neighbour is in $TMP.${PROG}.19
        ## begin step13 : store the id of the boundary to suppress ##
        awk -F"|" <$TMP.${PROG}.14 '$1!='$FirstCat''  > $TMP.${PROG}.19 2>>~/$LOGFILE

         # and the boundary to remove is in $TMP.${PROG}.20
        
        cut -d"|" -f1 $TMP.${PROG}.13 > $TMP.${PROG}.20 2>>~/$LOGFILE
        ## end step13 : store the id of the boundary to suppress ##
      fi
	 if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
    else
      #complex case : several boundaries
      # research of the neighbours which have several boundaries in contact with FirstCat
      
      
      cut -d"|" -f2,3 $TMP.${PROG}.13 |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.14 2>>~/$LOGFILE
      
      sort -k1g $TMP.${PROG}.14 |grep -v "^$FirstCat$" | uniq -d  > $TMP.${PROG}.22 2>>~/$LOGFILE
      
      
	  if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
      fi
      
      
      if [ -s "$TMP.${PROG}.22" ];then
      # if $TMP.${PROG}.22 is not empty it means that several polygons are in contact with 1+ boundaries with FirstCat
      # for each line of $TMP.${PROG}.22 (for each neighbour), we keep only the longest boundary
      #and we modify $TMP.${PROG}.13 in this case
        
		## begin step15 : search the longest boundary ##
        for a in `cat $TMP.${PROG}.22`;do
          
          awk -F"|" <$TMP.${PROG}.13 '$2=='$a''  |cut -d"|" -f1 > $TMP.${PROG}.F23 2>>~/$LOGFILE

          awk -F"|" <$TMP.${PROG}.13 '$3=='$a''  |cut -d"|" -f1 >> $TMP.${PROG}.F23 2>>~/$LOGFILE
			#searching length boundries with $TMP.${PROG}.10
          
          
          for b in `cat $TMP.${PROG}.F23`;do
            awk -F"|" <$TMP.${PROG}.10 '$1=='$b'' >> $TMP.${PROG}.F24 2>>~/$LOGFILE

          done
          
          # we take the longest boundary
          echo "`cat $TMP.${PROG}.F24`" |awk -F"|" '{OFS=" "; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.F25 2>>~/$LOGFILE
          
          m.tripl --input=$TMP.${PROG}.F25 --output=$TMP.${PROG}.F26 --col=1 2>>~/$LOGFILE
          
          tail -n 1 $TMP.${PROG}.F26 |cut -d" " -f1 > $TMP.${PROG}.F27 2>>~/$LOGFILE
          
          #we modify the lines  of $TMP.${PROG}.13 concerning the neighbour $a
          awk -F"|" <$TMP.${PROG}.13 '$2!='$a''   > $TMP.${PROG}.F28 2>>~/$LOGFILE
          
          awk -F"|" <$TMP.${PROG}.F28 '$3!='$a''   >> $TMP.${PROG}.F29 2>>~/$LOGFILE

          echo "`cat $TMP.${PROG}.F27`|$a|$FirstCat" >> $TMP.${PROG}.F29 2>>~/$LOGFILE
          mv $TMP.${PROG}.F29  $TMP.${PROG}.13
          rm -f $TMP.${PROG}.F23
          rm -f $TMP.${PROG}.F24
          rm -f  $TMP.${PROG}.F25
          rm -f  $TMP.${PROG}.F26
          rm -f  $TMP.${PROG}.F27
          rm -f  $TMP.${PROG}.F28
          rm -f  $TMP.${PROG}.F29
		  if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		  fi
        done
        ## end step15 : search the longest boundary ##
      fi
      
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
	
      
		#$TMP.${PROG}.13 contains the list of the uniq neighbours
      if [ -n "$COLUMNP" ];then
		# we keep only the neighbours with the same valuep value
		# if columnp and valupe are not empty, sort of the neighbours :
		# - a polygon with valuep != 0 can only merge to an other polygon with value != 0
		# - a polygon with valuep = 0 can only merge to an other polygon with value = 0
        
        ## begin step12 : choosen neighbour with same value ##              
        v.db.select -c map="$INPUT"_distmp2 column=$COLUMNP nv="" where="cat = $FirstCat " --q > $TMP.${PROG}.15 2>>~/$LOGFILE
        
        cut -d"|" -f2,3 $TMP.${PROG}.13 |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.14 2>>~/$LOGFILE
        
        awk -F"|" <$TMP.${PROG}.14 '$1!='$FirstCat''  > $TMP.${PROG}.16 2>>~/$LOGFILE
  
        for f in `cat $TMP.${PROG}.16`;do
          v.db.select -c map="$INPUT"_distmp2 column=cat,$COLUMNP nv="" fs="|" where="cat = $f" --q >> $TMP.${PROG}.30 2>>~/$LOGFILE
        done
        
        echo "\"$VALUEP\""> $TMP.${PROG}.17  2>>~/$LOGFILE
        
        if [ "`cat $TMP.${PROG}.15`" != "$VALUEP" ];then
          
          # if $TMP.${PROG}.15 is != valuep, we keep only the neighbours with valuep != 0
           awk -F"|" < $TMP.${PROG}.30 '$2!='`cat $TMP.${PROG}.17`''  |cut -d"|" -f1 > $TMP.${PROG}.31 2>>~/$LOGFILE

        else
          # if $TMP.${PROG}.15 is = valuep, we keep only the neighbours with valuep = 0
          awk -F"|" <$TMP.${PROG}.30 '$2=='`cat $TMP.${PROG}.17`''  |cut -d"|" -f1 > $TMP.${PROG}.31 2>>~/$LOGFILE

        fi
        ## end step12 : choosen neighbour with same value ##      
        
        if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
		
		# $TMP.${PROG}.31 contains the cat of the neighbours which mus be kept, several possibilities :
		# - $TMP.${PROG}.31 is empty: no neighbour
		# - $TMP.${PROG}.31 has one line : one neighbour
		# - $TMP.${PROG}.31 has several lines : several neighbours
		# in the last case, we choose the longest boundary
		# and we modify $TMP.${PROG}.19 in this case
		        
        if [ -s "$TMP.${PROG}.31" ] ;then
          
          for h in `cat $TMP.${PROG}.31`;do
            awk -F"|" <$TMP.${PROG}.13 '$2=='$h''   >> $TMP.${PROG}.32 2>>~/$LOGFILE
            awk -F"|" <$TMP.${PROG}.13 '$3=='$h''   >> $TMP.${PROG}.32 2>>~/$LOGFILE

          done
          rm -f $TMP.${PROG}.13
          mv $TMP.${PROG}.32 $TMP.${PROG}.13
          #two possible choices : $TMP.${PROG}.13 has one line, one neighbour; or 1+ line, 1+ neighbours
          
          if [ "`wc -l $TMP.${PROG}.13 |cut -d" " -f1`" = "1" ];then
			#	 and the neighbour is in  $TMP.${PROG}.19
            
            ## begin step13 : store the id of the boundary to suppress ##
            cp  $TMP.${PROG}.31 $TMP.${PROG}.19 2>>~/$LOGFILE
            #and the boundary to remove is in $TMP.${PROG}.20
            
            
            cut -d"|" -f1 $TMP.${PROG}.13 > $TMP.${PROG}.20 2>>~/$LOGFILE
            ## end step13 : store the id of the boundary to suppress ##
          else
			# choice of the neighbour which has the longest boundary
            
            ## begin step15 : search the longest boundary ##
            cut -d'|' -f1 $TMP.${PROG}.13 > $TMP.${PROG}.33 2>>~/$LOGFILE
            
            for l in `cat $TMP.${PROG}.33`;do
              awk -F"|" <$TMP.${PROG}.10 '$1=='$l'' >> $TMP.${PROG}.34 2>>~/$LOGFILE
            done
  
            echo "`cat $TMP.${PROG}.34`" |awk -F"|" '{OFS=" "; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.35 2>>~/$LOGFILE
            
            m.tripl --input=$TMP.${PROG}.35 --output=$TMP.${PROG}.36 --col=1 2>>~/$LOGFILE
            ## end step15 : search the longest boundary ##
            
            ## begin step13 : store the id of the boundary to suppress ##
            #and the boundary to remove is in $TMP.${PROG}.20
            tail -n 1 $TMP.${PROG}.36 |cut -d" " -f1  > $TMP.${PROG}.20 2>>~/$LOGFILE
            #	 and the neighbour is in  $TMP.${PROG}.19
            
            bound16=`cat $TMP.${PROG}.20`
            
            awk -F"|" <$TMP.${PROG}.13 '$1=='$bound16'' |cut -d"|" -f2,3 > $TMP.${PROG}.37 2>>~/$LOGFILE
  
            echo "`cat $TMP.${PROG}.37`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.38 2>>~/$LOGFILE

            awk -F"|" <$TMP.${PROG}.38 '$1!='$FirstCat'' > $TMP.${PROG}.19 2>>~/$LOGFILE
            ## end step13 : store the id of the boundary to suppress ##
          fi
        else
			#no possible neighbour, we put ELIMNO = 1
          ## begin step11 : updating elimno ##
          v.category input="$INPUT"_distmp2 output="$INPUT"_distmp3 type=boundary option=del layer=2 --q 2>>~/$LOGFILE
          v.db.update map="$INPUT"_distmp3 column=$ELIMNO value=1 where="cat=$FirstCat" --q 2>>~/$LOGFILE
          g.remove vect="$INPUT"_distmp2 --q 2>>~/$LOGFILE
          ## end step11 : updating elimno ##
        fi
        
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
      else
       # choice of the neighbour which has the longest boundary
       ## begin step15 : search the longest boundary ##
        cut -d'|' -f1 $TMP.${PROG}.13 > $TMP.${PROG}.33 2>>~/$LOGFILE
        
        for n in `cat $TMP.${PROG}.33`;do
          awk -F"|" <$TMP.${PROG}.10 '$1=='$n'' >> $TMP.${PROG}.34 2>>~/$LOGFILE
        done
  
        echo "`cat $TMP.${PROG}.34`" |awk -F"|" '{OFS=" "; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.35 2>>~/$LOGFILE
        
        m.tripl --input=$TMP.${PROG}.35 --output=$TMP.${PROG}.36 --col=1 2>>~/$LOGFILE
        ## end step15 : search the longest boundary ##
        #and the boundary to remove is in $TMP.${PROG}.20
         ## begin step13 : store the id of the boundary to suppress ##
        tail -n 1 $TMP.${PROG}.36 |cut -d" " -f1  > $TMP.${PROG}.20 2>>~/$LOGFILE
        #	 and the neighbour is in  $TMP.${PROG}.19
        bound17=`cat $TMP.${PROG}.20`
        
        awk -F"|" <$TMP.${PROG}.13 '$1=='$bound17'' |cut -d"|" -f2,3 > $TMP.${PROG}.37 2>>~/$LOGFILE
    
        echo "`cat $TMP.${PROG}.37`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.38 2>>~/$LOGFILE
        
        awk -F"|" <$TMP.${PROG}.38 '$1!='$FirstCat'' > $TMP.${PROG}.19 2>>~/$LOGFILE
       ## end step13 : store the id of the boundary to suppress ##
        
      fi
    fi
    # number of boundaries which are in $TMP.${PROG}.20
    
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
    
    #if $TMP.${PROG}.19 is not empty, we verify if there are 1+ boundaries in common between FirstCat and $TMP.${PROG}.19; in this case , we add the cat(s) of the boundary (ies) in $TMP.${PROG}.20
    
    if [ -s "$TMP.${PROG}.19" ];then
      
      grep "|$FirstCat|" $TMP.${PROG}.9 > $TMP.${PROG}.40 2>>~/$LOGFILE
      grep "|$FirstCat$" $TMP.${PROG}.9  >> $TMP.${PROG}.40 2>>~/$LOGFILE
      
      grep -v "\-1" $TMP.${PROG}.40 > $TMP.${PROG}.41 2>>~/$LOGFILE
      cat18=`cat $TMP.${PROG}.19`
      
      awk -F"|" <$TMP.${PROG}.41 '$2=='$cat18'' |cut -d"|" -f1 >> $TMP.${PROG}.42 2>>~/$LOGFILE
      awk -F"|" <$TMP.${PROG}.41 '$3=='$cat18'' |cut -d"|" -f1 >> $TMP.${PROG}.42 2>>~/$LOGFILE
      echo "`cat $TMP.${PROG}.42`" |awk -F"|" '{OFS=","; ORS=","; $1 = $1; print $0}'> $TMP.${PROG}.20 2>>~/$LOGFILE
  
        
      # $TMP.${PROG}.20 contains the cat of the boundary
      #################  v.extract #################
      ## begin step14 : extract command
      v.extract -r input="$INPUT"_distmp2 output="$INPUT"_distmp4 type=boundary list=`cat $TMP.${PROG}.20` layer=2 --q 2>>~/$LOGFILE
      v.type input="$INPUT"_distmp4 output="$INPUT"_distmp5 type=boundary,line --q 2>>~/$LOGFILE
      v.build.polylines input="$INPUT"_distmp5 output="$INPUT"_distmp6 cats=first --q 2>>~/$LOGFILE
      v.type input="$INPUT"_distmp6 output="$INPUT"_distmp7 type=line,boundary --q 2>>~/$LOGFILE
      v.category input="$INPUT"_distmp7 output="$INPUT"_distmp8 type=boundary option=add layer=2 --q 2>>~/$LOGFILE
      v.centroids input="$INPUT"_distmp8 output="$INPUT"_distmp9 --q 2>>~/$LOGFILE
      ## end step14 : extract command
      
      #################  v.reclass #################
      ## begin step16 : reclass command
      v.db.addtable map="$INPUT"_distmp9 columns="b_cat INTEGER" layer=1 --q 2>>~/$LOGFILE
      v.distance from="$INPUT"_distmp9 from_type=centroid from_layer=1 to="$INPUT"_distmp2 to_type=area to_layer=1 upload=cat column=b_cat --q 2>>~/$LOGFILE
      v.reclass input="$INPUT"_distmp9 output="$INPUT"_distmp10 column=b_cat --q 2>>~/$LOGFILE

      
      v.category input="$INPUT"_distmp10 option=print type=centroid --q > $TMP.${PROG}.50 2>>~/$LOGFILE
      
      awk -F"|" <$TMP.${PROG}.50 '$1=='`cat $TMP.${PROG}.19`'' > $TMP.${PROG}.51 2>>~/$LOGFILE

      if [ -s "$TMP.${PROG}.51" ];then
        db.copy from_table="$INPUT"_distmp2 to_table="$INPUT"_distmp10 where="cat<>$FirstCat" --q 2>>~/$LOGFILE
      else
        db.copy from_table="$INPUT"_distmp2 to_table="$INPUT"_distmp10 where="cat<>`cat $TMP.${PROG}.19`" --q 2>>~/$LOGFILE
      fi
      v.db.connect map="$INPUT"_distmp10 table="$INPUT"_distmp10 layer=1 --q 2>>~/$LOGFILE 
      g.remove vect="$INPUT"_distmp2,"$INPUT"_distmp4,"$INPUT"_distmp9 --q 2>>~/$LOGFILE
      g.remove vect="$INPUT"_distmp5,"$INPUT"_distmp6,"$INPUT"_distmp7,"$INPUT"_distmp8  --q 2>>~/$LOGFILE
      v.category input="$INPUT"_distmp10 output="$INPUT"_distmp3 type=boundary layer=2 option=add --q 2>>~/$LOGFILE
      g.remove vect="$INPUT"_distmp10 --q
      
      ## end step16 : reclass command
	  if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	 fi
    fi
  fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
	## begin step17 : boundary calculation, area calculation, list of polygon ##
	# boundaries topology calculation, area calculation and creation of the list of polygons which area < threshold
  
  v.category input="$INPUT"_distmp3 output="$INPUT"_distmp11 type=boundary option=del layer=2 --q 2>>~/$LOGFILE
  g.remove vect="$INPUT"_distmp3 --q 2>>~/$LOGFILE
   
  v.category input="$INPUT"_distmp11 output="$INPUT"_distmp2 type=boundary option=add layer=2 --q 2>>~/$LOGFILE
  g.remove vect="$INPUT"_distmp11 --q 2>>~/$LOGFILE
  # area calculation
  v.to.db map="$INPUT"_distmp2 type=centroid option=cat --q	2>/dev/null
  
  v.to.db map="$INPUT"_distmp2 option=area units=$UNIT column=$COLUMN --q 2>>~/$LOGFILE
  for ((v=8;v<=51;v+=1))
  do
    rm -f $TMP.${PROG}.$v
  done
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
  # $TMP.${PROG}.9 contains the topology relations between polygons
  
  v.to.db -p map="$INPUT"_distmp2 option=sides column=left,right layer=2 --q > $TMP.${PROG}.9 2>>~/$LOGFILE
  
  #$TMP.${PROG}.10 contains the length of the different boundaries
  
  v.to.db -p map="$INPUT"_distmp2 option=length column=boundL  layer=2 --q > $TMP.${PROG}.10 2>>~/$LOGFILE
  # we select in INPUT_distmp2 the polygons which area < threshold and with ELIMNO = 0
  
  
  v.db.select -c map="$INPUT"_distmp2 column=cat,$COLUMN nv=0 fs=" " where="$COLUMN < $AREA AND $ELIMNO = 0" --q > $TMP.${PROG}.8 2>>~/$LOGFILE
  
  
  wnb=$wnb+1
  ## end step17 : boundary calculation, area calculation, list of polygon ##
# iterative process end
done

## begin step18 : temporary column suppress ##
# we suppress the column ELIMNO

v.db.dropcol map="$INPUT"_distmp2 column=$ELIMNO --q 2>>~/$LOGFILE
v.db.dropcol map="$INPUT"_distmp2 column=$COLUMN --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
v.category input="$INPUT"_distmp2 output=$OUTPUT option=del type=boundary layer=2 --q 2>/dev/null
## end step18 : temporary column suppress ##
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

##cleanup procedure
cleanup
exit 0



