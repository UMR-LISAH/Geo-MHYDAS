#!/bin/bash
############################################################################
#
# MODULE:       m.extractlineseg
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      linear units extraction after segmentation
# REQUIREMENTS: m.testtype, m.tripl, m.segline, m.point, m.asciipoint, m.splicepl,
#               v.line.center, m.asciipointpl
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: linear units extraction after segmentation
#% keywords : vector, segmentation, linear units, extraction
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input line vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: polygon
#% type: string
#% gisprompt: old,vector,vector
#% description: Input segmented vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description:Output segmented line vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: id
#% type: string
#% description: Name of column for unique ID for the output layer (numerotation from 1); default is 'SELF_ID'
#% required : no
#%END

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
POLYGON="$GIS_OPT_POLYGON"
ID="$GIS_OPT_ID"

if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
  for ((u=1;u<=24;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_extractltmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



#dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.tripl`" ];then
  g.message -e message="m.tripl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.segline`" ];then
  g.message -e message="m.segline subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.point`" ];then
  g.message -e message="m.point subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.asciipoint`" ];then
  g.message -e message="m.asciipoint subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.splicepl`" ];then
  g.message -e message="m.splicepl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.line.center`" ];then
  g.message -e message="v.line.center subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.asciipointpl`" ];then
  g.message -e message="m.asciipointpl subscript required, please install it first"
  exit 2
fi


#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi


#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.24
	
if [ -s "$TMP.${PROG}.24" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi

#test if input temporary vector map already exist
g.mlist type=vect pattern="$INPUT"_extractltmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_extractltmp name for temporay file is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

#test if input vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -w  message="<$INPUT> not found"
  cleanup
   exit 2
fi


m.testtype input=$INPUT > $TMP.${PROG}.2

#if input vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "line" ] ; then
  g.message -e message="<$INPUT> isn't a vector line"
  cleanup
  exit 2
fi


##test if polygon vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${POLYGON} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -w  message="<$POLYGON> not found"
  cleanup
   exit 2
fi


m.testtype input=$POLYGON > $TMP.${PROG}.3

#if input polygon map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.3`" != "polygone" ] ; then
  g.message -e message="<$POLYGON> isn't a vector polygon"
  cleanup
  exit 2
fi

#checking if POLYGON has two attribute tables (layer 1 for centroid cats and layer 2 for boundary cats)
v.db.connect -g map=$POLYGON |wc -l |cut -d" " -f1 > $TMP.${PROG}.4
if [ "`cat $TMP.${PROG}.4`" != "2" ];then
  g.message -e message="<$POLYGON> vector map has not two layers !"
  g.message -e message="You must use the m.seg script before using this script!"
  cleanup
  exit 2
fi

#test ID value
if [ ! -z "$ID" ];then
	if [ "`echo $ID |grep "[[:alpha:]]" | wc -c`" = "0" ] ;then
		g.message -e message="<$ID> Name isn't alaphanumeric !!"
		cleanup
		exit 2
	fi
fi

#securities ending

#extraction of non null boundaries of POLYGON
v.info --q -c map=$POLYGON layer=2 |cut -d"|" -f2 |tail -n 1 > $TMP.${PROG}.5 2>>~/$LOGFILE
col=`cat $TMP.${PROG}.5`
#we check that we have non null value in the column $col, otherwise exit program
v.db.select -c map=$POLYGON layer=2 column=$col where="$col not Null" --q > $TMP.${PROG}.6 2>>~/$LOGFILE


if [ ! -s "$TMP.${PROG}.6" ];then
  g.message -e message=" No line found in $POLYGON !!"
  cleanup
  exit 2
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#extraction of the cats of the non null boundaries
v.db.select -c map=$POLYGON layer=2 column=cat where="$col not Null"  --q > $TMP.${PROG}.7 2>>~/$LOGFILE

#extraction of the boundaries
v.extract input=$POLYGON output="$INPUT"_extractltmp1 type=boundary layer=2 file=$TMP.${PROG}.7  --q 2>>~/$LOGFILE

# tranform boudnaries into points (only the nodes)
v.to.points -n input="$INPUT"_extractltmp1 output="$INPUT"_extractltmp2 type=boundary llayer=2  --q 2>>~/$LOGFILE

#x y coordinate calculation
v.db.addcol map="$INPUT"_extractltmp2 layer=2 columns="x DOUBLE PRECISION,y DOUBLE PRECISION"  --q 2>>~/$LOGFILE
v.to.db map="$INPUT"_extractltmp2 layer=2 option=coor column=x,y  --q 2>>~/$LOGFILE
v.db.select -c map="$INPUT"_extractltmp2 layer=2 column=x,y fs=" " nv=0  --q > $TMP.${PROG}.8 2>>~/$LOGFILE

# we remove the doubloons
m.tripl --input=$TMP.${PROG}.8 --output=$TMP.${PROG}.9 --col=0 2>>~/$LOGFILE
uniq -u $TMP.${PROG}.9 > $TMP.${PROG}.10 2>>~/$LOGFILE
uniq -d $TMP.${PROG}.9 >> $TMP.${PROG}.10 2>>~/$LOGFILE

m.tripl --input=$TMP.${PROG}.10 --output=$TMP.${PROG}.11 --col=1 2>>~/$LOGFILE
uniq -u $TMP.${PROG}.11 > $TMP.${PROG}.12 2>>~/$LOGFILE
uniq -d $TMP.${PROG}.11 >> $TMP.${PROG}.12 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

#call m.segline script for cutting lines
m.segline input=$INPUT output="$INPUT"_extractltmp3 file=$TMP.${PROG}.12 snap=0.05 2>>~/$LOGFILE



if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
# cleaning layer topology  (for length = 0 ou 0.000001)
v.db.droptable -f map="$INPUT"_extractltmp3 table="$INPUT"_extractltmp3 --q 2>>~/$LOGFILE
v.category input="$INPUT"_extractltmp3 output="$INPUT"_extractltmp4 type=line option=del  --q 2>>~/$LOGFILE
v.category input="$INPUT"_extractltmp4 output="$INPUT"_extractltmp5 type=line option=add  --q 2>>~/$LOGFILE
v.db.addtable map="$INPUT"_extractltmp5 column="length DOUBLE PRECISION"  --q 2>>~/$LOGFILE
v.to.db map="$INPUT"_extractltmp5 option=length column=length  --q 2>>~/$LOGFILE
v.extract input="$INPUT"_extractltmp5 output="$INPUT"_extractltmp6 where="length > 0.01"  --q 2>>~/$LOGFILE
v.clean input="$INPUT"_extractltmp6 output="$INPUT"_extractltmp7 tool=snap,rmline thresh=0.05  --q 2>>~/$LOGFILE
v.category input="$INPUT"_extractltmp7 output="$INPUT"_extractltmp8 type=line option=del  --q 2>>~/$LOGFILE
v.category input="$INPUT"_extractltmp8 output="$INPUT"_extractltmp9 type=line option=add  --q 2>>~/$LOGFILE
v.db.droptable -f map="$INPUT"_extractltmp9 table="$INPUT"_extractltmp9 --q  --q 2>>~/$LOGFILE
v.db.addtable map="$INPUT"_extractltmp9 layer=1  --q 2>>~/$LOGFILE

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

#addingb the column $ID
if [ ! -z "$ID" ];then
  v.db.addcol map="$INPUT"_extractltmp9 layer=1 columns=""$ID" INTEGER" --q 2>>~/$LOGFILE
  v.db.update map="$INPUT"_extractltmp9 layer=1 column=$ID qcol=cat  --q 2>>~/$LOGFILE
  
else
  v.db.addcol map="$INPUT"_extractltmp9 layer=1 columns="SELF_ID INTEGER" --q 2>>~/$LOGFILE
  v.db.update map="$INPUT"_extractltmp9 layer=1 column=SELF_ID qcol=cat  --q  2>>~/$LOGFILE
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#adding the column Id from INPUT
v.db.connect -c map=$POLYGON layer=2 >> $TMP.${PROG}.13  2>>~/$LOGFILE
grep "[[:alpha:]]_[0-9]" $TMP.${PROG}.13 |cut -d"|" -f2 |sed 's/_[[0-9]//g' > $TMP.${PROG}.14 2>>~/$LOGFILE
wc -l $TMP.${PROG}.14| cut -d" " -f1 > $TMP.${PROG}.15 2>>~/$LOGFILE
if [ "`cat $TMP.${PROG}.15`" != "1" ];then
  v.db.connect -c map=$INPUT layer=1 > $TMP.${PROG}.16 2>>~/$LOGFILE
  for a in `cat $TMP.${PROG}.15`;do
    grep "$a" $TMP.${PROG}.16 > $TMP.${PROG}.17 2>>~/$LOGFILE
    if [ -s "$TMP.${PROG}.17" ];then
     mv $TMP.${PROG}.17 $TMP.${PROG}.14
     break
    fi
    rm -f $TMP.${PROG}.17
  done
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
if [ "`cat $TMP.${PROG}.14`" != "cat" ];then
	v.db.addcol map="$INPUT"_extractltmp9 layer=1 columns="`cat $TMP.${PROG}.14` INTEGER" --q 2>>~/$LOGFILE
fi	
 
v.line.center input="$INPUT"_extractltmp9 output="$INPUT"_extractltmp10 layer=1 2>/dev/null
v.db.addtable map="$INPUT"_extractltmp10 layer=1 columns="catO INTEGER, catI INTEGER" --q 2>>~/$LOGFILE

v.distance from="$INPUT"_extractltmp10 to="$INPUT"_extractltmp9 from_type=point to_type=line dmax=0.5 upload=cat column=catO  --q 2>>~/$LOGFILE
v.distance from="$INPUT"_extractltmp10 to=$INPUT from_type=point to_type=line dmax=0.5 upload=to_attr column=catI to_column=`cat $TMP.${PROG}.14`  --q 2>>~/$LOGFILE
v.db.select -c map="$INPUT"_extractltmp10 column=catO,catI nv=0 fs="|"  --q > $TMP.${PROG}.20 2>>~/$LOGFILE
if [ "`cat $TMP.${PROG}.14`" != "cat" ];then
	for i in `cat $TMP.${PROG}.20`;do
	  echo "$i"|cut -d"|" -f1 > $TMP.${PROG}.21 2>>~/$LOGFILE
	  echo "$i"|cut -d"|" -f2 > $TMP.${PROG}.22 2>>~/$LOGFILE
	  v.db.update map="$INPUT"_extractltmp9 layer=1 column=`cat $TMP.${PROG}.14` value=`cat $TMP.${PROG}.22` where="cat=`cat $TMP.${PROG}.21`"  --q 2>>~/$LOGFILE

	  rm -f $TMP.${PROG}.21 $TMP.${PROG}.22
	done
fi

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
g.rename vect="$INPUT"_extractltmp9,$OUTPUT --q 2>/dev/null

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

#cleanup procedure
cleanup
exit 0
