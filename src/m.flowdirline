#!/bin/bash
############################################################################
#
# MODULE:       m.flowdirline
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      create flowdir raster modified by an oriented vector line
# REQUIREMENTS: m.testtype
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#%  description: create flowdir raster modified by an oriented vector line
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input lines oriented vector 
#% key_desc : name
#% required : yes
#%END
#%option
#% key: dem
#% type: string
#% gisprompt: old,cell,raster
#% description: Input DEM raster
#% key_desc : name
#% required : yes
#%END
#%option
#% key: dir
#% type: string
#% gisprompt: new,cell,raster
#% description: Output flowdir raster
#% key_desc : name
#% required : yes
#%END
#%option
#% key: res
#% type: double
#% description: raster resolution output
#% required : no
#%END

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
MNT="$GIS_OPT_DEM"
DIR="$GIS_OPT_DIR"
RES="$GIS_OPT_RES"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi
 
#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

#awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
    
   for ((u=1;u<=24;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done
  g.mremove -f rast="$INPUT"_flowdtmp3 --q
  g.mremove -f rast="$INPUT"_flowdtmp* --q
  g.mremove -f rast="$MNT"_flowdtmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

#dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

#test if output DIR raster map already exists
eval `g.findfile element=cell file="$DIR" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$DIR> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$DIR>  already exists and will be overwritten"
  fi
fi

#test if DIR raster name is allowed
v.in.region output=$DIR --q   2>$TMP.${PROG}.23
grep -v "overwritten"	$TMP.${PROG}.23 >  $TMP.${PROG}.24
if [ -s "$TMP.${PROG}.24" ];then
	g.message -w message="Illegal raster map name <$DIR>" 1>&2
    exit 2
else
	g.remove vect=$DIR --q  
fi

#test if input temporary vector map already exist
g.mlist type=vect pattern="$INPUT"_flowdtmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_flowdtmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

#test if input temporary raster map already exist
g.mlist type=rast pattern="$MNT"_flowdtmp*  > $TMP.${PROG}.2
if [ -s "$TMP.${PROG}.2" ];then
  g.message -w message="<$MNT>_flowdtmp name for temporay raster files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

#test if input dem map exists
g.findfile element=cell mapset=${MAPSET?} file=${MNT} > /dev/null
if [ $? -ne 0 ] ; then
	g.message -e message="<$MNT> not found !!"
	cleanup
	exit 2
fi

# test if INPUT exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.3

#if input vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.3`" != "line" ] ; then
	g.message -e message="<$INPUT> doesn't exist or isn't a vector line !!"
	cleanup
	exit 2
fi



#test RES value
if [ ! -z "$RES" ];then
	if [ "`echo $RES |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
		g.message -e message="Resolution pixel value isn't numeric !!"
                cleanup
		exit 2
	fi
	
	if [ "`echo $RES |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="Resolution pixel value isn't numeric !!"
	cleanup
	exit 2
	fi
	
	
fi

g.region rast=$MNT --q 2>>~/$LOGFILE
if [ ! -z "$RES" ];then
	g.region res=$RES --q 2>>~/$LOGFILE
fi
#loop for filling all the sinks
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi


r.fill.dir input=$MNT elevation="$MNT"_flowdtmp2 direction="$MNT"_flowdtmp3 areas="$MNT"_flowdtmp4  --q 2>/dev/null

r.stats input="$MNT"_flowdtmp4 --q |tail -n 1 > $TMP.${PROG}.4  2>>~/$LOGFILE
g.remove rast="$MNT"_flowdtmp3,"$MNT"_flowdtmp4 --q 2>>~/$LOGFILE

sink=`cat $TMP.${PROG}.4`
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

#no more than 5 step max for the while command
typeset -i nbfill
nbfill=1
while [ "$sink" != "0" ];do

  r.fill.dir input="$MNT"_flowdtmp2 elevation="$MNT"_flowdtmp2b direction="$MNT"_flowdtmp3 areas="$MNT"_flowdtmp4   --q 2>/dev/null
  r.stats input="$MNT"_flowdtmp4 --q |tail -n 1  > $TMP.${PROG}.4 2>>~/$LOGFILE
  g.remove rast="$MNT"_flowdtmp3,"$MNT"_flowdtmp4,"$MNT"_flowdtmp2 --q 2>>~/$LOGFILE
  g.rename rast="$MNT"_flowdtmp2b,"$MNT"_flowdtmp2 --q 2>>~/$LOGFILE
  sink=`cat $TMP.${PROG}.4`
  nbfill=$nbfill+1
  if [ "$nbfill" = "5" ];then
    break
  fi
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi

done
rm -f $TMP.${PROG}.4
#flowdirection creation without network influence

r.watershed elevation=$MNT drainage="$MNT"_flowdtmp5 --q 2>>~/$LOGFILE
#creation of the hydrologic network rasterwith direction attribut
v.to.rast input=$INPUT output="$INPUT"_flowdtmp1 use=dir --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#we divide the direction values in degree by 45 to obtain the same values as MNT_dir
r.mapcalculator amap="$INPUT"_flowdtmp1 formula=A/45 outfile="$INPUT"_flowdtmp2  --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#reclass to have integer values
echo "0.000001 thru 1.5 = 1" >> $TMP.${PROG}.5 2>>~/$LOGFILE
echo "1.5 thru 2.5 = 2" >> $TMP.${PROG}.5 2>>~/$LOGFILE
echo "2.5 thru 3.5 = 3" >> $TMP.${PROG}.5 2>>~/$LOGFILE
echo "3.5 thru 4.5 = 4" >> $TMP.${PROG}.5 2>>~/$LOGFILE
echo "4.5 thru 5.5 = 5" >> $TMP.${PROG}.5 2>>~/$LOGFILE
echo "5.5 thru 6.5 = 6" >> $TMP.${PROG}.5 2>>~/$LOGFILE
echo "6.5 thru 7.5 = 7" >> $TMP.${PROG}.5 2>>~/$LOGFILE
echo "7.5 thru 8 = 8" >> $TMP.${PROG}.5 2>>~/$LOGFILE
r.reclass input="$INPUT"_flowdtmp2 output="$INPUT"_flowdtmp3  --q  < $TMP.${PROG}.5 2>>~/$LOGFILE
r.mapcalc "$INPUT"_flowdtmp4 = "$INPUT"_flowdtmp3  2>>~/$LOGFILE
r.null map="$INPUT"_flowdtmp4 null=0 --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#for all neighbour pixels of a pixel non null of input_flowdtmp4,
#reorientation of the pixels == 0 by a direction value to map[0,0]
echo ""$INPUT"_flowdtmp10 = if ("$INPUT"_flowdtmp4[0,0] == 0 && "$INPUT"_flowdtmp4[1,0] != 0,6)" > $TMP.${PROG}.6 2>>~/$LOGFILE
r.mapcalc  < $TMP.${PROG}.6  2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp11 = if ("$INPUT"_flowdtmp4[0,0] == 0 && "$INPUT"_flowdtmp4[1,1] != 0,7)" > $TMP.${PROG}.7 2>>~/$LOGFILE
r.mapcalc  < $TMP.${PROG}.7 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp12 = if ("$INPUT"_flowdtmp4[0,0] == 0 && "$INPUT"_flowdtmp4[0,1] != 0,8)" > $TMP.${PROG}.8 2>>~/$LOGFILE
r.mapcalc   < $TMP.${PROG}.8 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp5 = if ("$INPUT"_flowdtmp4[0,0] == 0 && "$INPUT"_flowdtmp4[-1,1] != 0,1)" > $TMP.${PROG}.9 2>>~/$LOGFILE
r.mapcalc   < $TMP.${PROG}.9 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp6 = if ("$INPUT"_flowdtmp4[0,0] == 0 && "$INPUT"_flowdtmp4[-1,0] != 0,2)" > $TMP.${PROG}.10 2>>~/$LOGFILE
r.mapcalc    < $TMP.${PROG}.10 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp7 = if ("$INPUT"_flowdtmp4[0,0] == 0 && "$INPUT"_flowdtmp4[-1,-1] != 0,3)" > $TMP.${PROG}.11 2>>~/$LOGFILE
r.mapcalc   < $TMP.${PROG}.11 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp8 = if ("$INPUT"_flowdtmp4[0,0] == 0 && "$INPUT"_flowdtmp4[0,-1] != 0,4)" > $TMP.${PROG}.12 2>>~/$LOGFILE
r.mapcalc   < $TMP.${PROG}.12 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp9 = if ("$INPUT"_flowdtmp4[0,0] == 0 && "$INPUT"_flowdtmp4[1,-1] != 0,5)" > $TMP.${PROG}.13 2>>~/$LOGFILE
r.mapcalc   < $TMP.${PROG}.13 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

echo ""$INPUT"_flowdtmp13 = if ("$INPUT"_flowdtmp4,"$INPUT"_flowdtmp4,"$INPUT"_flowdtmp5)" > $TMP.${PROG}.14 2>>~/$LOGFILE
r.mapcalc   < $TMP.${PROG}.14 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp14 = if ("$INPUT"_flowdtmp13,"$INPUT"_flowdtmp13,"$INPUT"_flowdtmp6)" > $TMP.${PROG}.15 2>>~/$LOGFILE
r.mapcalc   < $TMP.${PROG}.15 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp15 = if ("$INPUT"_flowdtmp14,"$INPUT"_flowdtmp14,"$INPUT"_flowdtmp7)" > $TMP.${PROG}.16 2>>~/$LOGFILE
r.mapcalc   < $TMP.${PROG}.16 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp16 = if ("$INPUT"_flowdtmp15,"$INPUT"_flowdtmp15,"$INPUT"_flowdtmp8)" > $TMP.${PROG}.17 2>>~/$LOGFILE
r.mapcalc    < $TMP.${PROG}.17 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp17 = if ("$INPUT"_flowdtmp16,"$INPUT"_flowdtmp16,"$INPUT"_flowdtmp9)" > $TMP.${PROG}.18 2>>~/$LOGFILE
r.mapcalc    < $TMP.${PROG}.18 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp18 = if ("$INPUT"_flowdtmp17,"$INPUT"_flowdtmp17,"$INPUT"_flowdtmp10)" > $TMP.${PROG}.19 2>>~/$LOGFILE
r.mapcalc    < $TMP.${PROG}.19 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp19 = if ("$INPUT"_flowdtmp18,"$INPUT"_flowdtmp18,"$INPUT"_flowdtmp11)" > $TMP.${PROG}.20 2>>~/$LOGFILE
r.mapcalc    < $TMP.${PROG}.20 2>>~/$LOGFILE

echo ""$INPUT"_flowdtmp20 = if ("$INPUT"_flowdtmp19,"$INPUT"_flowdtmp19,"$INPUT"_flowdtmp12)" > $TMP.${PROG}.21 2>>~/$LOGFILE
r.mapcalc    < $TMP.${PROG}.21 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi


#for all the pixels of  MNT_dir which are on the the network rater and D-8 neighbours, we attrib direction values of INPUT_rasttot8
echo "$DIR = if ("$INPUT"_flowdtmp20,"$INPUT"_flowdtmp20,"$MNT"_flowdtmp5)" > $TMP.${PROG}.22 2>>~/$LOGFILE
r.mapcalc   < $TMP.${PROG}.22 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
cleanup


exit 0
