#!/bin/bash
############################################################################
#
# MODULE:       m.hierapolygseg
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      subscript to find hierarchical feature to merge
# REQUIREMENTS: m.tripl, m.splicepl
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: subscript to find hierarchical feature to merge
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input original vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: first
#% type: double
#% description: cat value of FirstCat
#% required : yes
#%END
#%option
#% key: file1
#% type: string
#% description: file name for hierarchical information
#% required : yes
#%END
#%option
#% key: file2
#% type: string
#% description: file name for topological information of the original vector
#% required : yes
#%END
#%option
#% key: file3
#% type: string
#% description: file name for topological information between the original vector and the temporary vector
#% required : yes
#%END
#%option
#% key: file4
#% type: string
#% description: file name for slivera14
#% required : yes
#%END
   

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
FIRST="$GIS_OPT_FIRST"
FILE1="$GIS_OPT_FILE1"
FILE2="$GIS_OPT_FILE2"
FILE3="$GIS_OPT_FILE3"
FILE4="$GIS_OPT_FILE4"

if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi
 
#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi


# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   for ((u=1;u<=68;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.splicepl`" ];then
  g.message -e message="m.splicepl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.tripl`" ];then
  g.message -e message="m.tripl subscript required, please install it first"
  exit 2
fi

#test if input vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.1

#if input vector map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "polygone" ] ; then
  g.message -e message="<$INPUT> isn't a vector polygon"
  cleanup
  exit 2
fi

#checking if POLYGON has two attribute tables (layer 1 for centroid cats and layer 2 for boundary cats)
v.db.connect -g map=$INPUT |wc -l |cut -d" " -f1 > $TMP.${PROG}.2
if [ "`cat $TMP.${PROG}.2`" != "2" ];then
  g.message -e message="<$INPUT> vector map has not two layers !"
  g.message -e message="You must use the m.seg script before using this script!"
  cleanup
  exit 2
fi

#test FIRST value
if [ "`echo $FIRST |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
  g.message -e message="<FIRST> value isn't numeric"
  cleanup
  exit 2
fi

if [ "`echo $FIRST |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="<FIRST> value isn't numeric !!"
	cleanup
	exit 2
fi



#test FILE value
if [ ! -e "$FILE1" -o ! -s "$FILE1" ];then
  g.message -e message="<$FILE1> doesn't exist or is empty !!"
  cleanup
  exit 2
fi

if [ ! -e "$FILE2" -o ! -s "$FILE2" ];then
  g.message -e message="<$FILE2> doesn't exist or is empty !!"
  cleanup
  exit 2
fi

if [ ! -e "$FILE3" -o ! -s "$FILE3" ];then
  g.message -e message="<$FILE3> doesn't exist or is empty !!"
  cleanup
  exit 2
fi




# identification of the number of hierarchical orders
wc -l $FILE1 |cut -d" " -f1 > $TMP.${PROG}.3 2>>~/$LOGFILE
typeset -i nbhiera5
nbhiera5=`cat $TMP.${PROG}.3`
typeset -i nbh
nbh=1


# the variable nbhiera12 is the number of the lines of $TMP.${PROG}.12
# if this number is != 1, we have several possible polygons for merging
#but we need only one

while [ "$nbhiera12" != "1" ];do

	# we can only make a number max of loops equal at the number of hierarchical order
	# if command for the security (if we exceed, but never happens...)
	if [ "$nbh" -gt "$nbhiera5" ];then
		
		cleanup
		exit 2
	fi

	#we keep the hierarchical an the type of the vector : line or polygon
	
	m.splicepl $nbh $FILE1 | cut -d" " -f2 > $TMP.${PROG}.4 2>>~/$LOGFILE
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi

	#begin loop 1 if it's polygon
	if [ "`cat $TMP.${PROG}.4`" = "polygone" ];then

		#we keep the column name with the level in process
		db.columns table="$INPUT"_1 |grep "[[:alpha:]]_$nbh" > $TMP.${PROG}.5 2>>~/$LOGFILE

		# we keep the category of the neighbours of FIRST
		#and we keep the neighbours of FIRST
		cut -d"|" -f2,3 $FILE2 > $TMP.${PROG}.6 2>>~/$LOGFILE
		#we keep the right and left neighbours
		echo "`cat $TMP.${PROG}.6`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}' |sort -k1g > $TMP.${PROG}.7 2>>~/$LOGFILE
		#we remove the doubloons 
		
		uniq -u $TMP.${PROG}.7 > $TMP.${PROG}.8 2>>~/$LOGFILE
		uniq -d $TMP.${PROG}.7 >> $TMP.${PROG}.8 2>>~/$LOGFILE
		#we remove FIRST of this list, the correct list of the neighbours of FIRST is in  $TMP.${PROG}.9 
		
		awk -F" " <$TMP.${PROG}.8 '$1!='$FIRST'' >> $TMP.${PROG}.9 2>>~/$LOGFILE
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
		#we keep the attributes of the neighbours of FIRST
		for hj in `cat $TMP.${PROG}.9`;do
			v.db.select -c map=$INPUT layer=1 column=cat,`cat $TMP.${PROG}.5` where="cat=$hj" fs=" " nv=0 --q >> $TMP.${PROG}.10 2>>~/$LOGFILE
			if [ ! -z "`cat ~/$LOGFILE`" ];then
				g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
				cleanup
				exit 2
			fi
		done

		#we keep the attributes of FIRST
		v.db.select -c map=$INPUT layer=1 column=`cat $TMP.${PROG}.5` where="cat=$FIRST" fs=" " nv=0 --q > $TMP.${PROG}.11 2>>~/$LOGFILE
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
		#comparison between FIRST attributes and its neighbours; two possibilities
		#(the attribute of the column $TMP.${PROG}.5) must be the same
		for hk in `cat $TMP.${PROG}.11`;do
			awk -F" " <$TMP.${PROG}.10 '$2=='$hk'' |cut -d" " -f1 >> $TMP.${PROG}.12 2>>~/$LOGFILE
			if [ ! -z "`cat ~/$LOGFILE`" ];then
				g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
				cleanup
				exit 2
			fi
		done

		#case 1: $TMP.${PROG}.12 is empty
		#case 1: we keep the neighbour boundaries, we take the longest
		#case 1: and we find the polygon , we put its  cat in $TMP.${PROG}.12

		#case 2: $TMP.${PROG}.12 has one or more lines, we are ok for the next step

		#begin of the loop 3, treatment of case 1
		if [ ! -s "$TMP.${PROG}.12" ];then
			for hl in `cat $TMP.${PROG}.9`;do
				awk -F"|" <$FILE2 '$2=='$hl'' |cut -d"|" -f1 >> $TMP.${PROG}.13 2>>~/$LOGFILE
				awk -F"|" <$FILE2 '$3=='$hl'' |cut -d"|" -f1 >> $TMP.${PROG}.13 2>>~/$LOGFILE
				if [ ! -z "`cat ~/$LOGFILE`" ];then
					g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
					cleanup
					exit 2
				fi
			done
			for hm in `cat $TMP.${PROG}.13`;do
				awk -F" " <$FILE3 '$1=='$hm''  >> $TMP.${PROG}.14 2>>~/$LOGFILE
				if [ ! -z "`cat ~/$LOGFILE`" ];then
					g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
					cleanup
					exit 2
				fi
			done
			m.tripl --input=$TMP.${PROG}.14 --output=$TMP.${PROG}.15 --col=2 2>>~/$LOGFILE
			tail -n 1 $TMP.${PROG}.15 |cut -d" " -f1 > $TMP.${PROG}.16 2>>~/$LOGFILE
			awk -F"|" <$FILE2 '$1=='`cat $TMP.${PROG}.16`'' |cut -d"|" -f2,3 >> $TMP.${PROG}.17 2>>~/$LOGFILE
			echo "`cat $TMP.${PROG}.17`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}' |sort -k1g > $TMP.${PROG}.18 2>>~/$LOGFILE
			awk -F" " <$TMP.${PROG}.18 '$1!='$FIRST'' >> $TMP.${PROG}.12 2>>~/$LOGFILE
			if [ ! -z "`cat ~/$LOGFILE`" ];then
				g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
				cleanup
				exit 2
			fi	
		#end of loop 3
		fi

	#else loop 1 : if it's a line
	else

		#we keep the column name 
		db.columns table="$INPUT"_2 |grep "[[:alpha:]]_$nbh" > $TMP.${PROG}.19 2>>~/$LOGFILE

		#we keep the boundary attributes creation of  $TMP.${PROG}.22
		# we keep the attributes of the boundaries of INPUT
		cut -d"|" -f1 $FILE2 > $TMP.${PROG}.20 2>>~/$LOGFILE
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
		for ax in `cat $TMP.${PROG}.20`;do
				awk -F" " <$FILE3 '$1=='$ax'' |cut -d" " -f2 >> $TMP.${PROG}.21 2>>~/$LOGFILE
				if [ ! -z "`cat ~/$LOGFILE`" ];then
					g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
					cleanup
					exit 2
				fi
		done
		for hi in `cat $TMP.${PROG}.21`;do
			v.db.select -c map=$INPUT layer=2 column=cat,`cat $TMP.${PROG}.19` where="cat=$hi" fs=" " nv=0 --q >> $TMP.${PROG}.22 2>>~/$LOGFILE
			if [ ! -z "`cat ~/$LOGFILE`" ];then
				g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
				cleanup
				exit 2
			fi
		done

		#we remove the attributes  != 0; creation of  $TMP.${PROG}.23: 2 possibilities
		awk -F" " <$TMP.${PROG}.22 '$2=='0'' > $TMP.${PROG}.23 2>>~/$LOGFILE

		#case 1: $TMP.${PROG}.23 is empty ; in  $TMP.${PROG}.22, we take the longest boundary
		#case 1: we find the cat of the polygon, we put its cat in  $TMP.${PROG}.12

		#begin loop 4, treatment of case 1
		if [ ! -s "$TMP.${PROG}.23" ];then
			cut -d" " -f1 $TMP.${PROG}.22 > $TMP.${PROG}.24 2>>~/$LOGFILE
			for at in `cat $TMP.${PROG}.24`;do
				awk -F" " <$FILE3 '$2=='$at''  >> $TMP.${PROG}.25 2>>~/$LOGFILE
			done
			m.tripl --input=$TMP.${PROG}.25 --output=$TMP.${PROG}.26 --col=2 2>>~/$LOGFILE
			tail -n 1 $TMP.${PROG}.26 |cut -d" " -f1 > $TMP.${PROG}.27 2>>~/$LOGFILE
			awk -F"|" <$FILE2 '$1=='`cat $TMP.${PROG}.27`'' |cut -d"|" -f2,3 >> $TMP.${PROG}.28 2>>~/$LOGFILE
			echo "`cat $TMP.${PROG}.28`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}' |sort -k1g > $TMP.${PROG}.29 2>>~/$LOGFILE
			awk -F" " <$TMP.${PROG}.29 '$1!='$FIRST'' > $TMP.${PROG}.12 2>>~/$LOGFILE
			if [ ! -z "`cat ~/$LOGFILE`" ];then
				g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
				cleanup
				exit 2
			fi
		#else loop 4, treatment of case 2
		#case 2: $TMP.${PROG}.23 has one or more lines, we find the cat of the polygons
		#case 2: linked and we put these cats in  $TMP.${PROG}.12, we are ok for the next step
		else
		cut -d" " -f1 $TMP.${PROG}.23 > $TMP.${PROG}.30 2>>~/$LOGFILE
		for au in `cat $TMP.${PROG}.30`;do
			awk -F" " <$FILE3 '$2=='$au''  >> $TMP.${PROG}.31 2>>~/$LOGFILE
		done 
		cut -d" " -f1 $TMP.${PROG}.31 > $TMP.${PROG}.32 2>>~/$LOGFILE
		for av in `cat $TMP.${PROG}.32`;do
			awk -F"|" <$FILE2 '$1=='$av''  >> $TMP.${PROG}.33 2>>~/$LOGFILE
		done
                cut -d"|" -f2,3 $TMP.${PROG}.33 > $TMP.${PROG}.34 2>>~/$LOGFILE
		echo "`cat $TMP.${PROG}.34`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}' |sort -k1g > $TMP.${PROG}.35 2>>~/$LOGFILE
		awk -F" " <$TMP.${PROG}.35 '$1!='$FIRST'' > $TMP.${PROG}.12 2>>~/$LOGFILE
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
				exit 2
		fi
		#end loop 4
		fi
	#end loop 1
	fi

	#we will analysze the number of lines of  $TMP.${PROG}.12; 2 possibilities
	wc -l $TMP.${PROG}.12 |cut -d" " -f1 > $TMP.${PROG}.36 2>>~/$LOGFILE
	typeset -i nbhiera12
	nbhiera12=`cat $TMP.${PROG}.36`
	#begin loop 2: if $TMP.${PROG}.12 has just one line, we can create FILE4 for the patch
	#FILE4 pour le patch	
	
	
	
	
	if [ "$nbhiera12" = "1" ];then
		
		echo "$FIRST,`cat $TMP.${PROG}.12`" > $FILE4 2>>~/$LOGFILE
		cleanup
		exit 0

	#else loop 2: if  $TMP.${PROG}.12 has several lines, we keep in FILE2, the linked polygons and we go for a new step
	else
		for aa in `cat $TMP.${PROG}.12`;do
			awk -F"|" <$FILE2 '$3=='$aa''  >> $TMP.${PROG}.37 2>>~/$LOGFILE
			awk -F"|" <$FILE2 '$2=='$aa''  >> $TMP.${PROG}.37 2>>~/$LOGFILE
		done 
		rm $FILE2
		mv $TMP.${PROG}.37 $FILE2 2>>~/$LOGFILE

	#end loop 2
	fi
         for ((v=3;v<=37;v+=1))
         do
          rm -f $TMP.${PROG}.$v
         done

	nbh=$nbh+1

done
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#cleanup procedure
cleanup
exit 0
