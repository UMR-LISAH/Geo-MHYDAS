#!/bin/bash
############################################################################
#
# MODULE:       m.inlet
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      create a point vector from inlet (upstream nodes) from a line vector
# REQUIREMENTS: m.asciipoint,m.tripl
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: create a point vector from inlet (upstream nodes) from a line vector
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input line oriented vector 
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output inlet point vector
#% key_desc : name
#% required : yes
#%END
#%option
#% key: dem
#% type: string
#% gisprompt: old,cell,raster
#% description: Input DEM raster
#% key_desc : name
#% required : yes
#%END

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
MNT="$GIS_OPT_DEM"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   rm -f $TMP.${PROG}
   for ((u=1;u<=12;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_inlettmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



#dependancies testing
if [ ! -x "`which m.asciipoint`" ];then
  g.message -e message="m.asciipoint subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.tripl`" ];then
  g.message -e message="m.tripl subscript required, please install it first"
  exit 2
fi

#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi

#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.12
	
if [ -s "$TMP.${PROG}.12" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi


#test if input temporary vector map already exist

g.mlist type=vect pattern="$INPUT"_inlettmp*  > $TMP.${PROG}
if [ -s "$TMP.${PROG}" ];then
  g.message -w message="<$INPUT>_inlettmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

#test if input exists

g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.1

#if input vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "line" ] ; then
	g.message -e message="<$INPUT> doesn't exist or isn't a vector line !!"
	cleanup
	exit 2
fi

#test if dem raster map exists
g.findfile element=cell mapset=${MAPSET?} file=${MNT} > /dev/null
if [ $? -ne 0 ] ; then
	g.message -e message="<$MNT> not found !!"
	cleanup
	exit 2
fi



#v.net command to construct the network
v.net -c input=$INPUT output="$INPUT"_inlettmp1 operation=nodes --q 2>>~/$LOGFILE
 
#finding all the upstream segments
v.net input="$INPUT"_inlettmp1 operation=nreport |grep -v "," |cut -d" " -f2> $TMP.${PROG}.2 2>>~/$LOGFILE

# extraction of these segments
v.extract input="$INPUT"_inlettmp1 output="$INPUT"_inlettmp2 type=line file=$TMP.${PROG}.2  --q 2>>~/$LOGFILE

#transformation into points
v.to.points -n input="$INPUT"_inlettmp2 type=line output="$INPUT"_inlettmp3  --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#v.distance command between the points and the segments to identify the points with only one segment
#as the network can be  not well oriented , it's impossible to identify these points with along = 0
v.distance -a from="$INPUT"_inlettmp3 to=$INPUT from_type=point to_type=line from_layer=2 to_layer=1 upload=cat,dist column=to_cat,to_dist  --q > $TMP.${PROG}.3 2>>~/$LOGFILE
grep "|0[.]00*" $TMP.${PROG}.3  > $TMP.${PROG}.4 2>>~/$LOGFILE
cut -d"|" -f1 $TMP.${PROG}.4 |uniq -u > $TMP.${PROG}.5 2>>~/$LOGFILE

#extraction of the points 
v.extract input="$INPUT"_inlettmp3 output="$INPUT"_inlettmp4 type=point layer=2 file=$TMP.${PROG}.5  --q 2>>~/$LOGFILE

#identification of the lowest point (catchment outlet) et removing it because we don't want to have a subcatchment on this point
v.db.addcol map="$INPUT"_inlettmp4 layer=2 columns="z DOUBLE PRECISION"  --q 2>>~/$LOGFILE

v.what.rast vector="$INPUT"_inlettmp4 raster=$MNT layer=2 column=z  --q 2>/dev/null
v.db.select -c map="$INPUT"_inlettmp4 layer=2 column=cat,z nv=0 fs=" "  --q > $TMP.${PROG}.6 2>>~/$LOGFILE
m.tripl --input=$TMP.${PROG}.6 --output=$TMP.${PROG}.7 --col=1 2>>~/$LOGFILE
head -n 1 $TMP.${PROG}.7 |cut -d" " -f1 > $TMP.${PROG}.8 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#we make the difference between  $TMP.${PROG}.8 and $TMP.${PROG}.5
diff $TMP.${PROG}.8 $TMP.${PROG}.5 |grep -v "," | cut -d" " -f2 > $TMP.${PROG}.9 2>>~/$LOGFILE
v.extract input="$INPUT"_inlettmp4 output="$INPUT"_inlettmp5 type=point layer=2 file=$TMP.${PROG}.9  --q 2>>~/$LOGFILE

#we transform the layer  "$INPUT"_inlettmp5 in a point vector map (with a layer 1)
v.db.addcol map="$INPUT"_inlettmp5 layer=2 columns="x DOUBLE PRECISION,y DOUBLE PRECISION"  --q 2>>~/$LOGFILE
v.to.db map="$INPUT"_inlettmp5 type=point layer=2 option=coor column=x,y  --q 2>>~/$LOGFILE
v.db.select -c map="$INPUT"_inlettmp5 layer=2 column=x,y fs=" "  --q > $TMP.${PROG}.10 2>>~/$LOGFILE
m.asciipoint file=$TMP.${PROG}.10 output=$OUTPUT 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
cleanup
exit 0


