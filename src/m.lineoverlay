#!/bin/bash
############################################################################
#
# MODULE:       m.lineoverlay
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Overlay between line vector and an other line or polygon vector
# REQUIREMENTS: m.testtype
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#%  description: Overlay between line vector and an other line or polygon vector
#%END
#%option
#% key: input1
#% type: string
#% gisprompt: old,vector,vector
#% description: First vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: input2
#% type: string
#% gisprompt: old,vector,vector
#% description: Second vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: snap
#% type: double
#% description: Snap value; default is 1
#% required : no
#%END


eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT1="$GIS_OPT_INPUT1"
INPUT2="$GIS_OPT_INPUT2"
OUTPUT="$GIS_OPT_OUTPUT"
SNAP="$GIS_OPT_SNAP"



if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
  for ((u=1;u<=53;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$OUTPUT"_lineovertmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
   fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi

#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.53
	
if [ -s "$TMP.${PROG}.53" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi


#test if output temporary vector map already exist
g.mlist type=vect pattern="$OUTPUT"_lineovertmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$OUTPUT>_lineovertmp name for temporay file is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

#test SNAP value
if [ ! -z "$SNAP" ];then
	if [ "`echo $SNAP |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
		g.message -e message="SNAP Distance value isn't numeric !!"
		cleanup
		exit 2
	fi
fi

#we put  SNAP on 1 if SNAP null
if [ -z "$SNAP" ];then
  SNAP=1
fi

#test if input1 exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT1} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT1> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT1 > $TMP.${PROG}.2
#if input1 vector map is not a line or polygon vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "line" ] && [ "`cat $TMP.${PROG}.2`" != "polygone" ] ; then
	g.message -e message="<$INPUT1> doesn't exist or isn't a vector line or a vector polygon !!"
	cleanup
	exit 2
fi

#test if input1 exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT2} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT2> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT2 > $TMP.${PROG}.3
#if input2 vector map is not a line or polygon vector, exit program
if [ "`cat $TMP.${PROG}.3`" != "line" ] && [ "`cat $TMP.${PROG}.3`" != "polygone" ] ; then
	g.message -e message="<$INPUT2> doesn't exist or isn't a vector line or a vector polygon !!"
	cleanup
	exit 2
fi



m.testtype input=$INPUT1 > $TMP.${PROG}.4 2>>~/$LOGFILE
m.testtype input=$INPUT2 > $TMP.${PROG}.5 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
if [ "`cat $TMP.${PROG}.4`" = "line" ] && [ "`cat $TMP.${PROG}.5`" = "line" ] ; then
	v.patch input=$INPUT1,$INPUT2 output="$OUTPUT"_lineovertmp1 --q 2>>~/$LOGFILE
	v.clean input="$OUTPUT"_lineovertmp1 output="$OUTPUT"_lineovertmp2 tool=break --q 2>>~/$LOGFILE
	v.clean input="$OUTPUT"_lineovertmp2 output="$OUTPUT"_lineovertmp3 tool=snap,rmdupl thresh=$SNAP --q 2>>~/$LOGFILE
	v.category input="$OUTPUT"_lineovertmp3 output="$OUTPUT"_lineovertmp4 type=line option=del  --q 2>>~/$LOGFILE
	v.category input="$OUTPUT"_lineovertmp4 output=$OUTPUT type=line option=add --q  2>>~/$LOGFILE
	v.db.addtable map=$OUTPUT  --q 2>>~/$LOGFILE
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
	cleanup
	exit 0
fi

if [ "`cat $TMP.${PROG}.4`" = "polygone" ] && [ "`cat $TMP.${PROG}.5`" = "polygone" ] ; then
	g.message -e message="The vectors are polygon vectors !"
        cleanup
	exit 2
fi


if [ "`cat $TMP.${PROG}.4`" = "polygone" ] && [ "`cat $TMP.${PROG}.5`" = "line" ] ; then
	#we transform  INPUT1 on a  line vector
	v.category input=$INPUT1 output="$OUTPUT"_lineovertmp1 type=boundary option=add  --q 2>>~/$LOGFILE
	v.type input="$OUTPUT"_lineovertmp1 output="$OUTPUT"_lineovertmp2 type=boundary,line  --q 2>>~/$LOGFILE
	v.extract input="$OUTPUT"_lineovertmp2 output="$OUTPUT"_lineovertmp2a type=line  --q 2>>~/$LOGFILE
	#patching  "$OUTPUT"_lineovertmp2 with "$OUTPUT"_lineovertmp2a
	v.patch input="$OUTPUT"_lineovertmp2a,$INPUT2 output="$OUTPUT"_lineovertmp3  --q 2>>~/$LOGFILE
	g.remove vect="$OUTPUT"_lineovertmp1,"$OUTPUT"_lineovertmp2,"$OUTPUT"_lineovertmp2a --q 2>>~/$LOGFILE
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
fi

if [ "`cat $TMP.${PROG}.4`" = "line" ] && [ "`cat $TMP.${PROG}.5`" = "polygone" ] ; then
	#we transform  INPUT2 on a line vector
	v.category input=$INPUT2 output="$OUTPUT"_lineovertmp4 type=boundary option=add  --q 2>>~/$LOGFILE
	v.type input="$OUTPUT"_lineovertmp4 output="$OUTPUT"_lineovertmp5 type=boundary,line  --q 2>>~/$LOGFILE
	v.extract input="$OUTPUT"_lineovertmp5 output="$OUTPUT"_lineovertmp6 type=line  --q 2>>~/$LOGFILE
	# wa patch  "$OUTPUT"_lineovertmp6 with $INPUT1
	v.patch input="$OUTPUT"_lineovertmp6,$INPUT1 output="$OUTPUT"_lineovertmp3  --q 2>>~/$LOGFILE
	g.remove vect="$OUTPUT"_lineovertmp4,"$OUTPUT"_lineovertmp5,"$OUTPUT"_lineovertmp6 --q 2>>~/$LOGFILE
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
fi

v.clean input="$OUTPUT"_lineovertmp3 output="$OUTPUT"_lineovertmp7 tool=snap,break,rmdupl thresh=$SNAP --q 2>>~/$LOGFILE
v.clean input="$OUTPUT"_lineovertmp7 output="$OUTPUT"_lineovertmp8 tool=rmdangle thresh=-1 --q 2>>~/$LOGFILE
#we transform the lines into boundaries
v.type input="$OUTPUT"_lineovertmp8 output="$OUTPUT"_lineovertmp9 type=line,boundary  --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#new centroid positions calculation
v.category input="$OUTPUT"_lineovertmp9 output="$OUTPUT"_lineovertmp10 type=boundary option=del  --q 2>>~/$LOGFILE
v.category input="$OUTPUT"_lineovertmp10 output="$OUTPUT"_lineovertmp11 type=boundary option=add  --q 2>>~/$LOGFILE
v.extract input="$OUTPUT"_lineovertmp11 output="$OUTPUT"_lineovertmp12 type=boundary --q 2>>~/$LOGFILE
v.centroids input="$OUTPUT"_lineovertmp12 output="$OUTPUT"_lineovertmp13  --q 2>>~/$LOGFILE
v.category input="$OUTPUT"_lineovertmp13 output="$OUTPUT"_lineovertmp14 type=boundary option=del  --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
###we work on the lines which don't cut the polygons, they create islands (and working on the islands dues to v.clean command)


##extraction of the boundaries
v.type input="$OUTPUT"_lineovertmp14 output="$OUTPUT"_lineovertmp15 type=boundary,line  --q 2>>~/$LOGFILE
v.category input="$OUTPUT"_lineovertmp15 output="$OUTPUT"_lineovertmp16 type=line option=add  --q 2>>~/$LOGFILE
v.extract input="$OUTPUT"_lineovertmp16 output="$OUTPUT"_lineovertmp17 type=line  --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi

#we find the dangles of the lines
#topology network creation
v.net -c input="$OUTPUT"_lineovertmp17 output="$OUTPUT"_lineovertmp18 operation=nodes --q 2>>~/$LOGFILE
#$TMP.${PROG}.6: cat_point line_cat,line_cat...
v.net input="$OUTPUT"_lineovertmp18 operation=nreport  --q > $TMP.${PROG}.6 2>>~/$LOGFILE
#we will find the nodes which are dangles (inlets)
#they are nodes which are in contact with just one segment
#column1: cat of the node, column 2 cat of the segment
grep -v "," $TMP.${PROG}.6  > $TMP.${PROG}.7 2>>~/$LOGFILE

#identification of the dangle segments dues to the v.clean and those due to the lines
cut -d" " -f2 $TMP.${PROG}.7 > $TMP.${PROG}.8 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
v.extract input="$OUTPUT"_lineovertmp18 output="$OUTPUT"_lineovertmp19 file=$TMP.${PROG}.8 --q 2>>~/$LOGFILE
if [ -s "$TMP.${PROG}.8" ];then
	if [ "`cat $TMP.${PROG}.4`" = "line" ];then
		v.select -t ainput="$OUTPUT"_lineovertmp19 atype=line binput=$INPUT1 btype=line output="$OUTPUT"_lineovertmp20 --q 2>>~/$LOGFILE
	else
		v.select -t ainput="$OUTPUT"_lineovertmp19 atype=line binput=$INPUT2 btype=line output="$OUTPUT"_lineovertmp20 --q 2>>~/$LOGFILE
	fi

	v.category input="$OUTPUT"_lineovertmp20 option=print  --q > $TMP.${PROG}.9 2>>~/$LOGFILE
	diff $TMP.${PROG}.8 $TMP.${PROG}.9 > $TMP.${PROG}.10 2>>~/$LOGFILE
	grep "^<" $TMP.${PROG}.10 |cut -d" " -f2 > $TMP.${PROG}.11 2>>~/$LOGFILE
	#$TMP.${PROG}.11 contains the cats of the segments of  "$OUTPUT"_lineovertmp17 which must be removed because they are due to the v.clean

	v.category input="$OUTPUT"_lineovertmp17 option=print  --q > $TMP.${PROG}.12 2>>~/$LOGFILE
	diff $TMP.${PROG}.12 $TMP.${PROG}.11 > $TMP.${PROG}.13 2>>~/$LOGFILE
	grep -v "," $TMP.${PROG}.13 > $TMP.${PROG}.14 2>>~/$LOGFILE
	grep -v "d" $TMP.${PROG}.14 > $TMP.${PROG}.15 2>>~/$LOGFILE
	cut -d" " -f2 $TMP.${PROG}.15 > $TMP.${PROG}.16 2>>~/$LOGFILE

	# extraction in "$OUTPUT"_lineovertmp17 of cats of  $TMP.${PROG}.16
	v.extract input="$OUTPUT"_lineovertmp17 output="$OUTPUT"_lineovertmp21 file=$TMP.${PROG}.16  --q 2>>~/$LOGFILE
	g.remove vect="$OUTPUT"_lineovertmp20 --q 2>>~/$LOGFILE
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
else
	g.copy vect="$OUTPUT"_lineovertmp17,"$OUTPUT"_lineovertmp21 --q 2>>~/$LOGFILE

fi
#we  transform "$OUTPUT"_lineovertmp21 in a polygon vector map

v.build.polylines  input="$OUTPUT"_lineovertmp21 output="$OUTPUT"_lineovertmp22   --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
v.clean input="$OUTPUT"_lineovertmp22 output="$OUTPUT"_lineovertmp23 tool=prune,break,rmdupl thresh=0 --q 2>>~/$LOGFILE
v.clean input="$OUTPUT"_lineovertmp23 output="$OUTPUT"_lineovertmp24 tool=snap,break,rmdupl thresh=$SNAP --q 2>>~/$LOGFILE
v.category input="$OUTPUT"_lineovertmp24 output="$OUTPUT"_lineovertmp25 type=line option=add  --q 2>>~/$LOGFILE
v.type input="$OUTPUT"_lineovertmp25 output="$OUTPUT"_lineovertmp26 type=line,boundary  --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
v.centroids input="$OUTPUT"_lineovertmp26 output="$OUTPUT"_lineovertmp27  --q 2>>~/$LOGFILE
v.clean input="$OUTPUT"_lineovertmp27 output=$OUTPUT tool=bpol --q 2>>~/$LOGFILE
v.db.addtable map=$OUTPUT  --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#cleanup procedure
cleanup
exit 0
