#!/bin/bash
############################################################################
#
# MODULE:       m.network
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      hydrological network verification (rooted tree)
# REQUIREMENTS: m.testtype, m.testtype2,m.tripl, v.line.center
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################



#%Module
#%  description: hydrological network verification (rooted tree)
#%  keywords : vector, network, rooted tree
#%END
#%flag
#% key: c
#% description: clean vector geometry for confluence problem (default is no)
#%end
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output vector name
#% key_desc : name
#% required : yes
#%END

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"



if  [ -z "$GISBASE" ]
then
	echo ""
	g.message -e message="You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
  \rm -f $TMP.${PROG}
   for ((u=1;u<=32;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_nettmp* --q
 if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.line.center`" ];then
  g.message -e message="v.line.center subscript required, please install it first"
  exit 2
fi


if [ ! -x "`which m.testtype2`" ];then
  g.message -e message="m.testtype2 subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.tripl`" ];then
  g.message -e message="m.tripl subscript required, please install it first"
  exit 2
fi

 

#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi

#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.32
	
if [ -s "$TMP.${PROG}.32" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi



#test if input temporary vector map already exist
g.mlist type=vect pattern="$INPUT"_nettmp*  > $TMP.${PROG}
if [ -s "$TMP.${PROG}" ];then
  g.message -w message="<$INPUT>_nettmp name for temporay file is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

# test if input exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -w  message="<$INPUT> not found"
   exit 2
fi


m.testtype input=$INPUT > $TMP.${PROG}.1

#if input vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "line" ] ; then
  g.message -e message="<$INPUT> isn't a line vector"
  cleanup
  exit 2
fi


# we need to break lines between the confluences and category calculation

v.clean input=$INPUT output="$INPUT"_nettmp tool=snap,break,rmdupl thresh=0.02 --q 2>>~/$LOGFILE
v.db.addcol map="$INPUT"_nettmp column="catdouble INTEGER" --q 2>>~/$LOGFILE
v.db.update map="$INPUT"_nettmp column=catdouble qcolumn=cat --q 2>>~/$LOGFILE
#si number of entities INPUT != nb entities INPUT_nettmp, clean geometry if flag c
m.testtype2 input=$INPUT > $TMP.${PROG}.20 2>>~/$LOGFILE
m.testtype2 input="$INPUT"_nettmp > $TMP.${PROG}.21 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
if [ "`cat $TMP.${PROG}.20`" != "`cat $TMP.${PROG}.21`" ] && [ $GIS_FLAG_C -eq 1 ]; then
  v.category input="$INPUT"_nettmp output="$INPUT"_nettmp10 type=line option=del --q 2>>~/$LOGFILE
  v.category input="$INPUT"_nettmp10 output="$INPUT"_nettmp11 type=line option=add --q 2>>~/$LOGFILE
  v.line.center input="$INPUT"_nettmp11 output="$INPUT"_nettmp12 layer=1 2>/dev/null
  v.db.addtable map="$INPUT"_nettmp12 columns="cati INTEGER,cat11 INTEGER" --q 2>>~/$LOGFILE
  v.distance from="$INPUT"_nettmp12 to=$INPUT from_type=point to_type=line from_layer=1 to_layer=1  dmax=0.05 upload=cat column=cati --q 2>>~/$LOGFILE
  v.distance from="$INPUT"_nettmp12 to="$INPUT"_nettmp11 from_type=point to_type=line from_layer=1 to_layer=1  dmax=0.05 upload=cat column=cat11  --q 2>>~/$LOGFILE
  g.copy vect="$INPUT"_nettmp11,"$INPUT"_nettmp13 --q 2>>~/$LOGFILE
  
  v.db.select -c map="$INPUT"_nettmp12 column=cat11,cati fs=" " nv=0  --q |sort -t" " -k2n > $TMP.${PROG}.22 2>>~/$LOGFILE
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
  #$TMP.${PROG}.23 will contain the doubloons category  (segmented lines); just one copy
  uniq -d -f1 $TMP.${PROG}.22 > $TMP.${PROG}.23 2>>~/$LOGFILE
  #$TMP.${PROG}.27 will contain the doubloons category  (segmented lines); two copys of the doubloons
  uniq -D -f1 $TMP.${PROG}.22 > $TMP.${PROG}.27 2>>~/$LOGFILE
  #diff between  $TMP.${PROG}.23 and $TMP.${PROG}.27
  diff $TMP.${PROG}.23 $TMP.${PROG}.27 |grep ">" |cut -d" " -f2 > $TMP.${PROG}.28 2>>~/$LOGFILE
  #$TMP.${PROG}.24 will contain the uniq cat (lines non segmented)
  uniq -u -f1 $TMP.${PROG}.22 > $TMP.${PROG}.24 2>>~/$LOGFILE
  #for the cat uniq , we will modify the column cat of  "$INPUT"_nettmp13.dbf
  echo "`cat $TMP.${PROG}.24`" |awk -F" " '{OFS="|"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.25 2>>~/$LOGFILE
  for a in `cat $TMP.${PROG}.25`;do
    echo "UPDATE "$INPUT"_nettmp13 SET cat=`echo "$a"|cut -d"|" -f1` WHERE catdouble=`echo "$a"|cut -d"|" -f2`" | db.execute 2>>~/$LOGFILE
  done
  #for the doubloon cat we will modify the column cat of "$INPUT"_nettmp13.dbf
  echo "`cat $TMP.${PROG}.23`" |awk -F" " '{OFS="|"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.26 2>>~/$LOGFILE
  for b in `cat $TMP.${PROG}.26`;do
    echo "UPDATE "$INPUT"_nettmp13 SET cat=`echo "$b"|cut -d"|" -f1` WHERE catdouble=`echo "$b"|cut -d"|" -f2`" | db.execute 2>>~/$LOGFILE
  done
  #for the doubloons cat contained in  $TMP.${PROG}.28 , we put supplementary lines in "$INPUT"_nettmp13.dbf
  for c in `cat $TMP.${PROG}.28`;do
    echo "INSERT INTO "$INPUT"_nettmp13 (cat) values ($c)" | db.execute 2>>~/$LOGFILE
  done
 
   g.remove vect="$INPUT"_nettmp --q 2>>~/$LOGFILE
  g.rename vect="$INPUT"_nettmp13,"$INPUT"_nettmp --q 2>>~/$LOGFILE
  if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
  fi
fi
if [ "`cat $TMP.${PROG}.20`" != "`cat $TMP.${PROG}.21`" ] && [ $GIS_FLAG_C -ne 1 ]; then
  g.message -w message="<$INPUT> has geometry problems on confluence. Check it please"
  cleanup
  exit 2
fi

v.db.dropcol map="$INPUT"_nettmp column=catdouble --q 2>>~/$LOGFILE



######## end testing

#we will test the connectivity of the network and loop existence
v.info -t map="$INPUT"_nettmp > $TMP.${PROG}.2 2>>~/$LOGFILE
grep "nodes" $TMP.${PROG}.2|cut -d"=" -f2 > $TMP.${PROG}.3 2>>~/$LOGFILE
grep "lines" $TMP.${PROG}.2|cut -d"=" -f2> $TMP.${PROG}.4 2>>~/$LOGFILE
typeset -i nbnode
nbnode=`cat $TMP.${PROG}.3`
typeset -i nbseg2
nbseg2=`cat $TMP.${PROG}.4`+2
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#if the network is not connected
if [ $nbnode -eq $nbseg2 ] ; then
	#we extract the nodes of the lines
	v.to.points -n input=$INPUT output="$INPUT"_nettmp2 type=line  --q 2>>~/$LOGFILE
	g.copy vect="$INPUT"_nettmp2,"$INPUT"_nettmp3 --q 2>>~/$LOGFILE
	v.distance -a from="$INPUT"_nettmp2 to="$INPUT"_nettmp3 from_layer=2 to_layer=2 from_type=point to_type=point upload=dist,to_attr column=toto,lcat to_column=lcat --q > $TMP.${PROG}.5 2>>~/$LOGFILE
	grep -v "0.000000" $TMP.${PROG}.5 > $TMP.${PROG}.6 2>>~/$LOGFILE
	echo "`cat $TMP.${PROG}.6`" |awk -F"|" '{OFS=" "; ORS="\n"; $1 = $1; print $0}' > $TMP.${PROG}.7 2>>~/$LOGFILE
	m.tripl --input=$TMP.${PROG}.7 --output=$TMP.${PROG}.8 --col=1 2>>~/$LOGFILE
	head -n 5 $TMP.${PROG}.8 |cut -d" " -f3 |sort -k1g > $TMP.${PROG}.9 2>>~/$LOGFILE
	uniq -u $TMP.${PROG}.9 > $TMP.${PROG}.10 2>>~/$LOGFILE
	uniq -d $TMP.${PROG}.9 >> $TMP.${PROG}.10 2>>~/$LOGFILE
        g.message message=" "
	g.message -w message="The network isn't connected, please check it"
	g.message -w message="Maybe check the following segments (category identifiant):"
	echo "`cat $TMP.${PROG}.10`"
	g.message  message=" "
	cleanup
	exit 2
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#loop research
v.type input="$INPUT"_nettmp output="$INPUT"_nettmp4 type=line,boundary  --q 2>>~/$LOGFILE
v.centroids input="$INPUT"_nettmp4 output="$INPUT"_nettmp5  --q 2>>~/$LOGFILE
#extraction of the polygons
v.extract input="$INPUT"_nettmp5 output="$INPUT"_nettmp6 type=area  --q 2>>~/$LOGFILE
m.testtype2 input="$INPUT"_nettmp6 >$TMP.${PROG}.11 2>>~/$LOGFILE
typeset -i nbcycle
nbcycle=`cat $TMP.${PROG}.11`
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
if [ $nbcycle -ne 0 ];then

	v.select ainput="$INPUT" atype=line binput="$INPUT"_nettmp6 btype=area output="$INPUT"_nettmp7 --q 2>>~/$LOGFILE
	v.db.select -c map="$INPUT"_nettmp7 column=cat nv=0 --quiet > $TMP.${PROG}.12 2>>~/$LOGFILE

	#we will see if loop are not die to duplicate lines
	#in this case area are < than 1 units
	v.db.addcol map="$INPUT"_nettmp6 columns="area DOUBLE PRECISION" --q 2>>~/$LOGFILE
	v.to.db map="$INPUT"_nettmp6 option=area units=me column=area --q 2>>~/$LOGFILE
	v.db.select -c map="$INPUT"_nettmp6 column=cat fs=" " nv=0 where="area < 1" --q > $TMP.${PROG}.13 2>>~/$LOGFILE
	if [ -s "$TMP.${PROG}.13" ];then
		v.extract input="$INPUT"_nettmp6 output="$INPUT"_nettmp8 list=`cat $TMP.${PROG}.13`  --q 2>>~/$LOGFILE
		v.select ainput="$INPUT" atype=line binput="$INPUT"_nettmp8 btype=area output="$INPUT"_nettmp9 --q 2>>~/$LOGFILE
		v.db.select -c map="$INPUT"_nettmp9 column=cat nv=0 --q > $TMP.${PROG}.14 2>>~/$LOGFILE
	fi	
	
	g.message message=" "
	g.message -w message="The network has `cat $TMP.${PROG}.11` cycle(s) "
	g.message -w message="Please check on the $INPUT vector the followings category segments to eliminate the cycles:"
	echo "`cat $TMP.${PROG}.12`"
	if [ -s "$TMP.${PROG}.13" ];then
		g.message -w message="It seems that these segments are duplicate segments"
		g.message -w message="Please check it"
		echo "`cat $TMP.${PROG}.14`"
		g.remove vect="$INPUT"_nettmp8,"$INPUT"_nettmp9 --q 2>>~/$LOGFILE
	fi


	g.message message=" " 
	cleanup
	exit 2
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

g.rename vect="$INPUT"_nettmp,$OUTPUT --q 2>/dev/null
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
cleanup
g.message message=" "
g.message message="   --> Everything seems ok !"
g.message message=" " 
exit 0
