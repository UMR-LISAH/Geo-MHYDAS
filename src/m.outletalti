#!/bin/bash
############################################################################
#
# MODULE:       m.outletalti
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Outlet identification of a network (oriented or NOT) by DEM
# REQUIREMENTS: m.testtype
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: Outlet identification of a network (oriented or NOT) by DEM
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input line vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: dem
#% type: string
#% gisprompt: old,cell,raster
#% description: Input DEM raster name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: file
#% type: string
#% description: output file name (outlet ID)
#% required : yes
#%END
   
eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
DEM="$GIS_OPT_DEM"
FILE="$GIS_OPT_FILE"


#GRASS testing
if  [ -z "$GISBASE" ]
then
  echo ""
  echo "You must start GRASS to launch this program"
  echo ""
  exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

#awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=8;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_outlettmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
  
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



#dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi



#test if input temporary vector map already exist
g.mlist type=vect pattern="$INPUT"_outlettmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_outlettmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

# test if input exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.2

#if input vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "line" ] ; then
	g.message -e message="<$INPUT> doesn't exist or isn't a vector line !!"
	cleanup
	exit 2
fi

#test if input DEM raster exists
g.findfile element=cell mapset=${MAPSET?} file=${DEM} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -e message="<$DEM> raster not found !!"
  cleanup
  exit 2
fi


#transformation of the line vector map into a point vector map with x, y coordinate calculation 
v.to.points input=$INPUT type=line output="$INPUT"_outlettmp1 --q 2>>~/$LOGFILE
v.db.addcol map="$INPUT"_outlettmp1 layer=2 columns="x DOUBLE PRECISION, y DOUBLE PRECISION"  --q 2>>~/$LOGFILE
v.to.db map="$INPUT"_outlettmp1 layer=2 option=coor column=x,y  --q  2>>~/$LOGFILE
v.db.select -c map="$INPUT"_outlettmp1 layer=2 column=cat,lcat,x,y fs=" " nv=0 --q > $TMP.${PROG}.3 2>>~/$LOGFILE

#in grass 6.2, v.to.points command seems to create a third point (centroid for a segment
#in grass 6.3, v.to.points command seems not to create this point
#but we keep a security to remove this potential third point
v.category input=$INPUT type=line option=print --q > $TMP.${PROG}.4  2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
for p in `cat $TMP.${PROG}.4`;do
	varp=$p
	awk -F" " < $TMP.${PROG}.3 '$2=='$varp'' > $TMP.${PROG}.5 2>>~/$LOGFILE
	head -n 1 $TMP.${PROG}.5 >> $TMP.${PROG}.6 2>>~/$LOGFILE
	tail -n 1 $TMP.${PROG}.5 >> $TMP.${PROG}.6 2>>~/$LOGFILE
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi

done

#we keep only the uniq nodes, they are the nodes which are in contact with only one segment
sort -k3g -k4g $TMP.${PROG}.6 | uniq -u -f2 > $TMP.${PROG}.7 2>>~/$LOGFILE
echo "`cat $TMP.${PROG}.7`" |awk -F" " 'BEGIN { FS=" "; ORS="\n"} {print $2, $1, $3, $4}' >$TMP.${PROG}.8 2>>~/$LOGFILE

#creation of the point vector map 
v.in.ascii input=$TMP.${PROG}.8 output="$INPUT"_outlettmp2 format=point columns="cat INTEGER, label INTEGER, x DOUBLE PRECISION,y DOUBLE PRECISION" fs=" " x=3 y=4 cat=1 --q 2>>~/$LOGFILE

v.db.addcol map="$INPUT"_outlettmp2 layer=1 columns="z DOUBLE PRECISION"  --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#we store the altitude from the DEM raster
#g.region rast=$DEM  --q 2>>~/$LOGFILE
g.region vect="$INPUT"_outlettmp2  --q 2>>~/$LOGFILE
v.what.rast vector="$INPUT"_outlettmp2 raster=$DEM layer=1 column=z  --q 2>>~/$LOGFILE
g.region -d --q 2>>~/$LOGFILE
# we take the point with the lowest altitude and we put its cat in FILE
v.db.select -c map="$INPUT"_outlettmp2 layer=1 column=cat,z fs=" " nv=0 --q |sort -k2g |head -n 1 |cut -d" " -f1  > "$FILE" 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#cleanup procedure
cleanup
exit 0
