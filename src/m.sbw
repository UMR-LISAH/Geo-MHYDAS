#!/bin/bash
############################################################################
#
# MODULE:       m.sbw
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      subwatershed calculation program with hydrological network influence
# REQUIREMENTS: m.testtype,m.compfloatpl,m.flowdirline, m.burn, m.asciipoint
#                m.point, m.pointline, m.inlet, m.sbwhole, v.out.ascii.db
#               m.asciipointpl,m.splicepl,m.invtripl,m.tripl,m.projectpl,
#               m.compaltipl
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#%  description: subwatershed calculation program with hydrological network influence
#% keywords : subwatershed, network influence, burning stream method, modifying flowdir method
#%END
#%flag
#% key: b
#% description: use burning stream method ; Value of digging in option 'burn'; default is no
#%END
#%flag
#% key: f
#% description: use modifying flowdir method ; default is no
#%END
#%flag
#% key: a
#% description: use of ascii coordinate point file for basin outlets; file name in option 'file' (see file option for the file format); default is no
#%END
#%flag
#% key: v
#% description: use of point vector for basin outlets; vector name in option 'point'; default is no 
#%END
#%flag
#% key: c
#% description: smoothing corners of subwatershed features; default is no
#%END
#%flag
#% key: i
#% description: use stream inlets to create basin; default is no
#%END
#%flag
#% key: s
#% description: use stream confluence nodes to create basin outlets; default is no
#%END
#%option
#% key: dem
#% type: string
#% gisprompt: old,cell,raster
#% description: Input DEM raster
#% key_desc : name
#% required : yes
#%END
#%option
#% key: watershed
#% type: string
#% gisprompt: old,cell,raster
#% description: Input watershed raster
#% key_desc : name
#% required : yes
#%END
#%option
#% key: stream
#% type: string
#% gisprompt: old,vector,vector
#% description: Input network vector
#% key_desc : name
#% required : yes
#%END
#%option
#% key: sbv
#% type: string
#% gisprompt: new,vector,vector
#% description: Output subwatersheds name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: point
#% type: string
#% gisprompt: old,vector,vector
#% description: Input outlet points vector
#% key_desc : name
#% required : no
#%END
#%option
#% key: file 
#% type: string
#% description: Name of ascii coordinate point file for basin outlets (without intitulate column, field separator is 'space', col1 x and col2 y) 
#% required : no
#%END
#%option
#% key: burn
#% type: double
#% description: Value of digging for the burning stream method 
#% required : no
#%END
#%option
#% key: area
#% type: double
#% description: min area (in map units) value for the subwatershed
#% required : yes
#%END
#%option
#% key: res
#% type: double
#% description: raster resolution 
#% required : no
#%END
#%option
#% key: col
#% type: string
#% description: column name for subwatershed identification
#% required : yes
#%END
#%option
#% key: percent
#% type: double
#% description: percentage of zero value accepted for subwatershed creation (area difference with watershed) 
#% required : yes
#%END
#%option
#% key: snap
#% type: double
#% description: distance (in map units) to snap outlet point to stream (default is 1)
#% required : no
#%END




eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi


if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

MNT="$GIS_OPT_DEM"
SBV="$GIS_OPT_SBV"
STREAM="$GIS_OPT_STREAM"
POINT="$GIS_OPT_POINT"
FILE="$GIS_OPT_FILE"
BURN="$GIS_OPT_BURN"
AREA="$GIS_OPT_AREA"
RES="$GIS_OPT_RES"
COL="$GIS_OPT_COL"
BV="$GIS_OPT_WATERSHED"
PERCENT="$GIS_OPT_PERCENT"
SNAP="$GIS_OPT_SNAP"

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   rm -f $TMP.${PROG}
   for ((u=1;u<=14;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$SBV"_sbwtmp* --q
  g.mremove -f rast="$MNT"_sbwtmp* --q
  g.mremove -f vect="$MNT"_sbwtmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.flowdirline`" ];then
  g.message -e message="m.flowdirline subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.compfloatpl`" ];then
  g.message -e message="m.compfloatpl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.burn`" ];then
  g.message -e message="m.burn subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.asciipoint`" ];then
  g.message -e message="m.asciipoint subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.point`" ];then
  g.message -e message="m.point subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.pointline`" ];then
  g.message -e message="m.pointline subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.inlet`" ];then
  g.message -e message="m.inlet subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.sbwhole`" ];then
  g.message -e message="m.sbwhole subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.out.ascii.db`" ];then
  g.message -e message="v.out.ascii.db subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.asciipointpl`" ];then
  g.message -e message="m.asciipointpl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.splicepl`" ];then
  g.message -e message="m.splicepl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.invtripl`" ];then
  g.message -e message="m.invtripl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.tripl`" ];then
  g.message -e message="m.tripl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.projectpl`" ];then
  g.message -e message="m.projectpl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.compaltipl`" ];then
  g.message -e message="m.compaltipl subscript required, please install it first"
  exit 2
fi

#test if SBV vector map already exists
eval `g.findfile element=vector file="$SBV" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$SBV> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$SBV>  already exists and will be overwritten"
  fi
fi



#test if SBV vector name is allowed
v.in.region output=$SBV --q  |grep -v "SQL" 2>$TMP.${PROG}.14
	
if [ -s "$TMP.${PROG}.14" ];then
	g.message -w message="Illegal vector map name <$SBV>" 1>&2
    exit 2
else
	g.remove vect=$SBV --q  
fi




#test if input temporary vector map already exist

g.mlist type=vect pattern="$SBV"_sbwtmp*  > $TMP.${PROG}
if [ -s "$TMP.${PROG}" ];then
  g.message -w message="<$SBV>_sbwtmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

#test if input temporary raster map already exist

g.mlist type=rast pattern="$MNT"_sbwtmp*  > $TMP.${PROG}.3
if [ -s "$TMP.${PROG}.3" ];then
  g.message -w message="<$MNT>_sbwtmp name for temporay raster files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

#test if STREAM vector map exists

g.findfile element=vector mapset=${MAPSET?} file=${STREAM} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$STREAM> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$STREAM > $TMP.${PROG}.1
#if stream vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "line" ] ; then
	g.message -e message="<$STREAM> doesn't exist or isn't a vector line !!"
	cleanup
	exit 2
fi

#test if BV raster map exists
g.findfile element=cell mapset=${MAPSET?} file=${BV} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$BV> doesn't exist !"
 cleanup
 exit 2
fi

# test if DEM raster map exists
g.findfile element=cell mapset=${MAPSET?} file=${MNT} > /dev/null
if [ $? -ne 0 ] ; then
	g.message -e message="<$MNT> not found !!"
	cleanup
	exit 2
fi

#test flags securities
#test if no options choosen : no A no V no I no sS
if [ $GIS_FLAG_V -ne 1 ] && [ $GIS_FLAG_I -ne 1 ] && [ $GIS_FLAG_A -ne 1 ] && [ $GIS_FLAG_S -ne 1 ] ;then
  g.message -e message="No option choosen for basin outlets !!"
  cleanup
  exit 2
fi

#test if two options: V and A
if [ $GIS_FLAG_V -eq 1 ] && [ $GIS_FLAG_A -eq 1 ] ;then
  g.message message="Two options choosen for basin outlets !!"
  cleanup
  exit 2
fi

#b et f en même temps#test if two options: B and F
if [ $GIS_FLAG_B -eq 1 ] && [ $GIS_FLAG_F -eq 1 ] ;then
  g.message -e message="Two options choosen for flow directions computing !!"
  cleanup
  exit 2
fi

# test if vector map POINT exists
if [ $GIS_FLAG_V -eq 1 ] && [ -z `echo "$POINT"` ];then
  g.message message="No file point for basin outlets !!"
  cleanup
  exit 2
fi

if [ $GIS_FLAG_V -eq 1 ];then
	g.findfile element=vector mapset=${MAPSET?} file=${POINT} > /dev/null
	if [ $? -ne 0 ] ; then
 		g.message -e message="<$POINT> vector doesn't exist !"
		cleanup
 		exit 2
	else
		m.testtype input=$POINT > $TMP.${PROG}.2
		#if POINT vector map is not a point vector, exit program
		if [ "`cat $TMP.${PROG}.2`" != "point" ] ; then
			g.message -e message="<$POINT> doesn't exist or isn't a vector point !!"
			cleanup
			exit 2
		fi
	fi
fi

# test if FILE file exists
if [ $GIS_FLAG_A -eq 1 ] && [ -z `echo "$FILE"` ];then
  g.message -e message="No ascii file for basin outlets !!"
  cleanup
  exit 2
fi


# test if FILE file exists
if [ $GIS_FLAG_A -eq 1 ];then
	if [ ! -e "$FILE" ];then
		g.message -e message="<$FILE> doesn't exist !!"
		cleanup
		exit 2
	fi
fi

#test if BURN is alphanumeric or numeric 

if [ $GIS_FLAG_B -eq 1 ];then
	if [ -z "$BURN" ];then
		g.message -e message="Value of digging for burning methode is Null !!"
		cleanup
		exit 2
	else
		if [ "`echo $BURN |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
			g.message -e message="Value of digging for burning methode isn't numeric !!"
			cleanup
			exit 2
		fi
		if [ "`echo $BURN |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
			g.message -e message="Value of digging for burning methode isn't numeric !!"
			cleanup
			exit 2
		fi
	fi
fi

#test if AREA is alphanumeric or numeric 
if [ "`echo $AREA |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
	g.message -e message="Min area value isn't numeric !!"
	cleanup
	exit 2
fi
if [ "`echo $AREA |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="Min area value isn't numeric !!"
	cleanup
	exit 2
fi

#test if RES is alphanumeric or numeric 
if [ ! -z "$RES" ];then
	if [ "`echo $RES |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
		g.message -e message="Resolution pixel value isn't numeric !!"
		cleanup
		exit 2
	fi

	if [ "`echo $RES |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="Resolution pixel value isn't numeric !!"
		cleanup
		exit 2
	fi
fi

#test if PERCENT is alphanumeric or numeric 
if [ "`echo $PERCENT |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
	g.message -e message="Ratio zero value isn't numeric !!"
	cleanup
	exit 2
fi
if [ "`echo $PERCENT |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="Ratio zero value isn't numeric !!"
		cleanup
		exit 2
fi
m.compfloatpl --val1=$PERCENT --sign="<=" --val2=100 > $TMP.${PROG}.3
if [ ! -s "$TMP.${PROG}.3" ];then
	g.message -e message="Percent value is superior at 100 !!"
	cleanup
	exit 2
fi

#test if COL is alphanumeric
if [ "`echo $COL |grep "[[:alpha:]]" | wc -c`" = "0" ] ;then
	g.message -e message="Column name for col parameter isn't alphanumeric !!"
	cleanup
	exit 2
fi

#test if SNAP is alphanumeric or numeric 
if [ ! -z "$SNAP" ];then
	if [ "`echo $SNAP |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
		g.message -e message="SNAP Distance value isn't numeric !!"
		cleanup
		exit 2
	fi
	if [ "`echo $SNAP |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="SNAP Distance value isn't numeric !!"
		cleanup
		exit 2
	fi
fi

#SNAP value equal 1, if SNAP value empty
if [ -z "$SNAP" ];then
  SNAP=1
fi


g.copy rast=$MNT,"$MNT"_sbwtmp --q 2>>~/$LOGFILE
g.region rast=$MNT --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#flowdirection creation by modified flowdirection 
if [ $GIS_FLAG_F -eq 1 ];then
	if [ ! -z "$RES" ];then
		m.flowdirline input=$STREAM dem="$MNT"_sbwtmp dir="$MNT"_sbwtmp2 res=$RES 2>>~/$LOGFILE
	else 
		m.flowdirline input=$STREAM dem="$MNT"_sbwtmp dir="$MNT"_sbwtmp2 2>>~/$LOGFILE
	fi
else
	#flowidrection creation by burning method
	if [ $GIS_FLAG_B -eq 1 ];then
		if [ ! -z "$RES" ];then
			m.burn  dem="$MNT"_sbwtmp output="$MNT"_sbwtmp3 dir="$MNT"_sbwtmp2 network=$STREAM burn=$BURN res=$RES 2>>~/$LOGFILE
		else
			m.burn  dem="$MNT"_sbwtmp output="$MNT"_sbwtmp3 dir="$MNT"_sbwtmp2 network=$STREAM burn=$BURN 2>>~/$LOGFILE
		fi
		g.remove rast="$MNT"_sbwtmp3 --q 2>>~/$LOGFILE
	else
		#flowdirection creation without burn and without modified flow direction
		if [ ! -z "$RES" ];then
			g.region res=$RES --q 2>>~/$LOGFILE
		fi

		r.watershed elevation=$MNT drainage="$MNT"_sbwtmp2 --q 2>>~/$LOGFILE


	fi
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#we store outlet points of the user if they exist

#we store outlet points from the ascii file
if [ $GIS_FLAG_A -eq 1 ];then
	m.asciipoint file=$FILE output="$SBV"_sbwtmp 2>>~/$LOGFILE
else
	#we store outlet points from the point vector map
	if [ $GIS_FLAG_V -eq 1 ];then
		m.point input=$POINT output="$SBV"_sbwtmp 2>>~/$LOGFILE
	
	fi

fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

#we verifiy that the points are in contact with the network
#if not, we snap
if [ -e "$GISDBASE/$LOCATION_NAME/$MAPSET/dbf/"$SBV"_sbwtmp.dbf" ];then
  
  m.pointline point="$SBV"_sbwtmp line=$STREAM output="$SBV"_sbwtmp2 snap=$SNAP 2>>~/$LOGFILE
  
  if [ -e "$GISDBASE/$LOCATION_NAME/$MAPSET/dbf/"$SBV"_sbwtmp2.dbf" ];then
    g.remove vect="$SBV"_sbwtmp --q 2>>~/$LOGFILE
    g.rename vect="$SBV"_sbwtmp2,"$SBV"_sbwtmp --q 2>>~/$LOGFILE
  fi

fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
if [ $GIS_FLAG_I -eq 1 ];then
	#we store the inlet points
	m.inlet input=$STREAM dem=$MNT output="$SBV"_sbwtmp3 2>>~/$LOGFILE

	#adding the outlet points
	if [ -e "$GISDBASE/$LOCATION_NAME/$MAPSET/dbf/"$SBV"_sbwtmp.dbf" ];then
		v.patch -e input="$SBV"_sbwtmp3,"$SBV"_sbwtmp output="$SBV"_sbwtmp4 --q 2>>~/$LOGFILE
		g.remove vect="$SBV"_sbwtmp3,"$SBV"_sbwtmp --q 2>>~/$LOGFILE
	else
		g.rename vect="$SBV"_sbwtmp3,"$SBV"_sbwtmp4 --q 2>>~/$LOGFILE
	fi
else
        #if "$SBV"_sbwtmp exists , we rename it
	if [ -e "$GISDBASE/$LOCATION_NAME/$MAPSET/dbf/"$SBV"_sbwtmp.dbf" ];then
		g.rename vect="$SBV"_sbwtmp,"$SBV"_sbwtmp4 --q 2>>~/$LOGFILE
	fi
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
if [ $GIS_FLAG_S -eq 1 ];then
  #we store the confluence nodes to make them outlet points
  #they are the points in contact with more than two lines 
  v.to.points -n input=$STREAM output="$SBV"_sbwtmp20 type=line  --q 2>>~/$LOGFILE
  v.out.ascii input="$SBV"_sbwtmp20 output=$TMP.${PROG}.13 format=point --q 2>>~/$LOGFILE
  sort -t"|" -k1,2g $TMP.${PROG}.13|cut -d"|" -f1,2 |uniq -d > $TMP.${PROG}.14 2>>~/$LOGFILE
  
  v.in.ascii -n input=$TMP.${PROG}.14 output="$SBV"_sbwtmp21 format=point  --q 2>>~/$LOGFILE
  v.distance -a from="$SBV"_sbwtmp21 from_type=point to=$STREAM to_type=line dmax=0.5 upload=cat column=catto  --q |cut -d"|" -f1 |sort -k1g > $TMP.${PROG}.16 2>>~/$LOGFILE
  #we keep only the points which are presents more than twice 
  uniq -c $TMP.${PROG}.16> $TMP.${PROG}.17 2>>~/$LOGFILE
  echo "`cat $TMP.${PROG}.17`" |awk -F" " '{OFS="|"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.18 2>>~/$LOGFILE
  grep -v "^1|" $TMP.${PROG}.18|grep -v "^2|" |cut -d"|" -f2 > $TMP.${PROG}.19 2>>~/$LOGFILE
  v.extract input="$SBV"_sbwtmp21 output="$SBV"_sbwtmp22 file=$TMP.${PROG}.19  --q 2>>~/$LOGFILE
  m.point input="$SBV"_sbwtmp22 output="$SBV"_sbwtmp23 2>>~/$LOGFILE
   # if "$SBV"_sbwtmp4  exists, wa patch it and rename it 
	if [ -e "$GISDBASE/$LOCATION_NAME/$MAPSET/dbf/"$SBV"_sbwtmp4.dbf" ];then
		v.patch -e input="$SBV"_sbwtmp23,"$SBV"_sbwtmp4 output="$SBV"_sbwtmp24 --q 2>>~/$LOGFILE
		 g.remove vect="$SBV"_sbwtmp4 --q 2>>~/$LOGFILE
		 g.rename vect="$SBV"_sbwtmp24,"$SBV"_sbwtmp4 --q 2>>~/$LOGFILE
	else	
		g.rename vect="$SBV"_sbwtmp23,"$SBV"_sbwtmp4 --q 2>>~/$LOGFILE
	fi
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi




# if no  "$SBV"_sbwtmp4, exit program
if [ ! -e "$GISDBASE/$LOCATION_NAME/$MAPSET/dbf/"$SBV"_sbwtmp4.dbf" ];then
	g.message -e message="There are no outlet basin points"
	cleanup
        exit 2
fi

#subwatersheds calculation
#we store the x y coordinates of the outlet points
v.out.ascii.db input="$SBV"_sbwtmp4 output=$TMP.${PROG}.5 columns=cat 2>/dev/null

if [ ! -z "$RES" ];then
	g.region res=$RES --q 2>>~/$LOGFILE
fi

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

# calling m.sbwhole script for filling the sinks
if [ ! -z "$RES" ];then
	m.sbwhole drainage="$MNT"_sbwtmp2 watershed=$BV subwatershed=$SBV file=$TMP.${PROG}.5 res=$RES percent=$PERCENT error=$TMP.${PROG}.6 2>>~/$LOGFILE
else
	m.sbwhole drainage="$MNT"_sbwtmp2 watershed=$BV subwatershed=$SBV file=$TMP.${PROG}.5 percent=$PERCENT error=$TMP.${PROG}.6 2>>~/$LOGFILE
fi

if [ -s "$TMP.${PROG}.6" ];then
  g.message -e message="Basin creation impossible !"
  cleanup
  exit 2
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

typeset -i b
b=1

for a in `cat $TMP.${PROG}.5`;do
	
	r.water.outlet --q drainage="$MNT"_sbwtmp2 basin="$MNT"_sbwtmp_bv_"$b" easting=`echo "$a"|cut -d"|" -f2` northing=`echo "$a"|cut -d"|" -f3` 2>>~/$LOGFILE
	echo ""$MNT"_sbwtmp_bv_"$b"">> $TMP.${PROG}.7 2>>~/$LOGFILE
    if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi 

#subwatershed vector maps creation
      if [ $GIS_FLAG_C -eq 1 ]
      then
        r.to.vect -s input="$MNT"_sbwtmp_bv_"$b" output="$MNT"_sbwtmp_bv_"$b"_tmp feature=area  --q 2>>~/$LOGFILE
        
        v.extract input="$MNT"_sbwtmp_bv_"$b"_tmp output="$MNT"_sbwtmp_bv_"$b"_tmp2 type=area where="value=1"  --q 2>>~/$LOGFILE

        v.db.update map="$MNT"_sbwtmp_bv_"$b"_tmp2 column=value value="$b"  --q 2>>~/$LOGFILE

        v.dissolve input="$MNT"_sbwtmp_bv_"$b"_tmp2 output="$MNT"_sbwtmp_bv_"$b"_tmp3 column=value  --q  2>>~/$LOGFILE

        v.category input="$MNT"_sbwtmp_bv_"$b"_tmp3 output="$MNT"_sbwtmp_bv_"$b"_tmp4 type=centroid option=del  --q 2>>~/$LOGFILE

        v.category input="$MNT"_sbwtmp_bv_"$b"_tmp4 output="$MNT"_sbwtmp_bv_"$b"_V type=centroid option=add  --q 2>>~/$LOGFILE

        echo ""$MNT"_sbwtmp_bv_"$b"_V">> $TMP.${PROG}.8 2>>~/$LOGFILE
        g.remove vect="$MNT"_sbwtmp_bv_"$b"_tmp,"$MNT"_sbwtmp_bv_"$b"_tmp2,"$MNT"_sbwtmp_bv_"$b"_tmp3,"$MNT"_sbwtmp_bv_"$b"_tmp4 --q  2>>~/$LOGFILE
      else
        r.to.vect input="$MNT"_sbwtmp_bv_"$b" output="$MNT"_sbwtmp_bv_"$b"_tmp feature=area  --q 2>>~/$LOGFILE

        v.extract input="$MNT"_sbwtmp_bv_"$b"_tmp output="$MNT"_sbwtmp_bv_"$b"_tmp2 type=area where="value=1" --q  2>>~/$LOGFILE

        v.db.update map="$MNT"_sbwtmp_bv_"$b"_tmp2 column=value value="$b"  --q 2>>~/$LOGFILE

        v.dissolve input="$MNT"_sbwtmp_bv_"$b"_tmp2 output="$MNT"_sbwtmp_bv_"$b"_tmp3 column=value  --q 2>>~/$LOGFILE

        v.category input="$MNT"_sbwtmp_bv_"$b"_tmp3 output="$MNT"_sbwtmp_bv_"$b"_tmp4 type=centroid option=del --q  2>>~/$LOGFILE

        v.category input="$MNT"_sbwtmp_bv_"$b"_tmp4 output="$MNT"_sbwtmp_bv_"$b"_V type=centroid option=add  --q 2>>~/$LOGFILE

        echo ""$MNT"_sbwtmp_bv_"$b"_V">> $TMP.${PROG}.8 2>>~/$LOGFILE
        g.remove vect="$MNT"_sbwtmp_bv_"$b"_tmp,"$MNT"_sbwtmp_bv_"$b"_tmp2,"$MNT"_sbwtmp_bv_"$b"_tmp3,"$MNT"_sbwtmp_bv_"$b"_tmp4 --q 2>>~/$LOGFILE
	fi

	b="$b"+1
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
done

echo "`cat $TMP.${PROG}.7`" | awk '{ OFS = "," ; ORS = ","; $1 = $1; print $0 }' > $TMP.${PROG}.9 2>>~/$LOGFILE
echo "`cat $TMP.${PROG}.8`" | awk '{ OFS = "," ; ORS = ","; $1 = $1; print $0 }' > $TMP.${PROG}.10 2>>~/$LOGFILE

wc -l $TMP.${PROG}.8 |cut -d" " -f1 > $TMP.${PROG}.11 2>>~/$LOGFILE
typeset -i nbliste100
nbliste100=`cat $TMP.${PROG}.11`

if [ "$nbliste100" = "1" ]
then
	g.copy vect=`cat $TMP.${PROG}.8`,"$SBV"_sbwtmp4a --q 2>>~/$LOGFILE
else
	v.patch input=`cat $TMP.${PROG}.10` output="$SBV"_sbwtmp4a --q 2>>~/$LOGFILE
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
v.category input="$SBV"_sbwtmp4a output="$SBV"_sbwtmp5 type=boundary option=add --q 2>>~/$LOGFILE
v.extract input="$SBV"_sbwtmp5 output="$SBV"_sbwtmp6 type=boundary --q 2>>~/$LOGFILE
v.type input="$SBV"_sbwtmp6 output="$SBV"_sbwtmp7 type=boundary,line --q 2>>~/$LOGFILE
v.clean input="$SBV"_sbwtmp7 output="$SBV"_sbwtmp8a type=line tool=snap,break,rmdupl thresh=0.05 --q 2>>~/$LOGFILE
v.build.polylines input="$SBV"_sbwtmp8a output="$SBV"_sbwtmp8 cats=no  --q 2>>~/$LOGFILE
v.type input="$SBV"_sbwtmp8 output="$SBV"_sbwtmp9 type=line,boundary --q 2>>~/$LOGFILE
v.category input="$SBV"_sbwtmp9 output="$SBV"_sbwtmp10 type=boundary option=add --q 2>>~/$LOGFILE
v.centroids input="$SBV"_sbwtmp10 output="$SBV"_sbwtmp11 --q 2>>~/$LOGFILE
v.category input="$SBV"_sbwtmp11 output="$SBV"_sbwtmp12 type=boundary option=del --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

if [ ! -z "$RES" ];then
	#small subwatersheds cleaning 
	typeset -i nb
	typeset -i nb2
	nb=$RES
	nb2=$nb*$nb
	v.clean input="$SBV"_sbwtmp12 output="$SBV"_sbwtmp13 tool=rmarea,bpol thresh=$nb2 --q 2>>~/$LOGFILE
else
	g.copy vect="$SBV"_sbwtmp12,"$SBV"_sbwtmp13 --q 2>>~/$LOGFILE
fi
v.clean input="$SBV"_sbwtmp13 output="$SBV"_sbwtmp14 tool=rmarea,bpol thresh=$AREA --q 2>>~/$LOGFILE

v.category input="$SBV"_sbwtmp14 output="$SBV"_sbwtmp15 type=centroid option=del --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
v.category input="$SBV"_sbwtmp15 output=$SBV type=centroid option=add --q 2>/dev/null
v.db.addtable map=$SBV columns="$COL INTEGER" --q 2>>~/$LOGFILE

v.db.select -c map=$SBV column=cat --q > $TMP.${PROG}.12  2>>~/$LOGFILE
typeset -i nbsbw
nbsbw=1
for sb in `cat $TMP.${PROG}.12`;do
	v.db.update map=$SBV column=$COL value=$nbsbw where="cat=$sb" --q 2>>~/$LOGFILE
	nbsbw=$nbsbw+1
done


g.region rast=$MNT --q 2>>~/$LOGFILE
 if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
cleanup
exit 0

