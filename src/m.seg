#!/bin/bash
############################################################################
#
# MODULE:       m.seg
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Segmentation Procedure (areal an linear entities)
# REQUIREMENTS: m.testtype, m.splicepl, m.lineoverlay, v.line.center
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#
#############################################################################
#%Module
#%  description: Segmentation Procedure
#% keywords : vector, segmentation, overlay, hierarchical order
#%END
#%flag
#% key: i
#% description: intersection overlay (default is union overlay)
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input vector names (name separated by comma ','; in hierarchical order)
#% key_desc : name
#% multiple : yes
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: snap
#% type: double
#% description: Snap value in map units; default is 1
#% required : no
#%END
#%option
#% key: id
#% type: string
#% description: Column Name of the ID for each vector map (name separated by comma ','; in hierarchical order)
#% required : yes
#% multiple : yes
#%END
#%option
#% key: output_id
#% type: string
#% description: id column Name for the output vector; default is 'SELF_ID'
#% required : no
#%END



eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
SNAP="$GIS_OPT_SNAP"
ID="$GIS_OPT_ID"
OUTPUT_ID="$GIS_OPT_OUTPUT_ID"

if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
  for ((u=1;u<=25;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$OUTPUT"_segtmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.splicepl`" ];then
  g.message -e message="m.splicepl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.lineoverlay`" ];then
  g.message -e message="m.lineoverlay subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.line.center`" ];then
  g.message -e message="v.line.center subscript required, please install it first"
  exit 2
fi

#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi

#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.25
	
if [ -s "$TMP.${PROG}.25" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi




#test if output temporary vector map already exist
g.mlist type=vect pattern="$OUTPUT"_segtmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$OUTPUT>_segtmp name for temporay file is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

#test SNAP value alphanumeric or numeric
if [ ! -z "$SNAP" ];then
	if [ "`echo $SNAP |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
		g.message -e message="SNAP Distance value isn't numeric !!"
		cleanup
		exit 2
	fi
	if [ "`echo $SNAP |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="SNAP Distance value isn't numeric !!"
		cleanup
		exit 2
	fi

fi

#SNAP equal 1, if SNAP empty
if [ -z "$SNAP" ];then
  SNAP=1
fi

#test OUTPUT_ID value
if [ ! -z "$OUTPUT_ID" ];then
	if [ "$OUTPUT_ID" = "cat" ];then
		g.message -e message="<output_id> can't be <cat> !!"
		cleanup
		exit 2	
	fi
	if [ "`echo $OUTPUT_ID |grep "[[:alpha:]]" | wc -c`" = "0" ] ;then
		g.message -e message="<$OUTPUT_ID> Name isn't alaphanumeric !!"
		cleanup
		exit 2
	fi
fi



#test for each input
echo "$INPUT" | awk -F"," '{ OFS = "\n" ; ORS = "\n"; $1 = $1; print $0 }' > $TMP.${PROG}.2 
for a in `cat $TMP.${PROG}.2`;
do
  g.findfile element=vector mapset=${MAPSET?} file=${a} > /dev/null
  if [ $? -ne 0 ] ; then
    g.message -e message="<$a> vector doesn't exist "
    cleanup
    exit 2
  fi

  #input vector map can not be a point map 
  m.testtype input=$a > $TMP.${PROG}.3
  resulttype=`cat $TMP.${PROG}.3`
  rm $TMP.${PROG}.3
  
  #if input is a point vector map, exit program
  if [ "$resulttype" = "point" ] ; then
    g.message -e message="<$a> is a vector point !!"
    cleanup
    exit 2
  fi
done

#test column ID value
echo "$ID" | awk -F"," '{ OFS = "\n" ; ORS = "\n"; $1 = $1; print $0 }' > $TMP.${PROG}.4
paste -d" " $TMP.${PROG}.2 $TMP.${PROG}.4 > $TMP.${PROG}.5
wc -l $TMP.${PROG}.5 |cut -d" " -f1 > $TMP.${PROG}.6
typeset -i nbseg1001
nbseg1001=`cat $TMP.${PROG}.6`

for ((u = 1; u <= $nbseg1001; u += 1))
do
  m.splicepl $u $TMP.${PROG}.5 > $TMP.${PROG}.7
  cut -d" " -f1 $TMP.${PROG}.7 > $TMP.${PROG}.8
  cut -d" " -f2 $TMP.${PROG}.7 > $TMP.${PROG}.9

  #the column can not be cat
 if [ "`cat $TMP.${PROG}.9`" = "cat" ];then
	g.message -e message="<ID> column for the vector layer <`cat $TMP.${PROG}.8`> can't be <cat> !!"
	cleanup
	exit 2
 fi
 
  #test character number on $TMP.${PROG}.9 : can not be more than 7
  if [ "`cat $TMP.${PROG}.9|wc -m`" -gt "8" ];then

    g.message -e message="The column name <`cat $TMP.${PROG}.9`> is too long (must be under 7 characters !!)"
    cleanup
    exit 2
  fi
  v.info --q -c map=`cat $TMP.${PROG}.8` |cut -d"|" -f2 > $TMP.${PROG}.10
  grep "^`cat $TMP.${PROG}.9`$" $TMP.${PROG}.10 > $TMP.${PROG}.11

  if [ ! -s "$TMP.${PROG}.11" ]; then
    g.message -e message="The column <`cat $TMP.${PROG}.9`> in the vector layer <`cat $TMP.${PROG}.8`> doesn't exist !!"
    cleanup
    exit 2
  fi
  rm -f $TMP.${PROG}.11
  v.info --q -c map=`cat $TMP.${PROG}.8` |grep "|`cat $TMP.${PROG}.9`$" |grep "^CHARACTER|" > $TMP.${PROG}.11
  
  
  
  if [ -s "$TMP.${PROG}.11" ]; then
    g.message -e message="The column <`cat $TMP.${PROG}.9`> in the vector layer <`cat $TMP.${PROG}.8`> is CHARACTER type !!"
    cleanup
    exit 2
  fi
  rm -f $TMP.${PROG}.7 $TMP.${PROG}.8 $TMP.${PROG}.9 $TMP.${PROG}.10 $TMP.${PROG}.11
  
  

done

rm -f $TMP.${PROG}.5
rm -f $TMP.${PROG}.6

#overlay process begin

wc -l $TMP.${PROG}.2 |cut -d" " -f1 > $TMP.${PROG}.12 2>>~/$LOGFILE
lines=`cat $TMP.${PROG}.12`
head -n 1 $TMP.${PROG}.2 > $TMP.${PROG}.13 2>>~/$LOGFILE
m.testtype input=`cat $TMP.${PROG}.13` > $TMP.${PROG}.14 2>>~/$LOGFILE
m.testtype input=`cat $TMP.${PROG}.13` >> $TMP.${PROG}.15 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
for ((i = 1; i < $lines; i += 1))
do

	typeset -i ii
	ii=$i+1
	m.splicepl $ii $TMP.${PROG}.2 > $TMP.${PROG}.16 2>>~/$LOGFILE
	m.testtype input=`cat $TMP.${PROG}.16` > $TMP.${PROG}.17 2>>~/$LOGFILE
	m.testtype input=`cat $TMP.${PROG}.16` >> $TMP.${PROG}.15 2>>~/$LOGFILE

	#two polygon vector maps
	if [ "`cat $TMP.${PROG}.14`" = "polygone" ] && [ "`cat $TMP.${PROG}.17`" = "polygone" ] ; then
		if [ $GIS_FLAG_I -eq 1 ];then
			v.overlay ainput=`cat $TMP.${PROG}.13` atype=area binput=`cat $TMP.${PROG}.16` btype=area output="$OUTPUT"_segtmp operator=and --q 2>/dev/null

		else
			v.overlay ainput=`cat $TMP.${PROG}.13` atype=area binput=`cat $TMP.${PROG}.16` btype=area output="$OUTPUT"_segtmp operator=or --q 2>/dev/null

		fi		
	#if it's other thing
	else

		m.lineoverlay input1=`cat $TMP.${PROG}.13` input2=`cat $TMP.${PROG}.16` output="$OUTPUT"_segtmp snap=$SNAP 2>>~/$LOGFILE
		if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi

	fi
	if [ -e $GISDBASE/$LOCATION_NAME/$MAPSET/dbf/"$OUTPUT"_segtmp2.dbf ];then 
		g.remove vect="$OUTPUT"_segtmp2 --q 2>>~/$LOGFILE
	fi
	g.rename vect="$OUTPUT"_segtmp,"$OUTPUT"_segtmp2 --q 2>>~/$LOGFILE
	echo ""$OUTPUT"_segtmp2" > $TMP.${PROG}.13 2>>~/$LOGFILE
	m.testtype input=`cat $TMP.${PROG}.13` > $TMP.${PROG}.14 2>>~/$LOGFILE
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
done

#cleaning polygons with area  Null
v.clean input="$OUTPUT"_segtmp2 output="$OUTPUT"_segtmp3 tool=rmarea thresh=0.001 --q 2>>~/$LOGFILE




#topology overkilling
v.out.ogr -c input="$OUTPUT"_segtmp3 type=area dsn=/tmp/ olayer="$OUTPUT"_segtmp4 --q 2>/dev/null

v.in.ogr -t dsn=/tmp/ output="$OUTPUT"_segtmp4 layer="$OUTPUT"_segtmp4 snap=$SNAP --q 2>/dev/null

g.remove vect="$OUTPUT"_segtmp3 --q 2>>~/$LOGFILE
rm -f /tmp/"$OUTPUT"_segtmp*

v.category input="$OUTPUT"_segtmp4 output="$OUTPUT"_segtmp5 type=centroid option=del  --q 2>>~/$LOGFILE
v.category --o input="$OUTPUT"_segtmp5 output="$OUTPUT"_segtmp4 type=centroid option=add --q 2>/dev/null
v.db.addtable map="$OUTPUT"_segtmp4 layer=1 --q 2>>~/$LOGFILE
g.remove vect="$OUTPUT"_segtmp5,"$OUTPUT"_segtmp2 --q 2>>~/$LOGFILE

v.category input="$OUTPUT"_segtmp4 output="$OUTPUT"_segtmp6 type=boundary option=del --q 2>>~/$LOGFILE
v.category input="$OUTPUT"_segtmp6 output="$OUTPUT"_segtmp7 type=boundary layer=2 option=add --q 2>>~/$LOGFILE

v.db.addtable map="$OUTPUT"_segtmp7 layer=2 --q 2>>~/$LOGFILE
v.category input="$OUTPUT"_segtmp6 output="$OUTPUT"_segtmp8 type=boundary layer=1 --q 2>>~/$LOGFILE

v.type input="$OUTPUT"_segtmp8 output="$OUTPUT"_segtmp9 type=boundary,line --q 2>>~/$LOGFILE


g.remove vect="$OUTPUT"_segtmp8 --q 2>>~/$LOGFILE

v.line.center input="$OUTPUT"_segtmp9 layer=1 output="$OUTPUT"_segtmp10 2>/dev/null
v.db.addtable map="$OUTPUT"_segtmp10 --q 2>>~/$LOGFILE
v.to.db map="$OUTPUT"_segtmp10 option=cat --q 2>/dev/null
# management of the attribut tables of OUTPUT_segtmp7 : layer 1  for the polygons
# and  OUTPUT_segtmp7 layer 2 for the lines

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

typeset -i h
h=1

for j in `cat $TMP.${PROG}.15`;
do

  m.splicepl $h $TMP.${PROG}.4 > $TMP.${PROG}.18 2>>~/$LOGFILE
  m.splicepl $h $TMP.${PROG}.2 > $TMP.${PROG}.19 2>>~/$LOGFILE
  if [ "$j" = "line" ];then
    v.db.addcol map="$OUTPUT"_segtmp10 layer=1 columns="`cat $TMP.${PROG}.18`_"$h" INTEGER" --q 2>>~/$LOGFILE
    v.db.addcol map="$OUTPUT"_segtmp7 layer=2 columns="`cat $TMP.${PROG}.18`_"$h" INTEGER" --q 2>>~/$LOGFILE
    
    v.distance --q from="$OUTPUT"_segtmp10 to=`cat $TMP.${PROG}.19` from_type=point to_type=line dmax=0.05 upload=to_attr column=`cat $TMP.${PROG}.18`_"$h" to_column=`cat $TMP.${PROG}.18` 2>>~/$LOGFILE
    v.db.select -c map="$OUTPUT"_segtmp10 column=cat,`cat $TMP.${PROG}.18`_"$h" where="`cat $TMP.${PROG}.18`_"$h"<>0" fs=,  --q > $TMP.${PROG}.20 2>>~/$LOGFILE

    for hh in `cat $TMP.${PROG}.20`;do
      echo "$hh" |cut -d"," -f1 > $TMP.${PROG}.21 2>>~/$LOGFILE
      echo "$hh" |cut -d"," -f2 > $TMP.${PROG}.22 2>>~/$LOGFILE
      v.db.update map="$OUTPUT"_segtmp7 layer=2 column=`cat $TMP.${PROG}.18`_"$h" value=`cat $TMP.${PROG}.22` where="cat=`cat $TMP.${PROG}.21`" --q   2>>~/$LOGFILE

    done
    else
      v.db.addcol map="$OUTPUT"_segtmp7 layer=1 columns="`cat $TMP.${PROG}.18`_"$h" INTEGER" --q 2>>~/$LOGFILE

      v.distance --q from="$OUTPUT"_segtmp7 to=`cat $TMP.${PROG}.19` from_type=centroid to_type=area dmax=0 upload=to_attr column=`cat $TMP.${PROG}.18`_"$h" to_column=`cat $TMP.${PROG}.18` 2>>~/$LOGFILE
    fi

  h=$h+1
	 if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi 
done

g.rename vect="$OUTPUT"_segtmp7,$OUTPUT --q 2>/dev/null
v.db.select -c map=$OUTPUT layer=1 column=cat  --q > $TMP.${PROG}.23 2>>~/$LOGFILE
if [ ! -z "$OUTPUT_ID" ];then
  v.db.addcol map=$OUTPUT layer=1 columns=""$OUTPUT_ID" INTEGER" --q 2>>~/$LOGFILE
  v.db.update map=$OUTPUT layer=1 column=$OUTPUT_ID qcol=cat --q 2>>~/$LOGFILE
  
else
  v.db.addcol map=$OUTPUT layer=1 columns="SELF_ID INTEGER" --q 2>>~/$LOGFILE
  v.db.update map=$OUTPUT layer=1 column=SELF_ID qcol=cat --q 2>>~/$LOGFILE
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#cleanup procedure
cleanup
exit 0
