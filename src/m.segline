#!/bin/bash
############################################################################
#
# MODULE:       m.segline
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      splitting linear entities by points
# REQUIREMENTS: m.testtype, m.point, m.asciipoint, m.splicepl,v.line.center
#               m.asciipointpl
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#%  description: splitting linear entities by points
#% keywords : vector, line, split
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: point
#% type: string
#% gisprompt: old,vector,vector
#% description: Input point vector
#% key_desc : name
#% required : no
#%END
#%option
#% key: file 
#% type: string
#% description: Input ascii point file (without intitulate column, field separator is 'space', col1 x and col2 y) 
#% required : no
#%END
#%option
#% key: snap
#% type: double
#% description: snap distance (in map units)
#% required : yes
#%END


eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
POINT="$GIS_OPT_POINT"
FILE="$GIS_OPT_FILE"
SNAP="$GIS_OPT_SNAP"


if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi


#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
    rm -f $TMP.${PROG}
    
   for ((u=1;u<=13;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_segltmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.point`" ];then
  g.message -e message="m.point subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.asciipoint`" ];then
  g.message -e message="m.asciipoint subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.splicepl`" ];then
  g.message -e message="m.splicepl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.line.center`" ];then
  g.message -e message="v.line.center subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.asciipointpl`" ];then
  g.message -e message="m.asciipointpl subscript required, please install it first"
  exit 2
fi


#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi


#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.13
	
if [ -s "$TMP.${PROG}.13" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi

#test if input temporary vector map already exist
g.mlist type=vect pattern="$INPUT"_segltmp*  > $TMP.${PROG}
if [ -s "$TMP.${PROG}" ];then
  g.message -w message="<$INPUT>_segltmp name for temporay file is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

# test if input exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -w  message="<$INPUT> not found"
  cleanup
   exit 2
fi


m.testtype input=$INPUT > $TMP.${PROG}.1

#if input vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "line" ] ; then
  g.message -e message="<$INPUT> isn't a vector line"
  cleanup
  exit 2
fi

# test if POINT  vector map exists
if [ ! -z "$POINT" ];then
  g.findfile element=vector mapset=${MAPSET?} file=${POINT} > /dev/null
  if [ $? -ne 0 ] ; then
  g.message -e message="<$POINT> vector doesn't exist !"
  cleanup
  exit 2
  fi
  
m.testtype input=$POINT > $TMP.${PROG}.2
#if input vector map is not a point vector, exit program
  if [ "`cat $TMP.${PROG}.2`" != "point" ] ; then
    g.message -e message="<$POINT> doesn't exist or isn't a vector point !!"
    cleanup
    exit 2
  fi
fi

#test FILE file
if [ ! -z "$FILE" ];then
  if [ ! -e "$FILE" ];then
    g.message -e message="<$FILE> doesn't exist  !!"
    cleanup
    exit 2
  fi
  if [ ! -s "$FILE" ];then
    g.message -e message="<$FILE> is empty  !!"
    cleanup
    exit 2
  fi

fi
g.region -d
#point file creation
if [ ! -z "$POINT" ];then
  m.point input=$POINT output="$INPUT"_segltmp1
  if [ $? == 1 ]; then
    g.message -e message="Problems on <$POINT> traitment!!"
    cleanup
    exit 2
  fi
else
  if [ ! -z "$FILE" ];then
    m.asciipoint file=$FILE output="$INPUT"_segltmp1
    if [ $? == 1 ]; then
      g.message -e message="Problems on <$FILE> traitment!!"
      cleanup
      exit 2
    fi
  else
    g.message -e message="No point file or no point vector choosen !!"
    cleanup
    exit 2
  fi
fi

#test SNAP value
if [ ! -z "$SNAP" ];then
	if [ "`echo $SNAP |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
		g.message -e message="SNAP Distance value isn't numeric !!"
		cleanup
		exit 2
	fi
	if [ "`echo $SNAP |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="SNAP Distance value isn't numeric !!"
	cleanup
	exit 2
fi

fi


g.region -d


#we select the points of "$INPUT"_segltmp1 which are not on $INPUT nodes
#transforming INPUT into point layer
v.db.addcol map="$INPUT"_segltmp1 columns="lcat INTEGER, lcat2 INTEGER" --q 2>>~/$LOGFILE
v.to.points -n input=$INPUT output="$INPUT"_segltmp7 type=line --q 2>>~/$LOGFILE
v.distance from="$INPUT"_segltmp1 to="$INPUT"_segltmp7 from_type=point to_type=point upload=cat column=lcat2 dmax=$SNAP  --q 2>>~/$LOGFILE

#we select the 'cuttable' segments
v.distance from="$INPUT"_segltmp1 to=$INPUT from_type=point to_type=line upload=cat column=lcat dmax=$SNAP  --q 2>>~/$LOGFILE

#extraction of the points with non null lcat
v.db.select -c map="$INPUT"_segltmp1 column=cat,x,y where="lcat <> 0 AND lcat2 is Null" fs=" " --q  > $TMP.${PROG}.3 2>>~/$LOGFILE



g.copy vect=$INPUT,"$INPUT"_segltmp2 --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
while [ -s "$TMP.${PROG}.3" ];do
  m.splicepl 1 $TMP.${PROG}.3 > $TMP.${PROG}.4 2>>~/$LOGFILE
  cut -d" " -f1 $TMP.${PROG}.4 > $TMP.${PROG}.5 2>>~/$LOGFILE
  cut -d" " -f2 $TMP.${PROG}.4 > $TMP.${PROG}.6 2>>~/$LOGFILE
  cut -d" " -f3 $TMP.${PROG}.4 > $TMP.${PROG}.7 2>>~/$LOGFILE


  #v.distance command between this point and INPUT to find the cat
  v.distance from="$INPUT"_segltmp1 to="$INPUT"_segltmp2 from_type=point to_type=line upload=cat column=lcat dmax=$SNAP  --q 2>>~/$LOGFILE
  v.db.select -c map="$INPUT"_segltmp1 column=lcat where="cat=`cat $TMP.${PROG}.5`"  --q > $TMP.${PROG}.8 2>>~/$LOGFILE

  v.edit map="$INPUT"_segltmp2 tool=break coords=`cat $TMP.${PROG}.6`,`cat $TMP.${PROG}.7` where="cat=`cat $TMP.${PROG}.8`" thresh=$SNAP --q 2>>~/$LOGFILE
  if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
  #we will work on the cat of the segmented segment of INPUT_segltmp2 
  v.extract input="$INPUT"_segltmp2 output="$INPUT"_segltmp3 type=line list=`cat $TMP.${PROG}.8`  --q 2>>~/$LOGFILE
  v.category input="$INPUT"_segltmp3 output="$INPUT"_segltmp4 type=line option=del  --q 2>>~/$LOGFILE
  v.category input="$INPUT"_segltmp4 output="$INPUT"_segltmp5 type=line option=add  --q 2>>~/$LOGFILE
  v.line.center input="$INPUT"_segltmp5 output="$INPUT"_segltmp6 layer=1 2>/dev/null
  v.db.addtable map="$INPUT"_segltmp6 columns="x DOUBLE PRECISION,y DOUBLE PRECISION" --q  2>>~/$LOGFILE
  v.to.db map="$INPUT"_segltmp6 option=coor column=x,y type=point  --q 2>>~/$LOGFILE
  v.db.select -c map="$INPUT"_segltmp6 column=x,y fs=","  --q |head -n 1 --q > $TMP.${PROG}.9 2>>~/$LOGFILE
  v.category input="$INPUT"_segltmp2 option=print |sort -k1g |tail -n 1  --q > $TMP.${PROG}.10 2>>~/$LOGFILE
  
  
  typeset -i catsup
  catsup=`cat $TMP.${PROG}.10`+1
  
  v.edit map="$INPUT"_segltmp2 tool=catdel coords=`cat $TMP.${PROG}.9` cat=`cat $TMP.${PROG}.8` thresh=0.01 --q 2>>~/$LOGFILE
  v.edit map="$INPUT"_segltmp2 tool=catadd coords=`cat $TMP.${PROG}.9` cat=$catsup thresh=0.01 --q  2>>~/$LOGFILE
  v.to.db map="$INPUT"_segltmp2 option=cat  --q 2>/dev/null
 
 
  
  diff $TMP.${PROG}.3 $TMP.${PROG}.4 |grep "[<]" |cut -d" " -f2,3,4 > $TMP.${PROG}.11 2>>~/$LOGFILE
 
  rm -f $TMP.${PROG}.3
  mv $TMP.${PROG}.11 $TMP.${PROG}.3
  rm -f $TMP.${PROG}.4 $TMP.${PROG}.5 $TMP.${PROG}.6 $TMP.${PROG}.7 $TMP.${PROG}.8 $TMP.${PROG}.9
  rm -f $TMP.${PROG}.10 $TMP.${PROG}.11
  g.remove vect="$INPUT"_segltmp3,"$INPUT"_segltmp4,"$INPUT"_segltmp5,"$INPUT"_segltmp6 --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi

  
done

g.rename vect="$INPUT"_segltmp2,$OUTPUT --q 2>/dev/null
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
cleanup
exit 0

