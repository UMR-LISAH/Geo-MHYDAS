#!/bin/bash
############################################################################
#
# MODULE:       m.sliverpolygseg
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      dissolving sliver entities with hierarchical level after segmentation (use Gravelius Index)
# REQUIREMENTS: m.testtype, m.testtype2, m.pourcenpl, m.invtripl, m.tripl, m.hierapolygseg, v.line.center
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: dissolving sliver entities with hierarchical level after segmentation (use Gravelius Index)
#% keywords : vector, selective dissolve, areal, hierarchical order, sliver
#%END
#%flag
#% key: i
#% description: print only statistics (no calcul) and exit
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: index 
#% type: double
#% description: gravelius INDEX max value; (in general, features with index > 1.6 are considered sliver features)
#% required : yes
#%END
#%option
#% key: unit 
#% type: string
#% description: units (meters (me), kilometers (k), acres(a), hectares(h))
#% options : me,k,a,h
#% answer : me
#% required : no
#%END
#%option
#% key: columnp
#% type: string
#% description: Name of column used to protect particular entities (column must exist)
#% required : no
#%END
#%option
#% key: valuep
#% type: string
#% description: value used in 'columnp' to identify the particular entities
#% required : no
#%END

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
INDEX="$GIS_OPT_INDEX"
COLUMNP="$GIS_OPT_COLUMNP"
VALUEP="$GIS_OPT_VALUEP"
UNIT="$GIS_OPT_UNIT"

if  [ -z "$GISBASE" ]
then
  echo ""
  echo "You must start GRASS to launch this program"
  echo ""
  exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi


# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"
#cleanup procedure
cleanup()
{
  \rm -f $TMP
   for ((u=1;u<=70;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_slivtmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.testtype2`" ];then
  g.message -e message="m.testtype2 subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.pourcenpl`" ];then
  g.message -e message="m.pourcenpl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.invtripl`" ];then
  g.message -e message="m.invtripl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.tripl`" ];then
  g.message -e message="m.tripl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.hierapolygseg`" ];then
  g.message -e message="m.hierapolygseg subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.line.center`" ];then
  g.message -e message="v.line.center subscript required, please install it first"
  exit 2
fi

#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi


#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.70
	
if [ -s "$TMP.${PROG}.70" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi

#test if input temporary vector map already exist
g.mlist type=vect pattern="$INPUT"_slivtmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_slivtmp name for temporay file is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

# test if input vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -w  message="<$INPUT> not found"
  cleanup
   exit 2
fi


m.testtype input=$INPUT > $TMP.${PROG}.2

#if input vector map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "polygone" ] ; then
  g.message -e message="<$INPUT> isn't a vector polygon"
  cleanup
  exit 2
fi

#test INDEX value
if [ "`echo $INDEX |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
  g.message -e message="<INDEX> value isn't numeric"
  cleanup
  exit 2
fi

# test UNIT value
if [ -z "$UNIT" ];then
  UNIT=me
fi


#test COLUMNP and VALUEP values
if [ -n "$COLUMNP" ];then
  
  db.columns table="$INPUT"_1 |grep "^$COLUMNP$" > $TMP.${PROG}.3
  
  if [ ! -s "$TMP.${PROG}.3" ]; then
    g.message -w message="Column <$COLUMNP> not found"
    cleanup
    exit 2
  fi

  if [ ! -n "$VALUEP" ];then
    g.message -w message="<$VALUEP> not found"
    cleanup
    exit 2
  fi
  #test if VALUEP is numeric 
  if [ "`echo $VALUEP |grep "[[:digit:]]" | wc -c`" = "0"  ] ;then
    v.db.select -c map=$INPUT column=$COLUMNP where="$COLUMNP = '$VALUEP'" > $TMP.${PROG}.4
  else
    v.db.select -c map=$INPUT column=$COLUMNP where="$COLUMNP = $VALUEP" > $TMP.${PROG}.4
  fi
  if [ ! -s "$TMP.${PROG}.4" ];then
    g.message -w message="<$VALUEP> not found"
    cleanup
    exit 2
  fi
fi

# we verify that INPUT vector map has two layers (layer 1 for the centroid cats and layer 2 for boundary cats)
v.db.connect -g map=$INPUT |wc -l |cut -d" " -f1 > $TMP.${PROG}.5
if [ "`cat $TMP.${PROG}.5`" != "2" ];then
  g.message -e message="<$INPUT> vector map has not two layers !"
  g.message -e message="You must use the m.seg script before using this script!"
  cleanup
  exit 2
fi


g.copy vect=$INPUT,"$INPUT"_slivtmp1 --q 2>>~/$LOGFILE
#adding a column for the features to protect
#example : area with area inferior to the threshold but we want to protect it

################## creation of the column ELIMNO ***************
#adding the column $ELIMNO


db.columns table="$INPUT"_slivtmp1_1> $TMP.${PROG}.6 2>>~/$LOGFILE

grep "^elimno$" $TMP.${PROG}.6 > $TMP.${PROG}.7 2>>~/$LOGFILE

typeset -i NBELIMNO
NBELIMNO=1
while [ -s "$TMP.${PROG}.7" ] ; do
  grep "^elimno"$NBELIMNO"$" $TMP.${PROG}.6 > $TMP.${PROG}.7 2>>~/$LOGFILE
  NBELIMNO=$NBELIMNO+1
  
done
ELIMNO=elimno"$NBELIMNO"
v.db.addcol map="$INPUT"_slivtmp1 columns="$ELIMNO INTEGER" --q 2>>~/$LOGFILE

#updating the column ELIMNO at 0 for all the polygons
#if ELIMNO = 1 , polygon need to be protected
v.db.update map="$INPUT"_slivtmp1 layer=1 column=$ELIMNO value=0 --q 2>>~/$LOGFILE


if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

# adding the column COLUMN : suppress and re-create
COLERASE=`v.info -c map="$INPUT"_slivtmp1 |cut -d"|" -f2|grep "^[Aa][Rr][Ee][Aa]$"`
COLUMN=AREA

v.db.dropcol map="$INPUT"_slivtmp1 column=$COLERASE --q 2>/dev/null
v.db.addcol map="$INPUT"_slivtmp1 columns="$COLUMN DOUBLE PRECISION" --q 2>>~/$LOGFILE


# searching the hierarchy order of the origin vectors 
# result in $TMP.${PROG}.13

v.db.connect -c map=$INPUT layer=1 > $TMP.${PROG}.8 2>>~/$LOGFILE
v.db.connect -c map=$INPUT layer=1 > $TMP.${PROG}.9 2>>~/$LOGFILE
v.db.connect -c map=$INPUT layer=2 >> $TMP.${PROG}.8 2>>~/$LOGFILE
grep "_[0-9]" $TMP.${PROG}.8 > $TMP.${PROG}.10 2>>~/$LOGFILE
rm -f $TMP.${PROG}.8
mv $TMP.${PROG}.10 $TMP.${PROG}.8
wc -l $TMP.${PROG}.8 |cut -d" " -f1 > $TMP.${PROG}.11 2>>~/$LOGFILE
typeset -i nbcol
nbcol=`cat $TMP.${PROG}.11`

for ((nb = 1; nb <= $nbcol; nb +=1))
do
  grep "_$nb$" $TMP.${PROG}.9 > $TMP.${PROG}.12 2>>~/$LOGFILE
  if [ -s "$TMP.${PROG}.12" ];then
    echo "$nb polygone" >> $TMP.${PROG}.13 2>>~/$LOGFILE
  else
    echo "$nb line" >> $TMP.${PROG}.13 2>>~/$LOGFILE
  fi

done
# TMP.${PROG}.13 will contain in column 1 the hierarchy order and in column 2 the type feature (polygon or line)

g.copy vect="$INPUT"_slivtmp1,"$INPUT"_slivtmp2 --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

# area calculation
v.to.db map="$INPUT"_slivtmp2 option=compact units=$UNIT column=$COLUMN --q 2>>~/$LOGFILE


#searching null areas
v.db.select -c map="$INPUT"_slivtmp2 layer=1 column=cat where="$COLUMN =0 "   --q  > $TMP.${PROG}.14 2>>~/$LOGFILE
if [ -s "$TMP.${PROG}.14" ];then
  echo "ERROR ! There some area with null value area !"
  echo "Please check the following cat polygons:"
  echo "`cat $TMP.${PROG}.14`"
  cleanup
  	exit 2
fi
rm -f $TMP.${PROG}.14

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
# searching polygons with index superior to the threshold
# extract the polygon with index > threshold and with ELIMNO = 0

v.db.select -c map="$INPUT"_slivtmp2 layer=1 column=cat where="$COLUMN > $INDEX AND $ELIMNO = 0" nv=0 fs="|"  --q > $TMP.${PROG}.15 2>>~/$LOGFILE
if [ ! -s "$TMP.${PROG}.15" ];then
  echo "There are no polygons which index is superior to $INDEX in the vector $INPUT"
  cleanup
  	exit 2
fi

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
# if flag I, we provide informations for the  user
if [ $GIS_FLAG_I -eq 1 ];then
  centroids2=`wc -l $TMP.${PROG}.15|cut -d" " -f1`
  centroids10=`m.testtype2 input="$INPUT"_slivtmp2`
  

  # indications for the user about his choice
    # feature numbers and percentage value
  
  v.report map="$INPUT"_slivtmp2 layer=1 option=area units=$UNIT |awk -F"|" '{print $NF}'|sed '1,1d'> $TMP.${PROG}.16 2>>~/$LOGFILE
  v.extract input="$INPUT"_slivtmp2 output="$INPUT"_slivtmp2a file=$TMP.${PROG}.15  --q 2>>~/$LOGFILE
  rm -f $TMP.${PROG}.15
  v.report map="$INPUT"_slivtmp2a layer=1 option=area units=$UNIT |awk -F"|" '{print $NF}' |sed '1,1d'> $TMP.${PROG}.15 2>>~/$LOGFILE
  
  echo ""
  echo "You choose a maximum gravelius index of $INDEX"
  echo " For the vector $INPUT, "
  echo " the dissolving small area entities operation will work"
  echo " on $centroids2 polygons for $centroids10 total polygons"
  
  # call m.pourcenpl script for percentage calculation
  m.pourcenpl --input1=$TMP.${PROG}.16 --input2=$TMP.${PROG}.15 2>>~/$LOGFILE
  echo " of the total surface"
  cleanup
  exit 0
fi

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi




# creation of the list of polygons with index > threshold
# we extract the boundaries of INPUT (necessary for the v.distance before calling m.hierapolygseg script)

v.extract input=$INPUT output="$INPUT"_slivtmp3 type=boundary layer=2  --q 2>>~/$LOGFILE

v.category input="$INPUT"_slivtmp2 output="$INPUT"_slivtmp4 type=boundary option=add layer=2  --q 2>>~/$LOGFILE
v.to.db map="$INPUT"_slivtmp4 type=centroid option=cat	 --q 2>/dev/null
# index calculation
v.to.db map="$INPUT"_slivtmp4 option=compact units=$UNIT column=$COLUMN  --q 2>>~/$LOGFILE
#$TMP.${PROG}.17: we select in  INPUT_slivtmp4 the polygons
#which index is superior to threshold and with $ELIMNO = 0
v.db.select -c map="$INPUT"_slivtmp4 layer=1 column=cat,$COLUMN where="$COLUMN > $INDEX AND $ELIMNO = 0" nv=0 fs=" "  --q > $TMP.${PROG}.17 2>>~/$LOGFILE

if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
# iterative process begin
# while command until $INPUT_slivtmp4 contains features to treat

typeset -i wnb
wnb=1
  
while [ -s "$TMP.${PROG}.17" ] ; do
  echo " " 
  echo " *** Step $wnb *** "
  echo " " 
  
  # neighbour topology calculation and boundary length calculation
  # $TMP.${PROG}.18 contains the neighbour relations between polygons
  v.to.db -p map="$INPUT"_slivtmp4 option=sides column=left,right layer=2 --q > $TMP.${PROG}.18 2>>~/$LOGFILE
  #$TMP.${PROG}.19 contains the length of the different boundaries
  v.to.db -p map="$INPUT"_slivtmp4 option=length column=boundL  layer=2 --q > $TMP.${PROG}.19 2>>~/$LOGFILE
  

  # sort of polygons by index in reverse order 
  m.invtripl --input=$TMP.${PROG}.17 --output=$TMP.${PROG}.20 --col=1 2>>~/$LOGFILE
  

  # choice of the polygon with the biggest index
  head -n1 $TMP.${PROG}.20 |cut -d" " -f1 > $TMP.${PROG}.21 2>>~/$LOGFILE
  FirstCat=`cat $TMP.${PROG}.21`
  

  # searching the neighbours of FirstCat
  grep "|$FirstCat|" $TMP.${PROG}.18 > $TMP.${PROG}.22 2>>~/$LOGFILE
  grep "|$FirstCat$" $TMP.${PROG}.18  >> $TMP.${PROG}.22 2>>~/$LOGFILE
  grep -v "\-1" $TMP.${PROG}.22 > $TMP.${PROG}.23 2>>~/$LOGFILE
  

    # number or the boundaries are stored in  $TMP.${PROG}.23
  # structure of  $TMP.${PROG}.23 : cat boundary|cat polygon|cat polygon
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
  if [ ! -s "$TMP.${PROG}.23" ];then
    #if $TMP.${PROG}.23 is empty , FirstCat has no neighbour, we put ELIMNO = 1
    
    v.category input="$INPUT"_slivtmp4 output="$INPUT"_slivtmp5 type=boundary option=del layer=2 --q  2>>~/$LOGFILE
    v.db.update map="$INPUT"_slivtmp5 column=$ELIMNO value=1 where="cat=$FirstCat" layer=1  --q 2>>~/$LOGFILE
    g.remove vect="$INPUT"_slivtmp4 --q 2>>~/$LOGFILE
    v.category input="$INPUT"_slivtmp5 output="$INPUT"_slivtmp4 type=boundary option=add layer=2  --q 2>>~/$LOGFILE
    g.remove vect="$INPUT"_slivtmp5 --q 2>>~/$LOGFILE
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
  else
    #if  $TMP.${PROG}.23 is not empty , two possibilities :
    # $TMP.${PROG}.23 has one line: only one neighbour with one boundary, simple case
    # $TMP.${PROG}.23 has several lines : several neighbours with several lines, complex case
    wc -l $TMP.${PROG}.23 |cut -d" " -f1 > $TMP.${PROG}.24 2>>~/$LOGFILE
    if [ "`cat $TMP.${PROG}.24`" = "1" ];then
      cut -d"|" -f2,3 $TMP.${PROG}.23 > $TMP.${PROG}.25 2>>~/$LOGFILE
      echo "`cat $TMP.${PROG}.25`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.26 2>>~/$LOGFILE
      # we suppress Firstcat of  $TMP.${PROG}.26
      #$TMP.${PROG}.26 will contain the list of the potential neighbours (and maybe no uniqs) of FirstCat

     #simple case: 1 neighbour and one boundary
      if [ -n "$COLUMNP" ];then
       #if columnp and valuep are not empty, neighbours sort
        # - a polygon with  valuep = 0 can only merge with a polygon with valuep = 0
        # - a polygon with  valuep != 0 can only merge with a polygon with valuep != 0
        # searching if the neighbour avec the same valuep
        v.db.select -c map="$INPUT"_slivtmp4 column=$COLUMNP nv="" where="cat = $FirstCat "  --q > $TMP.${PROG}.27  2>>~/$LOGFILE
        for f in `cat $TMP.${PROG}.26`;do
          v.db.select -c map="$INPUT"_slivtmp4 column=cat,$COLUMNP nv="" fs="|" where="cat = $f"  --q >> $TMP.${PROG}.28 2>>~/$LOGFILE
        done
        echo "\"$VALUEP\""> $TMP.${PROG}.29 2>>~/$LOGFILE
        if [ "`cat $TMP.${PROG}.27`" != "$VALUEP" ];then
         # if  $TMP.${PROG}.27 is != of valuep, we can only kept the neighbours with valuep != 0
           awk -F"|" <$TMP.${PROG}.28 '$2!='`cat $TMP.${PROG}.29`''  |cut -d"|" -f1 > $TMP.${PROG}.30 2>>~/$LOGFILE
      
        else
          # if  $TMP.${PROG}.27 is = of valuep, we can only kept the neighbours with valuep = 0
          awk -F"|" <$TMP.${PROG}.28 '$2=='`cat $TMP.${PROG}.29`''  |cut -d"|" -f1 > $TMP.${PROG}.30 2>>~/$LOGFILE

        fi
        rm $TMP.${PROG}.29
       # $TMP.${PROG}.30 contains the categories of the neighbouring polygons we need to kept
        # we modify $TMP.${PROG}.23 in this case
        if [ -s "$TMP.${PROG}.30" ] ;then
         	# searching the neighbour and the boundary to suppress
          # and the neighbour is contained in $TMP.${PROG}.31
          awk -F"|" <$TMP.${PROG}.30 '$1!='$FirstCat''  > $TMP.${PROG}.31 2>>~/$LOGFILE
          
         # and the boundary is contained in $TMP.${PROG}.32
          cut -d"|" -f1 $TMP.${PROG}.23 > $TMP.${PROG}.32 2>>~/$LOGFILE

        
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi		  
        else
         #si $TMP.${PROG}.30 is empty, no possible neighbour
          
          v.category input="$INPUT"_slivtmp4 output="$INPUT"_slivtmp5 type=boundary option=del layer=2 --q  2>>~/$LOGFILE
          v.db.update map="$INPUT"_slivtmp5 column=$ELIMNO value=1 where="cat=$FirstCat" layer=1  --q 2>>~/$LOGFILE
          g.remove vect="$INPUT"_slivtmp4 --q 2>>~/$LOGFILE
          v.category input="$INPUT"_slivtmp5 output="$INPUT"_slivtmp4 type=boundary option=add layer=2  --q 2>>~/$LOGFILE
          g.remove vect="$INPUT"_slivtmp5 --q 2>>~/$LOGFILE
        fi
        ############## Fin Etape 14 : Regarder si le voisin à la même valuep ##################
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi		
      else
        # searching the neighbour and the boundary to suppress
        # and the neighbour is contained in $TMP.${PROG}.31
        awk -F"|" <$TMP.${PROG}.26 '$1!='$FirstCat''  > $TMP.${PROG}.31 2>>~/$LOGFILE

         # and the boundary is contained in  $TMP.${PROG}.32
        cut -d"|" -f1 $TMP.${PROG}.23 > $TMP.${PROG}.32 2>>~/$LOGFILE
       
      fi
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
    else
      #complex case: several boundaries
        # searching if neighbours have several boundaries in contact with FirstCat
      cut -d"|" -f2,3 $TMP.${PROG}.23 > $TMP.${PROG}.25 2>>~/$LOGFILE
      echo "`cat $TMP.${PROG}.25`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.26 2>>~/$LOGFILE

      sort -k1g $TMP.${PROG}.26 |grep -v "^$FirstCat$" > $TMP.${PROG}.33 2>>~/$LOGFILE
      uniq -d $TMP.${PROG}.33 > $TMP.${PROG}.34 2>>~/$LOGFILE

      if [ -s "$TMP.${PROG}.34" ];then
        # if $TMP.${PROG}.34 is not empty, several polygons are in contact with 1+ boundaries with FirstCat
		# for each line of $TMP.${PROG}.34 (for each neighbour), we keep only the longest boundary
		# and we modify $TMP.${PROG}.22 in this case
        for a in `cat $TMP.${PROG}.34`;do
          awk -F"|" <$TMP.${PROG}.23 '$2=='$a''  |cut -d"|" -f1 > $TMP.${PROG}.35 2>>~/$LOGFILE

          awk -F"|" <$TMP.${PROG}.23 '$3=='$a''  |cut -d"|" -f1 >> $TMP.${PROG}.35 2>>~/$LOGFILE

        # searching the length of the boundaries with $TMP.${PROG}.19
          for b in `cat $TMP.${PROG}.35`;do
            awk -F"|" <$TMP.${PROG}.19 '$1=='$b'' >> $TMP.${PROG}.36 2>>~/$LOGFILE

          done
          # we keep the longest boundary
          echo "`cat $TMP.${PROG}.36`" |awk -F"|" '{OFS=" "; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.37 2>>~/$LOGFILE

          m.tripl --input=$TMP.${PROG}.37 --output=$TMP.${PROG}.38 --col=1 2>>~/$LOGFILE
          tail -n 1 $TMP.${PROG}.38 |cut -d" " -f1 > $TMP.${PROG}.39 2>>~/$LOGFILE
         # we modify the lines of $TMP.${PROG}.23 concerning the neighbour $a
          awk -F"|" <$TMP.${PROG}.23 '$2!='$a''   > $TMP.${PROG}.40 2>>~/$LOGFILE

          awk -F"|" <$TMP.${PROG}.40 '$3!='$a''   > $TMP.${PROG}.41 2>>~/$LOGFILE

          echo "`cat $TMP.${PROG}.39`|$a|$FirstCat" >> $TMP.${PROG}.41 2>>~/$LOGFILE

          mv $TMP.${PROG}.41  $TMP.${PROG}.23
          rm -f $TMP.${PROG}.35 $TMP.${PROG}.36 $TMP.${PROG}.37 $TMP.${PROG}.38 $TMP.${PROG}.39
          rm -f $TMP.${PROG}.40 $TMP.${PROG}.41
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi		  
        done
      fi
     
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi
     # $TMP.${PROG}.23 contains the list of the uniq neighbours

      if [ -n "$COLUMNP" ];then
       # we only take the neighbours with the same valuep
      # if columnp and valuep are not empty, we sort the neighbours
      # - a polygon with valuep = 0  can only be merged into a polygon with valuep = 0
      # - a polygon with valuep != 0  can only be merged into a polygon with valuep != 0
        v.db.select -c map="$INPUT"_slivtmp4 column=$COLUMNP nv="" where="cat = $FirstCat "  --q > $TMP.${PROG}.27 2>>~/$LOGFILE
        cut -d"|" -f2,3 $TMP.${PROG}.23 > $TMP.${PROG}.25 2>>~/$LOGFILE
        echo "`cat $TMP.${PROG}.25`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.26 2>>~/$LOGFILE

        awk -F"|" <$TMP.${PROG}.26 '$1!='$FirstCat''  > $TMP.${PROG}.33 2>>~/$LOGFILE

        for f in `cat $TMP.${PROG}.33`;do
          v.db.select -c map="$INPUT"_slivtmp4 column=cat,$COLUMNP nv="" fs="|" where="cat = $f"  --q >> $TMP.${PROG}.42 2>>~/$LOGFILE
        done
        echo "\"$VALUEP\""> $TMP.${PROG}.29 2>>~/$LOGFILE
        if [ "`cat $TMP.${PROG}.27`" != "$VALUEP" ];then
          #if $TMP.${PROG}.27 is != valuep, we keep only the neighbours with value != 0
           awk -F"|" <$TMP.${PROG}.42 '$2!='`cat $TMP.${PROG}.29`''  |cut -d"|" -f1 > $TMP.${PROG}.43 2>>~/$LOGFILE

        else
             #if $TMP.${PROG}.27 is = valuep, we keep only the neighbours with value = 0
          awk -F"|" <$TMP.${PROG}.42 '$2=='`cat $TMP.${PROG}.29`''  |cut -d"|" -f1 > $TMP.${PROG}.43 2>>~/$LOGFILE

        fi
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi		
        rm $TMP.${PROG}.29
       # $TMP.${PROG}.43 contains the categories of the neighbour polygons we keep; several possibilities :
        #- $TMP.${PROG}.43 is empty : no neighbour
        #- $TMP.${PROG}.43 : one line, one neighbour
        #- $TMP.${PROG}.43: 1+ lines, 1+ neighbours
        # in the last case , we keep the longest boundary
        # and we modify $TMP.${PROG}.31 in this case
        if [ -s "$TMP.${PROG}.43" ] ;then
          for h in `cat $TMP.${PROG}.43`;do
            awk -F"|" <$TMP.${PROG}.23 '$2=='$h''   >> $TMP.${PROG}.44 2>>~/$LOGFILE

            awk -F"|" <$TMP.${PROG}.23 '$3=='$h''   >> $TMP.${PROG}.44 2>>~/$LOGFILE

          done
          rm $TMP.${PROG}.23
          mv $TMP.${PROG}.44 $TMP.${PROG}.23
           # two possible choices : $TMP.${PROG}.23, one line, one neighbour; or 1+ lines, 1+ neighbours
          
          wc -l $TMP.${PROG}.23 |cut -d" " -f1 > $TMP.${PROG}.45 2>>~/$LOGFILE
          if [ "`cat $TMP.${PROG}.45`" = "1" ];then
            	# and the neighbour is contained in $TMP.${PROG}.31
            cp  $TMP.${PROG}.43 $TMP.${PROG}.31 2>>~/$LOGFILE
           # and the boundary to remove is contained in $TMP.${PROG}.32
            cut -d"|" -f1 $TMP.${PROG}.23 > $TMP.${PROG}.32 2>>~/$LOGFILE
          else
             # choice of the neighbour with the longest boundary
            cut -d'|' -f1 $TMP.${PROG}.23 > $TMP.${PROG}.46 2>>~/$LOGFILE
            for l in `cat $TMP.${PROG}.46`;do
              awk -F"|" <$TMP.${PROG}.19 '$1=='$l'' >> $TMP.${PROG}.47 2>>~/$LOGFILE
              
            done

            echo "`cat $TMP.${PROG}.47`" |awk -F"|" '{OFS=" "; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.48 2>>~/$LOGFILE

            m.tripl --input=$TMP.${PROG}.48 --output=$TMP.${PROG}.49 --col=1 2>>~/$LOGFILE
            rm -f $TMP.${PROG}.48
           # and the boundary to remove is contained in $TMP.${PROG}.32
            tail -n 1 $TMP.${PROG}.49 |cut -d" " -f1  > $TMP.${PROG}.32 2>>~/$LOGFILE
          # and the neighbour is contained in $TMP.${PROG}.31
            bound16=`cat $TMP.${PROG}.32`
            awk -F"|" <$TMP.${PROG}.23 '$1=='$bound16'' |cut -d"|" -f2,3 > $TMP.${PROG}.50 2>>~/$LOGFILE

            echo "`cat $TMP.${PROG}.50`" |awk -F"|" '{OFS="\n"; ORS="\n"; $1 = $1; print $0}'> $TMP.${PROG}.51 2>>~/$LOGFILE

            awk -F"|" <$TMP.${PROG}.51 '$1!='$FirstCat'' > $TMP.${PROG}.31 2>>~/$LOGFILE

           
          fi
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi		  
        else
          #no possible neighbour, ELIMNO = 1
          
          v.category input="$INPUT"_slivtmp4 output="$INPUT"_slivtmp5 type=boundary option=del layer=2  --q 2>>~/$LOGFILE
          v.db.update map="$INPUT"_slivtmp5 column=$ELIMNO value=1 where="cat=$FirstCat"  --q 2>>~/$LOGFILE
          g.remove vect="$INPUT"_slivtmp4 --q 2>>~/$LOGFILE
          v.category input="$INPUT"_slivtmp5 output="$INPUT"_slivtmp4 type=boundary option=add layer=2  --q 2>>~/$LOGFILE
          g.remove vect="$INPUT"_slivtmp5 --q 2>>~/$LOGFILE
        fi
        
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi		
      else
             # choice of the neighbour with the longest boundary
         # we save the informations of the columns of INPUT boundaries
        cut -d'|' -f1 $TMP.${PROG}.23 > $TMP.${PROG}.46 2>>~/$LOGFILE
        v.extract input="$INPUT"_slivtmp4 output="$INPUT"_slivtmp6 type=boundary layer=2 file=$TMP.${PROG}.46 --q  2>>~/$LOGFILE
    
       # we transform the boundary into a line and into points for v.distance command with INPUT boundaries
        v.type input="$INPUT"_slivtmp6 output="$INPUT"_slivtmp7 type=boundary,line  --q 2>>~/$LOGFILE
        v.line.center input="$INPUT"_slivtmp7 layer=2 output="$INPUT"_slivtmp8 2>/dev/null
        v.db.addtable map="$INPUT"_slivtmp8 layer=1 columns="catL INTEGER,cato INTEGER,longL DOUBLE PRECISION"  --q 2>>~/$LOGFILE
        v.db.addcol map="$INPUT"_slivtmp6 layer=2 columns="long DOUBLE PRECISION"  --q 2>>~/$LOGFILE
        v.to.db map="$INPUT"_slivtmp6 layer=2 option=length units=$UNIT column=long --q 2>/dev/null
         # catL will be the column of the categories of the boundaries of INPUT_slivtmp4
          # cato will be the column of the categories of the boundaries of INPUT
          # long will be the length of the boundaries
        
        v.distance from="$INPUT"_slivtmp8 to="$INPUT"_slivtmp6 from_type=point to_type=boundary from_layer=1 to_layer=2 upload=cat column=catL dmax=0.05 --q  2>>~/$LOGFILE
        v.distance from="$INPUT"_slivtmp8 to="$INPUT"_slivtmp3 from_type=point to_type=boundary from_layer=1 to_layer=2 upload=cat column=cato dmax=0.05  --q 2>>~/$LOGFILE
        v.distance from="$INPUT"_slivtmp8 to="$INPUT"_slivtmp6 from_type=point to_type=boundary from_layer=1 to_layer=2 upload=to_attr column=longL to_column=long dmax=0.05  --q 2>>~/$LOGFILE
    
        v.db.select -c map="$INPUT"_slivtmp8 column=catL,cato,longL fs=" " nv=0  --q > $TMP.${PROG}.52 2>>~/$LOGFILE

        # searching the hierarchical orders and the cat of the merged polygon ; call m.hierapolygseg script
        m.hierapolygseg input=$INPUT first=$FirstCat file1=$TMP.${PROG}.13 file2=$TMP.${PROG}.23 file3=$TMP.${PROG}.52 file4=$TMP.${PROG}.53 2>>~/$LOGFILE

        g.remove vect="$INPUT"_slivtmp6,"$INPUT"_slivtmp7,"$INPUT"_slivtmp8 --q 2>>~/$LOGFILE
	
         #$TMP.${PROG}.31 contains the cat of the polygon to merge
	 if [ -e "$TMP.${PROG}.53" ];then
	  cut -d"," -f2 $TMP.${PROG}.53 > $TMP.${PROG}.31 2>>~/$LOGFILE
	fi
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi	
		
      
      fi
    fi
      

     # if $TMP.${PROG}.31 exists, we check if there are 1+ boundaries in common between FirstCat et $TMP.${PROG}.31, in this case , we add the cat(s) of the boundary (ies) in $TMP.${PROG}.32
      if [ -e "$TMP.${PROG}.31" ];then
        grep "|$FirstCat|" $TMP.${PROG}.18 > $TMP.${PROG}.52 2>>~/$LOGFILE
        grep "|$FirstCat$" $TMP.${PROG}.18  >> $TMP.${PROG}.52 2>>~/$LOGFILE
        grep -v "\-1" $TMP.${PROG}.52 > $TMP.${PROG}.54 2>>~/$LOGFILE
        cat18=`cat $TMP.${PROG}.31`

        awk -F"|" <$TMP.${PROG}.54 '$2=='$cat18'' |cut -d"|" -f1 >> $TMP.${PROG}.55 2>>~/$LOGFILE

        awk -F"|" <$TMP.${PROG}.54 '$3=='$cat18'' |cut -d"|" -f1 >> $TMP.${PROG}.55 2>>~/$LOGFILE

        rm -f $TMP.${PROG}.32
        echo "`cat $TMP.${PROG}.55`" |awk -F"|" '{OFS=","; ORS=","; $1 = $1; print $0}'> $TMP.${PROG}.32 2>>~/$LOGFILE
    
        #$TMP.${PROG}.32 contains the cat of the boundary
        ################# v.extract #################
        v.extract -r input="$INPUT"_slivtmp4 output="$INPUT"_slivtmp9 type=boundary list=`cat $TMP.${PROG}.32` layer=2  --q 2>>~/$LOGFILE
        v.type input="$INPUT"_slivtmp9 output="$INPUT"_slivtmp10 type=boundary,line  --q 2>>~/$LOGFILE
        v.build.polylines input="$INPUT"_slivtmp10 output="$INPUT"_slivtmp11 cats=first  --q 2>>~/$LOGFILE
        v.type input="$INPUT"_slivtmp11 output="$INPUT"_slivtmp12 type=line,boundary  --q 2>>~/$LOGFILE
        v.category input="$INPUT"_slivtmp12 output="$INPUT"_slivtmp13 type=boundary option=add layer=2  --q 2>>~/$LOGFILE
        v.centroids input="$INPUT"_slivtmp13 output="$INPUT"_slivtmp14  --q 2>>~/$LOGFILE
        v.db.droptable -f map="$INPUT"_slivtmp14 layer=2 --q 2>>~/$LOGFILE
        

        #################  v.reclass #################
        v.db.addtable map="$INPUT"_slivtmp14 columns="b_cat INTEGER" layer=1 --q 2>>~/$LOGFILE
        v.distance from="$INPUT"_slivtmp14 from_type=centroid from_layer=1 to="$INPUT"_slivtmp4 to_type=area to_layer=1 upload=cat column=b_cat --q 2>>~/$LOGFILE
        v.reclass input="$INPUT"_slivtmp14 output="$INPUT"_slivtmp15 column=b_cat --q 2>>~/$LOGFILE
  
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi       
        v.category input="$INPUT"_slivtmp15 option=print type=centroid > $TMP.${PROG}.56 2>>~/$LOGFILE
        awk -F"|" <$TMP.${PROG}.56 '$1=='`cat $TMP.${PROG}.31`'' > $TMP.${PROG}.57 2>>~/$LOGFILE
  
        if [ -s "$TMP.${PROG}.57" ];then
          db.copy from_table="$INPUT"_slivtmp4_1 to_table="$INPUT"_slivtmp15_1 where="cat<>$FirstCat" 2>>~/$LOGFILE
        else
          db.copy from_table="$INPUT"_slivtmp4_1 to_table="$INPUT"_slivtmp15_1 where="cat<>`cat $TMP.${PROG}.31`" 2>>~/$LOGFILE
        fi

        v.db.connect map="$INPUT"_slivtmp15 table="$INPUT"_slivtmp15_1 layer=1  --q 2>>~/$LOGFILE
        g.remove vect="$INPUT"_slivtmp4,"$INPUT"_slivtmp9,"$INPUT"_slivtmp14 --q 2>>~/$LOGFILE
        g.remove vect="$INPUT"_slivtmp10,"$INPUT"_slivtmp11,"$INPUT"_slivtmp12,"$INPUT"_slivtmp13 --q 2>>~/$LOGFILE

        rm -f $TMP.${PROG}.56 $TMP.${PROG}.57
       
         ################## boundaries topology calculation #############
        v.category input="$INPUT"_slivtmp15 output="$INPUT"_slivtmp4 type=boundary layer=2 option=add --q  2>>~/$LOGFILE
        v.db.addtable map="$INPUT"_slivtmp4 layer=2 --q 2>>~/$LOGFILE
        db.copy from_table="$INPUT"_slivtmp4 to_table="$INPUT"_slivtmp4_1  --q 2>>~/$LOGFILE
        v.db.droptable -f map="$INPUT"_slivtmp4 table="$INPUT"_slivtmp4 layer=1  --q 2>>~/$LOGFILE
        v.db.connect map="$INPUT"_slivtmp4 table="$INPUT"_slivtmp4_1 layer=1  --q 2>>~/$LOGFILE
        g.remove vect="$INPUT"_slivtmp15 --q 2>>~/$LOGFILE
   
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi       
      else
         #no possible neighbour, ELIMNO = 1
          v.category input="$INPUT"_slivtmp4 output="$INPUT"_slivtmp5 type=boundary option=del layer=2  --q 2>>~/$LOGFILE
          v.db.update map="$INPUT"_slivtmp5 column=$ELIMNO value=1 where="cat=$FirstCat"  --q 2>>~/$LOGFILE
          g.remove vect="$INPUT"_slivtmp4 --q 2>>~/$LOGFILE
          v.category input="$INPUT"_slivtmp5 output="$INPUT"_slivtmp4 type=boundary option=add layer=2 --q  2>>~/$LOGFILE
          g.remove vect="$INPUT"_slivtmp5 --q 2>>~/$LOGFILE
          if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi 
        
      fi
    fi
 ################## index calculation and creation of the list of polygons which index > threshold #############

  #index calculation
  v.to.db map="$INPUT"_slivtmp4 type=centroid option=cat --q 	2>/dev/null

  v.to.db map="$INPUT"_slivtmp4 option=compact units=$UNIT column=$COLUMN  --q 2>>~/$LOGFILE

 

  # we select in INPUT_slivtmp4 the polygons with index > threshold and ELIMNO = 0
  v.db.select -c map="$INPUT"_slivtmp4 column=cat,$COLUMN nv=0 fs=" " where="$COLUMN > $INDEX AND $ELIMNO = 0" --q  > $TMP.${PROG}.17 2>>~/$LOGFILE
  

  
  wnb=$wnb+1
   for ((c=18;c<=55;c+=1))
  do
    rm -f $TMP.${PROG}.$c
  done
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
############## iterative process ending
done

# we suppress the column ELIMNO and COLULM in the attribute layer 1
v.db.dropcol map="$INPUT"_slivtmp4 column=$ELIMNO  --q 2>>~/$LOGFILE
v.db.dropcol map="$INPUT"_slivtmp4 column=$COLUMN  --q 2>>~/$LOGFILE
 if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
g.rename vect="$INPUT"_slivtmp4,$OUTPUT --q  2>/dev/null

# we add the the attribute layer 2 with the informations of the hierarchical orders for boundaries

v.extract input="$OUTPUT" output="$INPUT"_slivtmp16 type=boundary layer=2  --q  2>>~/$LOGFILE
# we transform the boundaries into lines and into points
# v.distance command with INPUT boundaries
v.type input="$INPUT"_slivtmp16 output="$INPUT"_slivtmp17 type=boundary,line  --q 2>>~/$LOGFILE
v.line.center input="$INPUT"_slivtmp17 layer=2 output="$INPUT"_slivtmp18 2>/dev/null
v.db.addtable map="$INPUT"_slivtmp18 layer=1 columns="catL INTEGER,cato INTEGER"  --q 2>>~/$LOGFILE

#catL will be the column of the cats of the boundaries of INPUT_slivtmp16
#cato will be the column of the cats of the boundaries of INPUT
v.distance from="$INPUT"_slivtmp18 to="$INPUT"_slivtmp16 from_type=point to_type=boundary from_layer=1 to_layer=2 upload=cat column=catL dmax=0.05  --q 2>>~/$LOGFILE
v.distance from="$INPUT"_slivtmp18 to=$INPUT from_type=point to_type=boundary from_layer=1 to_layer=2 upload=cat column=cato dmax=0.05  --q 2>>~/$LOGFILE
v.db.select -c map="$INPUT"_slivtmp18 column=catL,cato fs="|" nv=0  --q > $TMP.${PROG}.58  2>>~/$LOGFILE

# we add the column of INPUT_2 to OUTPUT_2
v.db.connect -c map=$INPUT layer=2  --q > $TMP.${PROG}.59 2>>~/$LOGFILE
wc -l $TMP.${PROG}.59 |cut -d" " -f1 > $TMP.${PROG}.60 2>>~/$LOGFILE
typeset -i nbsliv102
nbsliv102=`cat $TMP.${PROG}.60`-1
tail -n $nbsliv102 $TMP.${PROG}.59 |cut -d"|" -f2 > $TMP.${PROG}.61 2>>~/$LOGFILE
for jk in `cat $TMP.${PROG}.61`;do
  v.db.addcol map=$OUTPUT layer=2 columns="$jk INTEGER"  --q 2>>~/$LOGFILE
done
v.db.select -c map=$INPUT layer=2 fs="|" nv=0  --q |grep -v "|0|0$" > $TMP.${PROG}.62 2>>~/$LOGFILE
cut -d"|" -f1 $TMP.${PROG}.62 > $TMP.${PROG}.63 2>>~/$LOGFILE
for bk in `cat $TMP.${PROG}.63`;do
  awk -F"|" <$TMP.${PROG}.58 '$2=='$bk''  >> $TMP.${PROG}.64 2>>~/$LOGFILE
done
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi

for hh in `cat $TMP.${PROG}.64`;do
  echo "$hh" |cut -d"|" -f1 > $TMP.${PROG}.65 2>>~/$LOGFILE
  echo "$hh" |cut -d"|" -f2 > $TMP.${PROG}.66 2>>~/$LOGFILE
  awk -F"|" <$TMP.${PROG}.62 '$1=='`cat $TMP.${PROG}.66`''  >> $TMP.${PROG}.67 2>>~/$LOGFILE
  typeset -i h
  h=2
  for jl in `cat $TMP.${PROG}.61`;do
    cut -d"|" -f$h $TMP.${PROG}.67 > $TMP.${PROG}.68 2>>~/$LOGFILE
    v.db.update map=$OUTPUT layer=2 column=$jl value=`cat $TMP.${PROG}.68` where="cat=`cat $TMP.${PROG}.65`"  --q  2>>~/$LOGFILE
    h=$h+1
  done
  rm -f $TMP.${PROG}.67
done
if [ ! -z "`cat ~/$LOGFILE`" ];then
	g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
	cleanup
	exit 2
fi
#cleanup procedure
cleanup
exit 0
