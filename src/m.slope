#!/bin/bash
############################################################################
#
# MODULE:       m.slope
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      slope calcul for an oriented hydrological network 
# REQUIREMENTS: m.testtype,m.pente3pl 
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: slope calcul for an oriented hydrological network 
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input line vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output line vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: mnt
#% type: string
#% gisprompt: old,cell,raster
#% description: Input DEM name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: column
#% type: string
#% description: Column name for slope calcul
#% required : yes
#%END
#%option
#% key: slop_val
#% type: double
#% description: Replacement value for null or negative calculated slope (must be > 0; default value is 0.0001)
#% required : no
#%END



if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
COLUMN="$GIS_OPT_COLUMN"
MNT="$GIS_OPT_MNT"
SLOP_VAL="$GIS_OPT_SLOP_VAL"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}



#test GRASS 
if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi


#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"


#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=12;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_slopetmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
  
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.pente3pl`" ];then
  g.message -e message="m.pente3pl subscript required, please install it first"
  exit 2
fi


#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi

#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.12
	
if [ -s "$TMP.${PROG}.12" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi



#test if input temporary vector map already exist
g.mlist type=vect pattern="$INPUT"_slopetmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_slopetmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2

fi

# test if input vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.2

#if input vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "line" ] ; then
	g.message -e message="<$INPUT> doesn't exist or isn't a vector line !!"
	cleanup
	exit 2
fi

#test COLUMN value
v.info -c map=$INPUT --q |cut -d"|" -f2 |grep "^$COLUMN$" > $TMP.${PROG}.3
if [ -s "$TMP.${PROG}.3" ];then
  g.message -e message="The column <$COLUMN> already exists !!"
  cleanup
  exit 2
fi

# test if DEM raster map exists
g.findfile element=cell mapset=${MAPSET?} file=${MNT} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -e message="<$MNT> raster not found !!"
  cleanup
  exit 2
fi

# test SLOP_VAL value
if [ ! -z "$SLOP_VAL" ];then
	if [ "`echo $SLOP_VAL |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
	  g.message -e message="<slop_val> value isn't numeric !!"
	  cleanup
	  exit 2
	fi
	if [ "`echo $SLOP_VAL |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="<slop_val> value isn't numeric !!"
		cleanup
		exit 2
	fi
	if [ "$SLOP_VAL" = "0" ];then
		g.message -e message="<slop_val> must be superior to 0 !!"
		cleanup
		exit 2
	fi
else
	SLOP_VAL=0.0001
fi


g.region rast=$MNT --q 2>>~/$LOGFILE

# copy
g.copy vect=$INPUT,"$INPUT"_slopetmp --q 2>>~/$LOGFILE

#slope column creation
v.db.addcol map="$INPUT"_slopetmp columns="$COLUMN double precision" --q 2>>~/$LOGFILE

#we transform the line vector map into a point vector map
v.to.points input=$INPUT type=line output="$INPUT"_slopetmp2 --q 2>>~/$LOGFILE

# adding x,y,alti column at layer2 of input_slopetmp2
v.db.addcol map="$INPUT"_slopetmp2 layer=2 columns="alti double precision,x double precision,y double precision" --q 2>>~/$LOGFILE

#x, y coordinate calculation
v.to.db map="$INPUT"_slopetmp2 type=point layer=2 option=coor units=me column=x,y --q 2>>~/$LOGFILE

#adding altitude from DEM
g.region vect="$INPUT"_slopetmp2 --q 2>>~/$LOGFILE
v.what.rast vector="$INPUT"_slopetmp2 raster=$MNT layer=2 column=alti --q 2>/dev/null
g.region -d --q 2>>~/$LOGFILE
v.db.select -c map="$INPUT"_slopetmp2 layer=2 column=cat,lcat,along,alti fs=" " nv=0 --q > $TMP.${PROG}.4 2>>~/$LOGFILE

#cleaning $TMP.${PROG}.4: for each line only two points (end and start point)
#in grass 6.2 command v.to.points create a third point (centroid)
#in grass 6.3 seems ok but we keep cleaning 


v.category input="$INPUT"_slopetmp type=line option=print --q > $TMP.${PROG}.5 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
for p in `cat $TMP.${PROG}.5`;do
	varp=$p
	awk -F" " < $TMP.${PROG}.4 '$2=='$varp'' > $TMP.${PROG}.6 2>>~/$LOGFILE
	head -n 1 $TMP.${PROG}.6 >> $TMP.${PROG}.7 2>>~/$LOGFILE
	tail -n 1 $TMP.${PROG}.6 >> $TMP.${PROG}.7 2>>~/$LOGFILE

done

# slope calculation
m.pente3pl --input=$TMP.${PROG}.7 --output=$TMP.${PROG}.8 --slope=$SLOP_VAL 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi

# $TMP.${PROG}.8 file contains slope and segment cats
#we put slop values into INPUT_slopetmp

for j in `cat $TMP.${PROG}.8`;do
	echo "$j" |cut -d"|" -f1 > $TMP.${PROG}.9 2>>~/$LOGFILE
	echo "$j" |cut -d"|" -f2 > $TMP.${PROG}.10 2>>~/$LOGFILE
	catRS=`cat $TMP.${PROG}.9`
	slopeRS=`cat $TMP.${PROG}.10`
	v.db.update map="$INPUT"_slopetmp column=$COLUMN value=$slopeRS where="cat = $catRS" --q 2>>~/$LOGFILE
	rm -f $TMP.${PROG}.9 
	rm -f $TMP.${PROG}.10
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
done

g.rename vect="$INPUT"_slopetmp,$OUTPUT --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#cleanup procedure
cleanup
exit 0
