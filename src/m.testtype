#!/bin/bash
############################################################################
#
# MODULE:       m.testtype
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      test feature types of a vector (point, line or polygon)
# REQUIREMENTS: 
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################


#%Module
#%  description: test feature types of a vector (point, line or polygon)
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% key_desc : name
#% description: Input vector name
#% required : yes
#%END
    
if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 


# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi

PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
  \rm -f $TMP.${PROG}.1
  \rm -f $TMP.${PROG}.2
  \rm -f $TMP.${PROG}.3
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}

# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# test if INPUT vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -w  message="<$INPUT> not found"
   exit 2
fi



# test line presence
v.info map="$INPUT" --quiet | grep "lines:" | cut -c30-40  > $TMP.${PROG}.1 2>>~/$LOGFILE
typeset -i line1
line1=`cat $TMP.${PROG}.1`


# test centroid presence
v.info map="$INPUT" --quiet | grep "centroids:" | cut -c30-40 > $TMP.${PROG}.2 2>>~/$LOGFILE
typeset -i centro1
centro1=`cat $TMP.${PROG}.2`


#test point presence
v.info map="$INPUT" --quiet | grep "points:" | cut -c30-40  > $TMP.${PROG}.3 2>>~/$LOGFILE
typeset -i pt1
pt1=`cat $TMP.${PROG}.3`

if [ $line1 -ne 0 ];then
	echo "line"
else
	if [ $centro1 -ne 0 ];then
		echo "polygone"
	else
		echo "point"

	fi
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
##cleanup procedure
cleanup
exit 0
