#!/bin/bash
############################################################################
#
# MODULE:       m.topoman
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Manual oriented topology calcul
# REQUIREMENTS: m.testtype
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#
#############################################################################
#%Module
#%  description: Manual oriented topology calcul
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input polygon vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: hydro
#% type: string
#% gisprompt: old,vector,vector
#% description: Input Reach vector name
#% key_desc : name
#% required : no
#%END
#%option
#% key: inputdir
#% type: string
#% gisprompt: old,vector,vector
#% description: Input Direction vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: id
#% type: string
#% description: ID Input Polygon vector column name
#% required : yes
#%END
#%option
#% key: idhydro
#% type: string
#% gisprompt: old,vector,vector
#% description: ID Input Reach vector column name
#% required : no
#%END
#%option
#% key: dist
#% type: double
#% description: Distance for reach contact (meters)
#% required : no
#%END
  
if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
if  [ -z "$GISBASE" ]
then
  echo ""
  echo "You must start GRASS to launch this program"
  echo ""
  exit 2
fi

INPUT="$GIS_OPT_INPUT"
INPUTR="$GIS_OPT_HYDRO"
INPUTD="$GIS_OPT_INPUTDIR"
ID="$GIS_OPT_ID"
DIST="$GIS_OPT_DIST"
IDHYDRO="$GIS_OPT_IDHYDRO"
 
#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=11;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_topomantmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
  
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing 
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi



#test if input temporary vector map already exist

g.mlist type=vect pattern="$INPUT"_topomantmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_topomantmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2
fi

# test if input exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.2
#if input vector map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "polygone" ] ; then
  g.message -e message="<$INPUT> doesn't exist or isn't a vector polygon !!"
  cleanup
  exit 2
fi

# test if inputd exists
g.findfile element=vector file=${INPUTD} mapset=${MAPSET?} > /dev/null
if [ $? -ne 0 ] ; then
  g.message -e message="<$INPUTD> vector doesn't exist !"
  cleanup
  exit 2
fi

m.testtype input=$INPUTD > $TMP.${PROG}.3

#if inputd vector map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.3`" != "line" ] ; then
  g.message -e message="<$INPUTD> doesn't exist or isn't a vector line !!"
  cleanup
  exit 2
fi

# test if inputr exists
if [ ! -z "$INPUTR" ] ;then
  g.findfile element=vector file=${INPUTR} mapset=${MAPSET?} > /dev/null
  if [ $? -ne 0 ] ; then
    g.message -e message="<$INPUTR> vector doesn't exist !"
    cleanup
    exit 2
  fi
  
  m.testtype input=$INPUTR > $TMP.${PROG}.4
#if inputr vector map is not a line vector, exit program
  if [ "`cat $TMP.${PROG}.4`" != "line" ] ; then
    g.message -e message="<$INPUTR> doesn't exist or isn't a vector line !!"
    cleanup
    exit 2
  fi

  #test  IDHYDRO value
  v.info -c map=$INPUTR --q |cut -d"|" -f2 |grep "^$IDHYDRO$" > $TMP.${PROG}.5
  if [ ! -s "$TMP.${PROG}.5" ];then
    g.message -e message="The column <$IDHYDRO> doesn't exist !!"
    
    cleanup
    exit 2
  fi
  
 
  # test DIST value
  if [ ! -z "$DIST" ] ;then
    if [ "`echo $DIST |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
      g.message -e message="<DIST> value isn't numeric !!"
      cleanup
      exit 2
    fi
	if [ "`echo $DIST |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="<DIST> value isn't numeric !!"
		cleanup
		exit 2
	fi
  fi
fi


###### ending securities


#transforming  INPUTD into point vector map
v.to.points -n input=$INPUTD output="$INPUT"_topomantmp type=line --q 2>>~/$LOGFILE
v.db.addcol map="$INPUT"_topomantmp layer=2 columns="catp INTEGER,catr INTEGER" --q 2>>~/$LOGFILE

#distance calculation between points of "$INPUT"_topomantmp and the lines of  INPUTR if it exists
if [ ! -z "$INPUTR" ] ;then
  v.distance from="$INPUT"_topomantmp to=$INPUTR from_type=point to_type=line from_layer=2 dmax=$DIST upload=to_attr column=catr to_column=$IDHYDRO --q 2>>~/$LOGFILE
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#distance calculation between points of  "$INPUT"_topomantmp and the area of  INPUT
v.distance from="$INPUT"_topomantmp to=$INPUT from_type=point to_type=area from_layer=2 dmax=$DIST upload=to_attr column=catp to_column=$ID --q 2>>~/$LOGFILE

#loop for every line of  INPUTD
v.db.select -c map=$INPUTD column=cat --q > $TMP.${PROG}.6 2>>~/$LOGFILE
v.db.select -c map="$INPUT"_topomantmp layer=2 nv=0 fs=" " --q > $TMP.${PROG}.7 2>>~/$LOGFILE
#column order of  $TMP.${PROG}.7: cat|lcat|along|catp|catr
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
for i in `cat $TMP.${PROG}.6`;do
  awk -F" " <$TMP.${PROG}.7 '$2=='$i'' > $TMP.${PROG}.8 2>>~/$LOGFILE
  #start point
  head -n 1 $TMP.${PROG}.8 |cut -d" " -f4 > $TMP.${PROG}.9 2>>~/$LOGFILE

  #ending point if  SU
  tail -n 1 $TMP.${PROG}.8 |cut -d" " -f4 > $TMP.${PROG}.10 2>>~/$LOGFILE
  #ending point if  RS
  tail -n 1 $TMP.${PROG}.8 |cut -d" " -f5 > $TMP.${PROG}.11 2>>~/$LOGFILE


  #SU goes into a RS
  if [ "`cat $TMP.${PROG}.11`" != "0" ];then
    v.db.update map=$INPUT column=FlowCode value=R where="$ID = `cat $TMP.${PROG}.9`" --q 2>>~/$LOGFILE
    v.db.update map=$INPUT column=FlowID value=`cat $TMP.${PROG}.11` where="$ID = `cat $TMP.${PROG}.9`" --q 2>>~/$LOGFILE
  else
  #if $TMP.${PROG}.10 is Null, we put 0 to FlowID (outlet SU)
    if [ "`cat $TMP.${PROG}.10`" != "0" ];then
      #SU goes into  SU
      v.db.update map=$INPUT column=FlowCode value=S where="$ID = `cat $TMP.${PROG}.9`" --q 2>>~/$LOGFILE
      v.db.update map=$INPUT column=FlowID value=`cat $TMP.${PROG}.10` where="$ID = `cat $TMP.${PROG}.9`" --q 2>>~/$LOGFILE
    else
      #SU is an outlet
      v.db.update map=$INPUT column=FlowCode value="0" where="$ID = `cat $TMP.${PROG}.9`" --q 2>>~/$LOGFILE
      v.db.update map=$INPUT column=FlowID value=0 where="$ID = `cat $TMP.${PROG}.9`" --q 2>>~/$LOGFILE
    fi
  fi

rm -f $TMP.${PROG}.8 $TMP.${PROG}.9 $TMP.${PROG}.10 $TMP.${PROG}.11
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
done

#cleanup procedure
cleanup
exit 0
