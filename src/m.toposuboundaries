#!/bin/bash
############################################################################
#
# MODULE:       m.toposuboundaries
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Topology Calcul (step 3a : boundaries topology and contact point)
# REQUIREMENTS: m.testtype, m.pente4pl, m.prolong2pl
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#
#############################################################################
#%Module
#%  description: Topology Calcul (step 3a : boundaries topology and contact point)
#%END
#%flag
#% key: s
#% description: down neighbour choice by slope; default (no flag s) is down neighbour choice by difference altitude 
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input polygon vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: hydro
#% type: string
#% gisprompt: old,vector,vector
#% description: Input line hydrologic vector name
#% key_desc : name
#% required : no
#%END
#%option
#% key: hydrop
#% type: string
#% gisprompt: old,vector,vector
#% description: Input point vector name (centroids of HYDRO with x,y,z columns) 
#% key_desc : name
#% required : no
#%END
#%option
#% key: id
#% type: string
#% description: ID INPUT column name
#% required : yes
#%END
#%option
#% key: idhydro
#% type: string
#% description: ID HYDRO column name
#% required : no
#%END
#%option
#% key: ident
#% type: double
#% description: Id of the INPUT feature in treatment (from ID column)
#% required : yes
#%END
#%option
#% key: distreach
#% type: double
#% description: distance in meters for a possible contact between a SU and a reach
#% required : no
#%END
#%option
#% key: file
#% type: string
#% description: file name for flowcode and flowid data
#% required : yes
#%END
#%option
#% key: file2
#% type: string
#% description: file name for ascii line file 
#% required : yes
#%END
#%option
#% key: step
#% type: double
#% description: distance (in meters) between each slope direction inside a SU (boundaries and one contact point topology)
#% required : yes
#%END
#%option
#% key: dem
#% type: string
#% gisprompt: old,cell,raster
#% description: Input DEM name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: pohydro
#% type: string
#% description: Column name of the Process Order of HYDRO objects
#% required : no
#%END
#%option
#% key: slop_val
#% type: double
#% description: Replacement value for null or negative calculated slope (must be > 0; default value is 0.0001)
#% required : no
#%END 
  
if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi
 
INPUT="$GIS_OPT_INPUT"
HYDRO="$GIS_OPT_HYDRO"
HYDROP="$GIS_OPT_HYDROP"
DISTFOS="$GIS_OPT_DISTREACH"
IDHYDRO="$GIS_OPT_IDHYDRO"
ID="$GIS_OPT_ID"
IDENT="$GIS_OPT_IDENT"
FILE="$GIS_OPT_FILE"
FILE2="$GIS_OPT_FILE2"
STEP="$GIS_OPT_STEP"
MNT="$GIS_OPT_DEM"
POHYDRO="$GIS_OPT_POHYDRO"
SLOP_VAL="$GIS_OPT_SLOP_VAL"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi


#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=20;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_toposuboundariestmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing 
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.pente4pl`" ];then
  g.message -e message="m.pente4pl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.prolong2pl`" ];then
  g.message -e message="m.prolong2pl subscript required, please install it first"
  exit 2
fi

#test if input temporary vector map already exist

g.mlist type=vect pattern="$INPUT"_toposuboundariestmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_toposuboundariestmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2
fi

# test if input exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.1

#if input vector map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "polygone" ] ; then
  g.message -e message="<$INPUT> doesn't exist or isn't a vector polygon !!"
  cleanup
  exit 2
fi



#if  HYDRO provided
if [ ! -z "$HYDRO" ] ;then
  # test if HYDRO exists
  g.findfile element=vector mapset=${MAPSET?} file=${HYDRO} > /dev/null
  if [ $? -ne 0 ] ; then
  g.message -e message="<$HYDRO> vector doesn't exist !"
  cleanup
  exit 2
  fi
  
  m.testtype input=$HYDRO > $TMP.${PROG}.2
    
  #if hydro vector map is not a line vector, exit program
  if [ "`cat $TMP.${PROG}.2`" != "line" ] ; then
    g.message -e message="<$HYDRO> doesn't exist or isn't a vector line !!"
    cleanup
    exit 2
  fi
  
  # test HYDROP value
  g.findfile element=vector mapset=${MAPSET?} file=${HYDROP} > /dev/null
  if [ $? -ne 0 ] ; then
  g.message -e message="<$HYDROP> vector doesn't exist !"
  cleanup
  exit 2
  fi
  
  m.testtype input=$HYDROP > $TMP.${PROG}.3
   
  #if hydrop vector map is not a point vector, exit program
  if [ "`cat $TMP.${PROG}.3`" != "point" ] ; then
    g.message -e message="<$HYDROP> doesn't exist or isn't a vector point !!"
    cleanup
    exit 2
  fi

  # test  IDHYDRO value
  v.info -c map=$HYDRO --q |cut -d"|" -f2 |grep "^$IDHYDRO$" > $TMP.${PROG}.4
  if [ ! -s "$TMP.${PROG}.4" ];then
    g.message -e message="The column <$IDHYDRO> doesn't exist !!"
    cleanup
    exit 2
  fi
  
  if [ "$IDHYDRO" = "cat" ];then
		g.message -e message="<idhydro> can't be <cat> !!"
		cleanup
		exit 2	
	fi
  
  
  if [ ! -z "$DISTFOS" ] ;then
    # test  DISTFOS value
    if [ "`echo $DISTFOS |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
      g.message -e message="<DISTFOS> value isn't numeric !!"
      cleanup
      exit 2
    fi
	if [ "`echo $DISTFOS |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="<IDENT> value isn't numeric !!"
		cleanup
		exit 2
	fi
  fi
  # test POHYDRO value
  v.info -c map=$HYDRO --q |cut -d"|" -f2 |grep "^$POHYDRO$" > $TMP.${PROG}.5
  if [ ! -s "$TMP.${PROG}.5" ];then
          g.message -e message="The column <$POHYDRO> doesn't exist !!"
          cleanup
          exit 2
  fi
  
fi
#test if DEM raster exists
g.findfile element=cell mapset=${MAPSET?} file=${MNT} > /dev/null
if [ $? -ne 0 ] ; then
	g.message -e message="<$MNT> raster not found !!"
	cleanup
	exit 2
fi


# test ID value
v.info -c map=$INPUT --q |cut -d"|" -f2 |grep "^$ID$" > $TMP.${PROG}.6
if [ ! -s "$TMP.${PROG}.6" ];then
  g.message -e message="The column <$ID> doesn't exist !!"
  cleanup
  exit 2
fi

if [ "$ID" = "cat" ];then
		g.message -e message="<id> can't be <cat> !!"
		cleanup
		exit 2	
	fi

# test IDENT value
if [ "`echo $IDENT |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
  g.message -e message="<IDENT> value isn't numeric !!"
  cleanup
  exit 2
fi
if [ "`echo $IDENT |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="<IDENT> value isn't numeric !!"
	cleanup
	exit 2
fi

# test STEP value
if [ "`echo $STEP |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
	g.message -e message="<STEP> value isn't numeric !!"
	cleanup
	exit 2
fi
if [ "`echo $STEP |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="<IDENT> value isn't numeric !!"
		cleanup
		exit 2
fi
if [ -z "$FILE" ] ;then
    g.message -e message="<FILE> name is empty !"
    cleanup
    exit 2
  fi

if [ -z "$FILE2" ] ;then
    g.message -e message="<FILE2> name is empty !"
    cleanup
    exit 2
  fi

# test SLOP_VAL value
if [ ! -z "$SLOP_VAL" ];then
	if [ "`echo $SLOP_VAL |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
	  g.message -e message="<slop_val> value isn't numeric !!"
	  cleanup
	  exit 2
	fi
	if [ "`echo $SLOP_VAL |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="<slop_val> value isn't numeric !!"
		cleanup
		exit 2
	fi
	if [ "$SLOP_VAL" = "0" ];then
		g.message -e message="<slop_val> must be superior to 0 !!"
		cleanup
		exit 2
	fi
else
	SLOP_VAL=0.0001
fi



#################### securities ending
#  $IDENT is the cat of the current feature in process
echo " **** begin $IDENT"
# extraction of the current polygon
v.extract input=$INPUT output="$INPUT"_toposuboundariestmp1 where="$ID=$IDENT" --q 2>>~/$LOGFILE

#adding the points with STEP distance on "$INPUT"_toposuboundariestmp1 boundaries


v.to.points -v -i input="$INPUT"_toposuboundariestmp1 type=area output="$INPUT"_toposuboundariestmp2 dmax=$STEP  --q 2>>~/$LOGFILE

#x,y,z calculation for these points
v.db.addcol map="$INPUT"_toposuboundariestmp2 layer=2 columns="x DOUBLE PRECISION,y DOUBLE PRECISION,z DOUBLE PRECISION"  2>>~/$LOGFILE

v.to.db map="$INPUT"_toposuboundariestmp2 type=point layer=2 option=coor units=me column=x,y --q 2>>~/$LOGFILE
g.region vect="$INPUT"_toposuboundariestmp2 --q 2>>~/$LOGFILE
v.what.rast vector="$INPUT"_toposuboundariestmp2 raster=$MNT layer=2 column=z --q 2>>/dev/null
g.region -d --q 2>>~/$LOGFILE
#extraction of the values of $IDENT z,x,y of the current centroid of IDENT of  INPUT; creation of $TMP.${PROG}.7
v.db.select -c map=$INPUT column=$ID,z,x,y where="$ID = $IDENT" fs=" " nv=0 --q > $TMP.${PROG}.7 2>>~/$LOGFILE

#extraction of the values  cat,z,x,y of the boundary points  of  IDENT of INPUT
v.db.select -c map="$INPUT"_toposuboundariestmp2 column=cat,z,x,y fs=" " nv=0 layer=2 --q > $TMP.${PROG}.8 2>>~/$LOGFILE

#searching the point in contact with the biggest slope (flag s) or the biggest altitude difference (no flag s) with the centroid of IDENT
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi



if [ $GIS_FLAG_S -eq 1 ] ;then
		#with the biggest slope  (calling m.pente4pl script with  flag slope=y) flag S
		m.pente4pl --input1=$TMP.${PROG}.7 --input2=$TMP.${PROG}.8 --output=$TMP.${PROG}.9 --slope=y --slope2=$SLOP_VAL 2>>~/$LOGFILE
	else
		#with the biggest altitude difference  (calling m.pente4pl script with  flag slope=n) no flag S
		m.pente4pl --input1=$TMP.${PROG}.7 --input2=$TMP.${PROG}.8 --output=$TMP.${PROG}.9 --slope=n --slope2=$SLOP_VAL 2>>~/$LOGFILE
	fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#$TMP.${PROG}.9 contains the cat of the point in contact which have the biggest slope or the biggest altitude difference with IDENT centroid
#structure of $TMP.${PROG}.9 : cat of the  point, slope value  (or difference altitude value)

#with this contact point , searching the TYPE of feature in contact
#several possibilities : 0 S and 0 R --> Nodata, 1 or 1+ S and 1 or 1+ R

#creating a point layer vector map
v.extract input="$INPUT"_toposuboundariestmp2 output="$INPUT"_toposuboundariestmp3 type=point layer=2 list=`cat $TMP.${PROG}.9|cut -d" " -f1` --q 2>>~/$LOGFILE

#creation of a line vector map with the biggest directions for each SU; will be useful to create the column  Ldir
v.db.select -c map="$INPUT"_toposuboundariestmp2 column=x,y fs=" " nv=0 layer=2 where="cat=`cat $TMP.${PROG}.9 |cut -d" " -f1 `" > $TMP.${PROG}.10 2>>~/$LOGFILE
echo "L 2 1" >>$FILE2 2>>~/$LOGFILE
echo "`cat $TMP.${PROG}.7|cut -d" " -f3,4 `" >>$FILE2 2>>~/$LOGFILE
echo "`cat $TMP.${PROG}.10`" >>$FILE2 2>>~/$LOGFILE
echo "1 $IDENT" >>$FILE2 2>>~/$LOGFILE

rm -f $TMP.${PROG}.10
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi


#spatial selection between this contact point and the HYDRO vector
#searching the HYDRO features with buffer distance DISTFOS

v.db.addcol map="$INPUT"_toposuboundariestmp3 layer=2 columns="hydroid INTEGER,hydist double precision" --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi

if [ ! -z "$HYDRO" ] ;then
  v.distance from="$INPUT"_toposuboundariestmp3 to=$HYDRO from_type=point to_type=line from_layer=2 to_layer=1 dmax=$DISTFOS upload=to_attr,dist column=hydroid,hydist to_column=$IDHYDRO --q 2>>~/$LOGFILE
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi

v.db.select -c map="$INPUT"_toposuboundariestmp3 layer=2 column=hydroid where="hydroid not Null"  nv=0 --q > $TMP.${PROG}.11 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
echo "ISU = $IDENT is in contact with :" >> /tmp/m_toposu_log 2>>~/$LOGFILE

v.db.select -c map="$INPUT"_toposuboundariestmp3 layer=2 column=hydroid,hydist where="hydroid not Null" nv=0 fs=" " --q >/tmp/m_toposu_log 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#$TMP.${PROG}.11 will contain the  IDHYDRO of the  HYDRO features in contact with the contact point ; cases:  0 R, 1 R or 1+ R

#spatial selection between this contact point and the INPUT vector map
# we bufferise "$INPUT"_toposuboundariestmp3
v.buffer input="$INPUT"_toposuboundariestmp3 output="$INPUT"_toposuboundariestmp3B type=point distance=0.01 layer=2 --q 2>>/dev/null
v.select ainput=$INPUT atype=area binput="$INPUT"_toposuboundariestmp3B btype=area alayer=1 blayer=1 output="$INPUT"_toposuboundariestmp4 --q 2>>/dev/null
g.remove vect="$INPUT"_toposuboundariestmp3B --q 2>>/dev/null
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		#cleanup
		exit 2
fi

v.db.select -c map="$INPUT"_toposuboundariestmp4 column=$ID layer=1 nv=0  --q |grep -v "^$IDENT$" > $TMP.${PROG}.12 2>>~/$LOGFILE
#$TMP.${PROG}.12 will contain the  ID of INPUT in contact with the  contact point ; cases 0 S, 1 S or 1+ S
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi

# we can have several possible cases for the neighbours :
# if 1 R : neighbour by default
# if 1+ R : we take the R with the biggest PO
# if 0 R, we look the S :
#	- if 1 S : we take this S
# 	- if 1+ S : we take the S which cross the extension of the contact point
#	- if 0 S : we put Nodata (no neighbour for IDENT)


if [ -s "$TMP.${PROG}.11" ];then
	#if $TMP.${PROG}.11 is not empty, it means that we hav 1 or 1+ HYDRO in contact with IDENT
	wc -l $TMP.${PROG}.11 |cut -d" " -f1 > $TMP.${PROG}.13 2>>~/$LOGFILE
	if [ "`cat $TMP.${PROG}.13`" = "1" ];then
		#only 1 R in contact
		#we update FILE with  FlowCode and FlowID
		echo "R `cat $TMP.${PROG}.11`" > $FILE 2>>~/$LOGFILE
	else
		#1 = R in contact, we take the R with the biggest PO
		for a in `cat $TMP.${PROG}.11`;do
			v.db.select -c map=$HYDRO column=$IDHYDRO,$POHYDRO layer=1 where="$IDHYDRO = $a " fs=" " nv=0 --q >> $TMP.${PROG}.14 2>>~/$LOGFILE
		done
		sort -k2g $TMP.${PROG}.14 |tail - n 1 |cut -d" " -f1 > $TMP.${PROG}.15 2>>~/$LOGFILE
		echo "R `cat $TMP.${PROG}.15`" > $FILE 2>>~/$LOGFILE
	fi
	
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
else
	if [ -s "$TMP.${PROG}.12" ];then
		wc -l $TMP.${PROG}.12|cut -d" " -f1 > $TMP.${PROG}.16 2>>~/$LOGFILE
		if [ "`cat $TMP.${PROG}.16`" = "1" ];then
			#here only one S, we update  $FILE
			echo "S `cat $TMP.${PROG}.12`" > $FILE 2>>~/$LOGFILE
		else
			#if several S , calling m.prolong2pl script which allows to extent the line centroids - contact point
			# and allows to choose the intersected S
			#$TMP.${PROG}.17 will contain  x,y of the starting point and $TMP.${PROG}.17 the  x,y of the contact  point
			cut -d" " -f3,4 $TMP.${PROG}.7 > $TMP.${PROG}.17 2>>~/$LOGFILE
			catpoint=`cat $TMP.${PROG}.9|cut -d" " -f1`
			
			awk -F" " <$TMP.${PROG}.8 '$1=='$catpoint''  |cut -d" " -f3,4 > $TMP.${PROG}.18 2>>~/$LOGFILE

			m.prolong2pl  --input1=$TMP.${PROG}.17 --input2=$TMP.${PROG}.18 --output=$TMP.${PROG}.19 2>>~/$LOGFILE
			#$TMP.${PROG}.19 contains the coordinates of the point in the down S
			#creation of a point vector map with $TMP.${PROG}.19
			v.in.ascii input=$TMP.${PROG}.19 output="$INPUT"_toposuboundariestmp5 format=point fs=" " --q 2>>~/$LOGFILE

			# identification if the S which contains the point of  $TMP.${PROG}.19
			v.distance -p from="$INPUT"_toposuboundariestmp5 to=$INPUT from_layer=1 to_layer=1 from_type=point to_type=area dmax=0 upload=to_attr column=toto to_column=$ID --q |cut -d"|" -f2 |tail -n 1 > $TMP.${PROG}.20 2>>~/$LOGFILE
			echo "S `cat $TMP.${PROG}.20`" > $FILE 2>>~/$LOGFILE
			g.remove vect="$INPUT"_toposuboundariestmp5 --q  2>>~/$LOGFILE
		fi
	else
		#if  $TMP.${PROG}.12 is empty, no neighbour , we put Nodata in FILE
		echo "Nodata" > $FILE 2>>~/$LOGFILE
	fi
	
	
	
	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
fi


echo " **** end $IDENT"
cleanup procedure
cleanup
exit 0
