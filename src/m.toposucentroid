#!/bin/bash
############################################################################
#
# MODULE:       m.toposucentroid
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Topology Calcul (step 3a : classical topology, centroid, D8 modified)
# REQUIREMENTS: m.testtype, m.pente5pl, m.tripl
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: Topology Calcul (step 3a : classical topology, centroid, D8 modified)
#%END
#%flag
#% key: s
#% description: down neighbour choice by slope; default (no flag s) is down neighbour choice by difference altitude 
#%END
#%option 
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input polygon vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: hydro
#% type: string
#% gisprompt: old,vector,vector
#% description: Input line hydrologic vector name
#% key_desc : name
#% required : no
#%END
#%option
#% key: id
#% type: string
#% description: ID INPUT column name
#% required : yes
#%END
#%option
#% key: idhydro
#% type: string
#% description: ID HYDRO column name
#% required : no
#%END
#%option
#% key: ident
#% type: double
#% description: Id of the INPUT feature in treatment (from ID column)
#% required : yes
#%END
#%option
#% key: distreach
#% type: double
#% description: distance in meters for a possible contact between a SU and a reach
#% required : no
#%END
#%option
#% key: file
#% type: string
#% description: file name for flowcode and flowid data
#% required : yes
#%END
#%option
#% key: slop_val
#% type: double
#% description: Replacement value for null or negative calculated slope (must be > 0; default value is 0.0001)
#% required : no
#%END
   
if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
HYDRO="$GIS_OPT_HYDRO"
DISTFOS="$GIS_OPT_DISTREACH"
IDHYDRO="$GIS_OPT_IDHYDRO"
ID="$GIS_OPT_ID"
IDENT="$GIS_OPT_IDENT"
FILE="$GIS_OPT_FILE"
SLOP_VAL="$GIS_OPT_SLOP_VAL"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi


#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"
#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=17;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_toposucentroidtmp* --q
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
  
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.pente5pl`" ];then
  g.message -e message="m.pente5pl subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.tripl`" ];then
  g.message -e message="m.tripl subscript required, please install it first"
  exit 2
fi

#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi


#test if input temporary vector map already exist

g.mlist type=vect pattern="$INPUT"_toposucentroidtmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_toposucentroidtmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2
fi

# test if input exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.2
#if input vector map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "polygone" ] ; then
  g.message -e message="<$INPUT> doesn't exist or isn't a vector polygon !!"
  cleanup
  exit 2
fi


#if HYDRO provided
if [ ! -z "$HYDRO" ] ;then
  #test if HYDRO exists
  g.findfile element=vector mapset=${MAPSET?} file=${HYDRO} > /dev/null
  if [ $? -ne 0 ] ; then
  g.message -e message="<$HYDRO> vector doesn't exist !"
  cleanup
  exit 2
  fi
  
  m.testtype input=$HYDRO > $TMP.${PROG}.3
  #if hydro vector map is not a line vector, exit program
  if [ "`cat $TMP.${PROG}.3`" != "line" ] ; then
    g.message -e message="<$HYDRO> doesn't exist or isn't a vector line !!"
    cleanup
    exit 2
  fi

  #test  IDHYDRO value
  v.info -c map=$HYDRO --q |cut -d"|" -f2 |grep "^$IDHYDRO$" > $TMP.${PROG}.4
  if [ ! -s "$TMP.${PROG}.4" ];then
    g.message -e message="The column <$IDHYDRO> doesn't exist !!"
    cleanup
    exit 2
  fi
  
  if [ "$IDHYDRO" = "cat" ];then
		g.message -e message="<idhydro> can't be <cat> !!"
		cleanup
		exit 2	
	fi
  
  
  if [ ! -z "$DISTFOS" ] ;then
    # test DISTFOS value
    if [ "`echo $DISTFOS |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
      g.message -e message="<DISTFOS> value isn't numeric !!"
      cleanup
      exit 2
    fi
	if [ "`echo $DISTFOS |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="<DISTFOS> value isn't numeric !!"
		cleanup
		exit 2
	fi
  fi

fi
# test ID value
v.info -c map=$INPUT --q |cut -d"|" -f2 |grep "^$ID$" > $TMP.${PROG}.5
if [ ! -s "$TMP.${PROG}.5" ];then
  g.message -e message="The column <$ID> doesn't exist !!"
  cleanup
  exit 2
fi

if [ "$ID" = "cat" ];then
		g.message -e message="<id> can't be <cat> !!"
		cleanup
		exit 2	
	fi

#test IDENT value
if [ "`echo $IDENT |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
  g.message -e message="<IDENT> value isn't numeric !!"
  cleanup
  exit 2
fi
if [ "`echo $IDENT |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="<IDENT> isn't numeric !!"
	cleanup
	exit 2
fi

# test SLOP_VAL value
if [ ! -z "$SLOP_VAL" ];then
	if [ "`echo $SLOP_VAL |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
	  g.message -e message="<slop_val> value isn't numeric !!"
	  cleanup
	  exit 2
	fi
	if [ "`echo $SLOP_VAL |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="<slop_val> value isn't numeric !!"
		cleanup
		exit 2
	fi
	if [ "$SLOP_VAL" = "0" ];then
		g.message -e message="<slop_val> must be superior to 0 !!"
		cleanup
		exit 2
	fi
else
	SLOP_VAL=0.0001
fi


#################### securities ending

#neighbour topology calculation
v.category input=$INPUT output="$INPUT"_toposucentroidtmp type=boundary layer=2 option=add --q 2>>~/$LOGFILE
v.to.db -p map="$INPUT"_toposucentroidtmp option=sides column=left,right layer=2 --q > $TMP.${PROG}.6 2>>~/$LOGFILE


#extraction of the polygon in process
v.extract input=$INPUT output="$INPUT"_toposucentroidtmp1 where="$ID=$IDENT" --q 2>>~/$LOGFILE

#searching the polygon neighbours of IDENT
v.db.select -c map=$INPUT layer=1 column=cat where="$ID = $IDENT" nv=0 > $TMP.${PROG}.7 2>>~/$LOGFILE





awk -F"|" < $TMP.${PROG}.6 '$2=='`cat $TMP.${PROG}.7`''|cut -d"|" -f3 > $TMP.${PROG}.8 2>>~/$LOGFILE
awk -F"|" < $TMP.${PROG}.6 '$3=='`cat $TMP.${PROG}.7`''|cut -d"|" -f2 >> $TMP.${PROG}.8 2>>~/$LOGFILE
awk -F" " < $TMP.${PROG}.8 '$1!='-1'' > $TMP.${PROG}.9 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#the cat(s) of the polygon neigbour(s) of IDENT is (are) in  $TMP.${PROG}.9 file

#if $TMP.${PROG}.9 is not empty (IDENT has neighbour(s))
if [ -s "$TMP.${PROG}.9" ];then
  #we store the IDENT, x, y and z of the neighbours
  for a in `cat $TMP.${PROG}.9`;do
      v.db.select -c map=$INPUT column=$ID,z,x,y where="cat=$a" fs=" " nv=9999 >> $TMP.${PROG}.10 2>>~/$LOGFILE
  done
else
  echo "Nodata" > $TMP.${PROG}.10 2>>~/$LOGFILE
fi
#$TMP.${PROG}.10 contains the  ID,z,x,y of IDENT neighbours
#or contains Nodata if no neighbours

#we store in $TMP.${PROG}.11  ID,z,x,y of IDENT
v.db.select -c map=$INPUT column=$ID,z,x,y where="$ID=$IDENT" fs=" " nv=9999 >> $TMP.${PROG}.11 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
if [ ! -z "$HYDRO" ] ;then
  #searching the linear neighbours of IDENT
  #the search is done with a buffer distance DISTFOS
  #we store the vertices of the boundaries of INPUT
  v.category input="$INPUT"_toposucentroidtmp1 output="$INPUT"_toposucentroidtmp2 type=boundary option=add layer=2 --q 2>>~/$LOGFILE
  v.extract input="$INPUT"_toposucentroidtmp2 output="$INPUT"_toposucentroidtmp3 type=boundary layer=2 --q 2>>~/$LOGFILE
  v.to.points -v input="$INPUT"_toposucentroidtmp3 output="$INPUT"_toposucentroidtmp4 type=boundary --q 2>>~/$LOGFILE
  v.db.addcol map="$INPUT"_toposucentroidtmp4 layer=2 columns="IDH INTEGER,hydist double precision" --q 2>>~/$LOGFILE
  v.distance from="$INPUT"_toposucentroidtmp4 to=$HYDRO from_type=point to_type=line from_layer=2 to_layer=1 dmax=$DISTFOS upload=to_attr,dist column=IDH,hydist to_column=$IDHYDRO --q 2>>~/$LOGFILE
  v.db.select -c map="$INPUT"_toposucentroidtmp4 layer=2 column=IDH fs=" " nv="a" --q |grep -v "a" |sort -t" " -k1n > $TMP.${PROG}.12 2>>~/$LOGFILE
  echo "ISU = $IDENT is in contact with :" >> /tmp/m_toposu_log 2>>~/$LOGFILE
  v.db.select -c map="$INPUT"_toposucentroidtmp4 layer=2 column=IDH,hydist fs=" " nv=0 where="IDH not Null" --q >> /tmp/m_toposu_log 2>>~/$LOGFILE
  uniq -u $TMP.${PROG}.12 > $TMP.${PROG}.13 2>>~/$LOGFILE
  uniq -d $TMP.${PROG}.12 >> $TMP.${PROG}.13 2>>~/$LOGFILE
  if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
  fi
  #if  $TMP.${PROG}.13 is not empty, it contains the  ID(s) of the reachs in contact with the  feature of IDENT
  
  if [ -s "$TMP.${PROG}.13" ];then
          #if  $TMP.${PROG}.13 is not empty, we store in  $TMP.${PROG}.14 for each ID the IDHYDRO,z,x,y of HYDRO centroids
          for aa in `cat $TMP.${PROG}.13`;do
                  v.db.select -c map=$HYDRO column=$IDHYDRO,z,x,y fs=" " nv=9999 where=" $IDHYDRO = $aa " >> $TMP.${PROG}.14 2>>~/$LOGFILE
          done
  else
          #if  $TMP.${PROG}.13 is empty, we put Nodata in  $TMP.${PROG}.14
          echo "Nodata" > $TMP.${PROG}.14 2>>~/$LOGFILE
  fi
else
  	echo "Nodata" > $TMP.${PROG}.14 2>>~/$LOGFILE
fi
###synthesis : 
#$TMP.${PROG}.11 contains ID,z,x,y of IDENT
#$TMP.${PROG}.10 contains  ID,z,x,y of the IDENT neighbours  (can contains  Nodata)
#$TMP.${PROG}.14 contains IDHYDRO,z,x,y of the HYDRO neighbours of IDENT (can contains  Nodata)
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi

#if  $TMP.${PROG}.10 do not contain nodata, we search the neighbour ID
#case 1 : with the biggest slope (calling m.pente5pl script with flag slope=y) flag S
#case 2 : with the biggest difference altitude  (calling de m.pente5pl script with flag slope=n) no flag S
if [ "`cat $TMP.${PROG}.10`" != "Nodata" ];then 
	if [ $GIS_FLAG_S -eq 1 ] ;then
		#with the biggest slope  (calling m.pente5pl script with flag slope=y) flag S
		m.pente5pl --input1=$TMP.${PROG}.11 --input2=$TMP.${PROG}.10 --output=$TMP.${PROG}.15 --code=S --slope=y --slope2=$SLOP_VAL 2>>~/$LOGFILE
	else
		#with the biggest altitude difference  (calling  m.pente5pl script with  flag slope=n) no flag S
		m.pente5pl --input1=$TMP.${PROG}.11 --input2=$TMP.${PROG}.10 --output=$TMP.${PROG}.15 --code=S --slope=n --slope2=$SLOP_VAL 2>>~/$LOGFILE
	fi

fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#if  $TMP.${PROG}.14 do not contains nodata, we search the IDHYDRO neighbour
#case 1 : with the biggest slope (calling m.pente5pl script with flag slope=y) flag S
#case 2 : with the biggest difference altitude  (calling de m.pente5pl script with flag slope=n) no flag S
if [ "`cat $TMP.${PROG}.14`" != "Nodata" ];then 
	if [ $GIS_FLAG_S -eq 1 ] ;then
		#with the biggest slope  (calling m.pente5pl script with flag slope=y) flag S
		m.pente5pl --input1=$TMP.${PROG}.11 --input2=$TMP.${PROG}.14 --output=$TMP.${PROG}.16 --code=R --slope=y --slope2=$SLOP_VAL 2>>~/$LOGFILE
	else
		#with the biggest altitude difference  (calling  m.pente5pl script with  flag slope=n) no flag S
		m.pente5pl --input1=$TMP.${PROG}.11 --input2=$TMP.${PROG}.14 --output=$TMP.${PROG}.16 --code=R --slope=n --slope2=$SLOP_VAL 2>>~/$LOGFILE
	fi

fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi




#structure of $TMP.${PROG}.16 and $TMP.${PROG}.15 : FlowCode FlowID value (slope or != d'altitude)
#according to the two files we will search the down neighbour R or S of IDENT
if [ -e "$TMP.${PROG}.15" ] && [ -e "$TMP.${PROG}.16" ];then
	#if we have neighbours R and S, we make a choice
	echo "`cat $TMP.${PROG}.15`" >> $TMP.${PROG}.16 2>>~/$LOGFILE
	m.tripl --input=$TMP.${PROG}.16 --output=$TMP.${PROG}.17 --col=2 2>>~/$LOGFILE
	tail -n 1 $TMP.${PROG}.17|cut -d" " -f1,2 > $FILE 2>>~/$LOGFILE
else
	#if we have only a neighbour S
	if [ -e "$TMP.${PROG}.15" ] && [ ! -e "$TMP.${PROG}.16" ];then
		cut -d" " -f1,2 $TMP.${PROG}.15 > $FILE 2>>~/$LOGFILE
	else
		#if we have only a neighbour R
		if [ ! -e "$TMP.${PROG}.15" ] && [ -e "$TMP.${PROG}.16" ];then
			cut -d" " -f1,2 $TMP.${PROG}.16 > $FILE 2>>~/$LOGFILE
		else
			#if we have no neighbour
			echo "Nodata" > $FILE 2>>~/$LOGFILE
		fi
	fi
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#structure of $FILE: FlowCode FlowID
#if Nodata: no down neighbour found

#cleanup procedure
cleanup
exit 0
