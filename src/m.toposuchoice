#!/bin/bash
############################################################################
#
# MODULE:       m.toposuchoice
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Topology Calcul (step 3e : classical topology, centroid, D8 modified)
# REQUIREMENTS: m.testtype, v.line.center
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: Topology Calcul (step 3e : classical topology, centroid, D8 modified)
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input polygon vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: hydro
#% type: string
#% gisprompt: old,vector,vector
#% description: Input line hydrologic vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: id
#% type: string
#% description: ID INPUT column name
#% required : yes
#%END
#%option
#% key: idhydro
#% type: string
#% description: ID HYDRO column name
#% required : yes
#%END
#%option
#% key: ident
#% type: double
#% description: Id of the INPUT feature in treatment (from ID column)
#% required : yes
#%END
#%option
#% key: distreach
#% type: double
#% description: distance in meters for a possible contact between a SU and a reach
#% required : no
#%END
#%option
#% key: file
#% type: string
#% description: file name for flowcode and flowid data
#% required : yes
#%END 
  
if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
HYDRO="$GIS_OPT_HYDRO"
DISTFOS="$GIS_OPT_DISTREACH"
IDHYDRO="$GIS_OPT_IDHYDRO"
ID="$GIS_OPT_ID"
IDENT="$GIS_OPT_IDENT"
FILE="$GIS_OPT_FILE"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi


# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=17;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_toposuchoicetmp* --q
   if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
   fi
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.line.center`" ];then
  g.message -e message="v.line.center subscript required, please install it first"
  exit 2
fi

#test if input temporary vector map already exist

g.mlist type=vect pattern="$INPUT"_toposuchoicetmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_toposuchoicetmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2
fi

# test if input exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi
 
m.testtype input=$INPUT > $TMP.${PROG}.2

#if input vector map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "polygone" ] ; then
  g.message -e message="<$INPUT> doesn't exist or isn't a vector polygon !!"
  cleanup
  exit 2
fi

# test if hydro exists
g.findfile element=vector mapset=${MAPSET?} file=${HYDRO} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$HYDRO> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$HYDRO > $TMP.${PROG}.3

#if input hydro map is not a line vector, exit program
if [ "`cat $TMP.${PROG}.3`" != "line" ] ; then
  g.message -e message="<$HYDRO> doesn't exist or isn't a vector line !!"
  cleanup
  exit 2
fi

# test ID value
v.info -c map=$INPUT --q |cut -d"|" -f2 |grep "^$ID$" > $TMP.${PROG}.4
if [ ! -s "$TMP.${PROG}.4" ];then
  g.message -e message="The column <$ID> doesn't exist !!"
  cleanup
  exit 2
fi

if [ "$ID" = "cat" ];then
		g.message -e message="<id> can't be <cat> !!"
		cleanup
		exit 2	
	fi

# test IDHYDRO value
v.info -c map=$HYDRO --q |cut -d"|" -f2 |grep "^$IDHYDRO$" > $TMP.${PROG}.5
if [ ! -s "$TMP.${PROG}.5" ];then
  g.message -e message="The column <$IDHYDRO> doesn't exist !!"
  cleanup
  exit 2
fi

if [ "$IDHYDRO" = "cat" ];then
		g.message -e message="<idhydro> can't be <cat> !!"
		cleanup
		exit 2	
	fi

# test DISTFOS value
if [ ! -z "$DISTFOS" ] ;then
	if [ "`echo $DISTFOS |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
	  g.message -e message="<DISTFOS> value isn't numeric !!"
	  cleanup
	  exit 2
	fi
	if [ "`echo $DISTFOS |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
		g.message -e message="<DISTFOS> isn't numeric !!"
		cleanup
		exit 2
	fi
fi
# test IDENT value
if [ "`echo $IDENT |grep "[[:digit:]]" | wc -c`" = "0" ] ;then
  g.message -e message="<IDENT> value isn't numeric !!"
  cleanup
  exit 2
fi
if [ "`echo $IDENT |grep "[[:alpha:]]" | wc -c`" != "0" ] ;then
	g.message -e message="<IDENT> isn't numeric !!"
	cleanup
	exit 2
fi
# test FILE value
if [ ! -e "$FILE" ];then
	g.message -e message="<$FILE> doesn't exist !!"
	cleanup
        exit 2
fi

#################### securities ending

#storing the cat of IDENT
v.db.select -c map=$INPUT column=cat where="$ID = $IDENT"  nv=0 --q > $TMP.${PROG}.6 2>>~/$LOGFILE

#storing the  FLowID of the down SU
cut -d" " -f2 $FILE > $TMP.${PROG}.7 2>>~/$LOGFILE
#storing the cat of the down SU
v.db.select -c map=$INPUT column=cat where="$ID = "`cat $TMP.${PROG}.7`""  nv=0 --q >> $TMP.${PROG}.6 2>>~/$LOGFILE

#extraction of the two SU
v.extract input=$INPUT output="$INPUT"_toposuchoicetmp file=$TMP.${PROG}.6 --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#cat boundaries calculation and neighbour topology calculation
v.category input="$INPUT"_toposuchoicetmp output="$INPUT"_toposuchoicetmp2 type=boundary option=add layer=2 --q 2>>~/$LOGFILE
v.db.addtable map="$INPUT"_toposuchoicetmp2 layer=2 columns="left INTEGER,right INTEGER"  --q 2>>~/$LOGFILE
v.to.db map="$INPUT"_toposuchoicetmp2 type=boundary option=sides column=left,right layer=2 --q 2>>~/$LOGFILE
v.db.select -c map="$INPUT"_toposuchoicetmp2 layer=2 column=cat,left,right  nv=0 --q > $TMP.${PROG}.8 2>>~/$LOGFILE
#$TMP.${PROG}.8 contains the neighbour informations: cat S, cat S  left neighbour, cat S right neighbour
#removing the  -1 of $TMP.${PROG}.8
grep -v "\-1" $TMP.${PROG}.8 > $TMP.${PROG}.9 2>>~/$LOGFILE
#storing the cats of the two  SU in the new vector map  INPUT_toposuchoicetmp (storing again these cats in case of during the extraction, modification of the cats)
v.db.select -c map="$INPUT"_toposuchoicetmp2 column=cat where="$ID = $IDENT"   --q > $TMP.${PROG}.10 2>>~/$LOGFILE
v.db.select -c map="$INPUT"_toposuchoicetmp2 column=cat where="$ID = "`cat $TMP.${PROG}.7`"" --q > $TMP.${PROG}.11 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#searching the cat of the boundary shared between the two SU
echo "`cat $TMP.${PROG}.10`|`cat $TMP.${PROG}.11`" > $TMP.${PROG}.12 2>>~/$LOGFILE
echo "`cat $TMP.${PROG}.11`|`cat $TMP.${PROG}.10`" > $TMP.${PROG}.13 2>>~/$LOGFILE
grep "`cat $TMP.${PROG}.12`$" $TMP.${PROG}.9 > $TMP.${PROG}.14 2>>~/$LOGFILE
grep "`cat $TMP.${PROG}.13`$" $TMP.${PROG}.9 >> $TMP.${PROG}.14 2>>~/$LOGFILE
sort -t" " -k1n $TMP.${PROG}.14 > $TMP.${PROG}.15 2>>~/$LOGFILE
uniq -u $TMP.${PROG}.15 > $TMP.${PROG}.16 2>>~/$LOGFILE
uniq -d $TMP.${PROG}.15 >> $TMP.${PROG}.16 2>>~/$LOGFILE
#$TMP.${PROG}.16 contains the cat(s) of the boundary(ies) shared between the two SU

#extraction of this (these) boundary(ies) et storing the centroid(s) of this (these) boundary(ies)
v.extract input="$INPUT"_toposuchoicetmp2 output="$INPUT"_toposuchoicetmp3 type=boundary layer=2 file=$TMP.${PROG}.16 --q 2>>~/$LOGFILE
v.type input="$INPUT"_toposuchoicetmp3 output="$INPUT"_toposuchoicetmp4 type=boundary,line --q 2>>~/$LOGFILE
v.line.center input="$INPUT"_toposuchoicetmp4 output="$INPUT"_toposuchoicetmp5 layer=2 2>/dev/null
v.db.addtable map="$INPUT"_toposuchoicetmp5 columns="IDH INTEGER" --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#with this point vector map, searching if we have contact with the reach vector map (with buffer distance DISTFOS)
if [ ! -z "$DISTFOS" ] ;then
	v.distance from="$INPUT"_toposuchoicetmp5 to=$HYDRO from_type=point to_type=line from_layer=1 to_layer=1 dmax=$DISTFOS upload=to_attr column=IDH to_column=$IDHYDRO --q 2>>~/$LOGFILE
else
v.distance from="$INPUT"_toposuchoicetmp5 to=$HYDRO from_type=point to_type=line from_layer=1 to_layer=1 dmax=0.1 upload=to_attr column=IDH to_column=$IDHYDRO --q 2>>~/$LOGFILE
fi	
v.db.select -c map="$INPUT"_toposuchoicetmp5 layer=1 column=IDH fs=" " nv="a" |grep -v "a" |head -n 1 > $TMP.${PROG}.17 2>>~/$LOGFILE
#using head command to have only on cat of reach
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi


#so, if $TMP.${PROG}.17 is not empty, we have a reach between the two SU and we modify $FILE
if [ -s "$TMP.${PROG}.17" ];then
	rm $FILE
	echo "R `cat $TMP.${PROG}.17`" > $FILE 2>>~/$LOGFILE
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#cleanup procedure
cleanup
exit 0
