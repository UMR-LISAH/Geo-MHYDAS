#!/bin/bash
############################################################################
#
# MODULE:       m.toposuline
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Creation of POLYGON_dir for Process Order calcul
# REQUIREMENTS: m.testtype, v.line.center
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################
#%Module
#%  description: Creation of POLYGON_dir for Process Order calcul
#%END
#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input polygon vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Output direction vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: id
#% type: string
#% description: ID SU column name
#% required : yes
#%END
#%option
#% key: hydro
#% type: string
#% gisprompt: old,vector,vector
#% description: Input line hydrologic vector name
#% key_desc : name
#% required : no
#%END
#%option
#% key: idhydro
#% type: string
#% description: ID reach column name
#% required : no
#%END


if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

INPUT="$GIS_OPT_INPUT"
OUTPUT="$GIS_OPT_OUTPUT"
ID="$GIS_OPT_ID"
HYDRO="$GIS_OPT_HYDRO"
IDHYDRO="$GIS_OPT_IDHYDRO"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"

#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=15;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done

  g.mremove -f vect="$INPUT"_toposulinetmp* --q
 if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
  
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which v.line.center`" ];then
  g.message -e message="v.line.center subscript required, please install it first"
  exit 2
fi

#test if output vector map already exists
eval `g.findfile element=vector file="$OUTPUT" `
if [ "$file" ] ; then
  if [ -z "$GRASS_OVERWRITE" ] || [ "$GRASS_OVERWRITE" -eq 0 ]; then
    g.message -w message="<$OUTPUT> already exists in this mapset or in another mapset of this location. Use the --o flag to overwrite." 1>&2
    exit 2
  else
    g.message -w message="<$OUTPUT>  already exists and will be overwritten"
  fi
fi

#test if OUTPUT vector name is allowed
v.in.region output=$OUTPUT --q  |grep -v "SQL" 2>$TMP.${PROG}.15
	
if [ -s "$TMP.${PROG}.15" ];then
	g.message -w message="Illegal vector map name <$OUTPUT>" 1>&2
    exit 2
else
	g.remove vect=$OUTPUT --q  
fi



#test if input temporary vector map already exist
g.mlist type=vect pattern="$INPUT"_toposulinetmp*  > $TMP.${PROG}.1
if [ -s "$TMP.${PROG}.1" ];then
  g.message -w message="<$INPUT>_toposulinetmp name for temporay vector files is already used in this mapset or in another mapset of this location"
  cleanup
  exit 2
fi

# test if input exists
g.findfile element=vector mapset=${MAPSET?} file=${INPUT} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$INPUT> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$INPUT > $TMP.${PROG}.2

#if input vector map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.2`" != "polygone" ] ; then
  g.message -e message="<$INPUT> doesn't exist or isn't a vector polygon !!"
  cleanup
  exit 2
fi

# test  ID value
v.info -c map=$INPUT --q |cut -d"|" -f2 |grep "^$ID$" > $TMP.${PROG}.3
if [ ! -s "$TMP.${PROG}.3" ];then
  g.message -e message="The column <$ID> doesn't exist !!"
  cleanup
  exit 2
fi

if [ "$ID" = "cat" ];then
		g.message -e message="<id> can't be <cat> !!"
		cleanup
		exit 2	
	fi


#if HYDRO provided
if [ ! -z "$HYDRO" ] ;then
  # test if hydro exists
  g.findfile element=vector mapset=${MAPSET?} file=${HYDRO} > /dev/null
  if [ $? -ne 0 ] ; then
  g.message -e message="<$HYDRO> vector doesn't exist !"
  cleanup
  exit 2
  fi
  
  m.testtype input=$HYDRO > $TMP.${PROG}.4
  
  #if hydro vector map is not a line vector, exit program
  if [ "`cat $TMP.${PROG}.4`" != "line" ] ; then
    g.message -e message="<$HYDRO> doesn't exist or isn't a vector line !!"
    cleanup
    exit 2
  fi
  
  # test IDHYDRO value
  v.info -c map=$HYDRO --q |cut -d"|" -f2 |grep "^$IDHYDRO$" > $TMP.${PROG}.5
  if [ ! -s "$TMP.${PROG}.5" ];then
    g.message -e message="The column <$IDHYDRO> doesn't exist !!"
    cleanup
    exit 2
  fi
  
  if [ "$IDHYDRO" = "cat" ];then
		g.message -e message="<idhydro> can't be <cat> !!"
		cleanup
		exit 2	
	fi
  
fi
#ending securities



#storing the centroid coordinates of INPUT
v.to.points input=$INPUT output="$INPUT"_toposulinetmp type=centroid --q 2>>~/$LOGFILE
v.db.addcol map="$INPUT"_toposulinetmp layer=2 columns="x DOUBLE PRECISION,y DOUBLE PRECISION" --q 2>>~/$LOGFILE
v.to.db map="$INPUT"_toposulinetmp layer=2 option=coor column=x,y --q 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
if [ ! -z "$HYDRO" ] ;then
  #storing centroid coordinates of HYDRO
  #storing cntroids of  HYDRO
  v.line.center input=$HYDRO layer=1 output="$INPUT"_toposulinetmp2 2>/dev/null
  #altitude centroids of HYDRO calculation and coordinates x, y; storing informations of IDHYDRO
  v.db.addtable map="$INPUT"_toposulinetmp2 columns="$IDHYDRO integer,x double precision,y double precision" --q 2>>~/$LOGFILE
  v.to.db map="$INPUT"_toposulinetmp2 option=coor column=x,y --q 2>>~/$LOGFILE
  v.distance from="$INPUT"_toposulinetmp2 to=$HYDRO from_type=point to_type=line from_layer=1 to_layer=1 upload=to_attr column=$IDHYDRO to_column=$IDHYDRO dmax=0.2 --q 2>>~/$LOGFILE
fi

v.db.select -c map=$INPUT column=$ID where="FlowID not Null AND FlowID <> 0" nv=0  --q |sort -t" " -k1g > $TMP.${PROG}.6 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi



for i in `cat $TMP.${PROG}.6`;do
	#starting point 
	v.db.select -c map=$INPUT column=cat where="$ID=$i" --q > $TMP.${PROG}.7 2>>~/$LOGFILE
	v.db.select -c map="$INPUT"_toposulinetmp layer=2 column=x,y where="lcat=`cat $TMP.${PROG}.7`" fs=" " nv=0 --q > $TMP.${PROG}.8 2>>~/$LOGFILE

	v.db.select -c map=$INPUT column=FlowCode where="$ID=$i" nv=0 --q > $TMP.${PROG}.9 2>>~/$LOGFILE

	if [ "`cat $TMP.${PROG}.9`" = "S" ];then
		#ending point S
		v.db.select -c map=$INPUT column=FlowID where="$ID=$i" nv=0 --q > $TMP.${PROG}.10 2>>~/$LOGFILE
		v.db.select -c map=$INPUT column=cat where="$ID=`cat $TMP.${PROG}.10`" nv=0 --q > $TMP.${PROG}.11 2>>~/$LOGFILE
		v.db.select -c map="$INPUT"_toposulinetmp layer=2 column=x,y where="lcat=`cat $TMP.${PROG}.11`" fs=" " nv=0 --q > $TMP.${PROG}.12 2>>~/$LOGFILE

	else
		#ending point  R
		v.db.select -c map=$INPUT column=FlowID where="$ID=$i" nv=0 --q > $TMP.${PROG}.10 2>>~/$LOGFILE 
		v.db.select -c map="$INPUT"_toposulinetmp2 column=x,y where="$IDHYDRO=`cat $TMP.${PROG}.10`" fs=" " nv=0 --q > $TMP.${PROG}.12 2>>~/$LOGFILE


	fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi

	echo "L 2 1" >> $TMP.${PROG}.13 2>>~/$LOGFILE
	echo " `cat $TMP.${PROG}.8`" >> $TMP.${PROG}.13 2>>~/$LOGFILE
	echo " `cat $TMP.${PROG}.12`" >> $TMP.${PROG}.13 2>>~/$LOGFILE
	echo " 1 $i" >> $TMP.${PROG}.13 2>>~/$LOGFILE

	rm -f $TMP.${PROG}.7 $TMP.${PROG}.8 $TMP.${PROG}.9 $TMP.${PROG}.10 $TMP.${PROG}.11 $TMP.${PROG}.12
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
done

echo "`cat $TMP.${PROG}.13`" |v.in.ascii -n output=$OUTPUT format=standard --q 2>>~/$LOGFILE
v.db.addtable map=$OUTPUT columns="$ID INTEGER" --q 2>>~/$LOGFILE
v.db.update map=$OUTPUT column=$ID qcol=cat --q 2>>~/$LOGFILE

if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#cleanup procedure
cleanup
exit 0
