#!/bin/bash
############################################################################
#
# MODULE:       m.toposuloop
# AUTHOR(S):    Michael Rabotin (rabotin@supagro.inra.fr)
# PURPOSE:      Identification loops between SU
# REQUIREMENTS: m.testtype, m.splicepl
#
# COPYRIGHT:    (C) 2009 UMR LISAH - OpenFluid
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#
#############################################################################
#%Module
#%  description: Identification loops between SU
#%END
#%option
#% key: polygon
#% type: string
#% gisprompt: old,vector,vector
#% description: Input polygon vector name
#% key_desc : name
#% required : yes
#%END
#%option
#% key: file
#% type: string
#% description: File name for the output loop file 
#% required : yes
#%END
#%option
#% key: id
#% type: string
#% description: ID SU column name
#% required : yes
#%END  
  
if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

POLYGON="$GIS_OPT_POLYGON"
FILE="$GIS_OPT_FILE"
ID="$GIS_OPT_ID"

eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
if  [ -z "$GISBASE" ]
then
	echo ""
	echo "You must start GRASS to launch this program"
	echo ""
	exit 2
fi

#GRASS version testing, must be >= 6.3

Gversion1=`g.version |cut -d" " -f2 |cut -d"." -f1`
Gversion2=`g.version |cut -d" " -f2 |cut -d"." -f2`

if [ $Gversion1 -ge 6 ];then
	if [ $Gversion1 = 6 ] && [ $Gversion2 -lt 3 ];then 
		g.message -e message="You must have GRASS version 6.3.0 or higher"
		exit 2
	fi
else
	g.message -e message="You must have GRASS version 6.3.0 or higher"
	exit 2

fi

# awk testing
if [ ! -x "`which awk`" ];then
  g.message -e message="awk required, please install awk our gawk first"
  exit 2
fi

#perl testing
if [ ! -x "`which perl`" ];then
  g.message -e message="perl required, please install perl first"
  exit 2
fi

#test driver (dbf only accepted)
if [ "`db.connect -p|head -n 1 |cut -d":" -f2 `" != "dbf" ]
then
	g.message -e message="Sorry, but only dbf driver accepted "
  exit 2
fi 

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

# all above OK - proceed: set up temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: Unable to create temporary files." 1>&2
    exit 2
fi
rm -f $TMP
PROG=`basename $0 | sed 's/\./_/g'`
NOW=$(date +"%F-%X")
LOGFILE="$PROG-$NOW.log"


#cleanup procedure
cleanup()
{
  \rm -f $TMP
   
   for ((u=1;u<=17;u+=1))
  do
    rm -f $TMP.${PROG}.$u
  done
  if [ -e ~/$LOGFILE ] && [ ! -s ~/$LOGFILE ] ;then
		rm -f ~/$LOGFILE
  fi
 
}

# what to do in case of user break:
exitprocedure()
{
  echo -e "\nUser break!"
  cleanup
  exit 2
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15



# dependancies testing
if [ ! -x "`which m.testtype`" ];then
  g.message -e message="m.testtype subscript required, please install it first"
  exit 2
fi

if [ ! -x "`which m.splicepl`" ];then
  g.message -e message="m.splicepl subscript required, please install it first"
  exit 2
fi


#test if POLYGON vector map exists
g.findfile element=vector mapset=${MAPSET?} file=${POLYGON} > /dev/null
if [ $? -ne 0 ] ; then
 g.message -e message="<$POLYGON> vector doesn't exist !"
 cleanup
 exit 2
fi

m.testtype input=$POLYGON > $TMP.${PROG}.1
#if POLYGON vector map is not a polygon vector, exit program
if [ "`cat $TMP.${PROG}.1`" != "polygone" ] ; then
  g.message -e message="<$POLYGON> doesn't exist or isn't a vector polygon !!"
  cleanup
  exit 2
fi

# test ID value
v.info -c map=$POLYGON --q |cut -d"|" -f2 |grep "^$ID$" > $TMP.${PROG}.2
if [ ! -s "$TMP.${PROG}.2" ];then
  g.message -e message="The column <$ID> doesn't exist !!"
  cleanup
  exit 2
fi

if [ "$ID" = "cat" ];then
		g.message -e message="<id> can't be <cat> !!"
		cleanup
		exit 2	
	fi


if [ -z "$FILE" ] ;then
    g.message -e message="<FILE> name is empty !"
    cleanup
    exit 2
  fi


# securities ending

v.db.select -c map=$POLYGON layer=1 column=$ID,FlowID fs="|" nv=0 where="FlowCode='S'" --q > $TMP.${PROG}.3 2>>~/$LOGFILE
cut -d"|" -f1 $TMP.${PROG}.3 |sort -t" " -k1n  > $TMP.${PROG}.4 2>>~/$LOGFILE
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
while [ -s "$TMP.${PROG}.4" ];do

	m.splicepl 1 $TMP.${PROG}.4 > $TMP.${PROG}.5 2>>~/$LOGFILE
	varbou=`cat $TMP.${PROG}.5`

	if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
	fi
	while [ ! -z "$varbou" ];do

		
		echo "$varbou" >> $TMP.${PROG}.6 2>>~/$LOGFILE
		awk -F"|" < $TMP.${PROG}.3 '$1=='$varbou''|cut -d"|" -f2 > $TMP.${PROG}.7 2>>~/$LOGFILE
		varbou2=`cat $TMP.${PROG}.7`
		awk -F"|" < $TMP.${PROG}.3 '$1=='$varbou2'' > $TMP.${PROG}.8 2>>~/$LOGFILE

		if [ ! -s "$TMP.${PROG}.8" ];then
			echo "`cat $TMP.${PROG}.7`" >> $TMP.${PROG}.5 2>>~/$LOGFILE
			sort -t" " -k1n $TMP.${PROG}.5 > $TMP.${PROG}.9 2>>~/$LOGFILE
			diff $TMP.${PROG}.9 $TMP.${PROG}.4 |grep ">" |cut -d" " -f2 > $TMP.${PROG}.10 2>>~/$LOGFILE
			rm -f $TMP.${PROG}.4
			mv $TMP.${PROG}.10 $TMP.${PROG}.4 2>>~/$LOGFILE
			varbou=""

		else

			awk -F"|" < $TMP.${PROG}.6 '$1=='$varbou2'' > $TMP.${PROG}.11	 2>>~/$LOGFILE					

			if [ -s "$TMP.${PROG}.11" ];then
				grep -n "^$varbou2$" $TMP.${PROG}.6 |cut -d":" -f1 > $TMP.${PROG}.12 2>>~/$LOGFILE
				wc -l $TMP.${PROG}.6 |cut -d" " -f1 > $TMP.${PROG}.13 2>>~/$LOGFILE
				m.splicepl `cat $TMP.${PROG}.12`-`cat $TMP.${PROG}.13` $TMP.${PROG}.6 > $TMP.${PROG}.14 2>>~/$LOGFILE
				sort -t" " -k1n $TMP.${PROG}.14 > $TMP.${PROG}.15 2>>~/$LOGFILE
				echo "`cat $TMP.${PROG}.15`"|awk -F" " '{OFS=","; ORS=","; $1 = $1; print $0}' > $TMP.${PROG}.16 2>>~/$LOGFILE
				echo "`cat $TMP.${PROG}.16`" >> $FILE 2>>~/$LOGFILE
				sort -t" " -k1n $TMP.${PROG}.6 > $TMP.${PROG}.17 2>>~/$LOGFILE
				diff $TMP.${PROG}.17 $TMP.${PROG}.4 |grep ">" |cut -d" " -f2 > $TMP.${PROG}.10 2>>~/$LOGFILE
				rm -f $TMP.${PROG}.4
				mv $TMP.${PROG}.10 $TMP.${PROG}.4 2>>~/$LOGFILE
				varbou=""

			else

				
				varbou=$varbou2
			fi
		fi
                for ((w=7;w<=17;w+=1))
                do
                  rm -f $TMP.${PROG}.$u
                done
		if [ ! -z "`cat ~/$LOGFILE`" ];then
			g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
			cleanup
			exit 2
		fi

	done

	rm -f $TMP.${PROG}.6
	rm -f $TMP.${PROG}.5
done

if [ -s "$FILE" ];then
	sort -t"," -k1n $FILE > "$FILE"_2 2>>~/$LOGFILE
	uniq -u "$FILE"_2 > "$FILE"_3 2>>~/$LOGFILE
	uniq -d "$FILE"_2 >> "$FILE"_3 2>>~/$LOGFILE
	rm -f $FILE
	rm -f "$FILE"_2
	mv "$FILE"_3 $FILE 2>>~/$LOGFILE
fi
if [ ! -z "`cat ~/$LOGFILE`" ];then
		g.message -e message="Errors append during calculation. Check the home/user/$LOGFILE file for details"
		cleanup
		exit 2
fi
#cleanup procedure
cleanup
exit 0
